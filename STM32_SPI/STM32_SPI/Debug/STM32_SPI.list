
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ef0  08004ef0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ef0  08004ef0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef4  08004ef4  00014ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000078  08004f70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004f70  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f478  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023db  00000000  00000000  0002f520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00031900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df0  00000000  00000000  00032818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017740  00000000  00000000  00033608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001125c  00000000  00000000  0004ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096483  00000000  00000000  0005bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2427  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f0  00000000  00000000  000f2478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a6c 	.word	0x08004a6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004a6c 	.word	0x08004a6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <Get_DataBlock>:
#include "gpio.h"
#include "spi.h"


int Get_DataBlock(uint8_t assign_address, uint8_t *assign_value )
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af02      	add	r7, sp, #8
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
	MX_SPI1_Init();
 800029c:	f000 fe52 	bl	8000f44 <MX_SPI1_Init>
	MX_GPIO_Init();
 80002a0:	f000 fb90 	bl	80009c4 <MX_GPIO_Init>
	uint8_t tx_data[2] = {assign_address | 0x80, 0};
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	733b      	strb	r3, [r7, #12]
 80002ae:	2300      	movs	r3, #0
 80002b0:	737b      	strb	r3, [r7, #13]
	printf("\n transmit_address:  %x", tx_data[0]);
 80002b2:	7b3b      	ldrb	r3, [r7, #12]
 80002b4:	4619      	mov	r1, r3
 80002b6:	4819      	ldr	r0, [pc, #100]	; (800031c <Get_DataBlock+0x8c>)
 80002b8:	f003 f94a 	bl	8003550 <iprintf>
	printf("\n");
 80002bc:	200a      	movs	r0, #10
 80002be:	f003 f95f 	bl	8003580 <putchar>
	uint8_t get_value[2];
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //-----------
 80002c2:	2200      	movs	r2, #0
 80002c4:	2108      	movs	r1, #8
 80002c6:	4816      	ldr	r0, [pc, #88]	; (8000320 <Get_DataBlock+0x90>)
 80002c8:	f001 fb9e 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tx_data, get_value, 2, 1000);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	f107 010c 	add.w	r1, r7, #12
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2302      	movs	r3, #2
 80002dc:	4811      	ldr	r0, [pc, #68]	; (8000324 <Get_DataBlock+0x94>)
 80002de:	f001 fc59 	bl	8001b94 <HAL_SPI_TransmitReceive>
	HAL_Delay(100);
 80002e2:	2064      	movs	r0, #100	; 0x64
 80002e4:	f001 f8ba 	bl	800145c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);   //-----------
 80002e8:	2201      	movs	r2, #1
 80002ea:	2108      	movs	r1, #8
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <Get_DataBlock+0x90>)
 80002ee:	f001 fb8b 	bl	8001a08 <HAL_GPIO_WritePin>
	printf("\n receive_data:  %x", get_value[0]);
 80002f2:	7a3b      	ldrb	r3, [r7, #8]
 80002f4:	4619      	mov	r1, r3
 80002f6:	480c      	ldr	r0, [pc, #48]	; (8000328 <Get_DataBlock+0x98>)
 80002f8:	f003 f92a 	bl	8003550 <iprintf>
	printf("\n receive_data:  %x", get_value[1]);
 80002fc:	7a7b      	ldrb	r3, [r7, #9]
 80002fe:	4619      	mov	r1, r3
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <Get_DataBlock+0x98>)
 8000302:	f003 f925 	bl	8003550 <iprintf>
	printf("\n");
 8000306:	200a      	movs	r0, #10
 8000308:	f003 f93a 	bl	8003580 <putchar>
	*assign_value = get_value[1];
 800030c:	7a7a      	ldrb	r2, [r7, #9]
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	701a      	strb	r2, [r3, #0]
	return 1;
 8000312:	2301      	movs	r3, #1
};
 8000314:	4618      	mov	r0, r3
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	08004a84 	.word	0x08004a84
 8000320:	40021000 	.word	0x40021000
 8000324:	20000174 	.word	0x20000174
 8000328:	08004a9c 	.word	0x08004a9c

0800032c <Set_DataBlock>:
int Set_DataBlock(uint8_t assign_address, uint8_t assign_value)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af02      	add	r7, sp, #8
 8000332:	4603      	mov	r3, r0
 8000334:	460a      	mov	r2, r1
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	4613      	mov	r3, r2
 800033a:	71bb      	strb	r3, [r7, #6]
	MX_GPIO_Init();
 800033c:	f000 fb42 	bl	80009c4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000340:	f000 fe00 	bl	8000f44 <MX_SPI1_Init>
	uint8_t tx_data[2] = {assign_address  , assign_value};
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	733b      	strb	r3, [r7, #12]
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	737b      	strb	r3, [r7, #13]
	uint8_t return_value[2];
	printf("\n transmit_address:  %x", tx_data[0]);
 800034c:	7b3b      	ldrb	r3, [r7, #12]
 800034e:	4619      	mov	r1, r3
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <Set_DataBlock+0x74>)
 8000352:	f003 f8fd 	bl	8003550 <iprintf>
	printf("\n transmit_data:  %x", tx_data[1]);
 8000356:	7b7b      	ldrb	r3, [r7, #13]
 8000358:	4619      	mov	r1, r3
 800035a:	4812      	ldr	r0, [pc, #72]	; (80003a4 <Set_DataBlock+0x78>)
 800035c:	f003 f8f8 	bl	8003550 <iprintf>
	printf("\n");
 8000360:	200a      	movs	r0, #10
 8000362:	f003 f90d 	bl	8003580 <putchar>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);   //-----------
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <Set_DataBlock+0x7c>)
 800036c:	f001 fb4c 	bl	8001a08 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tx_data, return_value, 2, 1000);
 8000370:	f107 0208 	add.w	r2, r7, #8
 8000374:	f107 010c 	add.w	r1, r7, #12
 8000378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2302      	movs	r3, #2
 8000380:	480a      	ldr	r0, [pc, #40]	; (80003ac <Set_DataBlock+0x80>)
 8000382:	f001 fc07 	bl	8001b94 <HAL_SPI_TransmitReceive>
	HAL_Delay(100);
 8000386:	2064      	movs	r0, #100	; 0x64
 8000388:	f001 f868 	bl	800145c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);     //-----------
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4805      	ldr	r0, [pc, #20]	; (80003a8 <Set_DataBlock+0x7c>)
 8000392:	f001 fb39 	bl	8001a08 <HAL_GPIO_WritePin>
	return 1;
 8000396:	2301      	movs	r3, #1
};
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	08004a84 	.word	0x08004a84
 80003a4:	08004ab0 	.word	0x08004ab0
 80003a8:	40021000 	.word	0x40021000
 80003ac:	20000174 	.word	0x20000174

080003b0 <L3GD20_Set_CTRL_REG1>:
	}
	else return 0;
};

int L3GD20_Set_CTRL_REG1(CTRL_REG1_TypeDef reg)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	7138      	strb	r0, [r7, #4]
//	initialise_monitor_handles();
	uint8_t address = CTRL_REG1_BASE;
 80003b8:	2320      	movs	r3, #32
 80003ba:	73fb      	strb	r3, [r7, #15]
	uint8_t assign_value = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.Yen, CTRL_REG1_YEN);
 80003c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80003c4:	f023 0301 	bic.w	r3, r3, #1
 80003c8:	b25a      	sxtb	r2, r3
 80003ca:	793b      	ldrb	r3, [r7, #4]
 80003cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	b25b      	sxtb	r3, r3
 80003da:	4313      	orrs	r3, r2
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.Xen, CTRL_REG1_XEN);
 80003e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80003e4:	f023 0302 	bic.w	r3, r3, #2
 80003e8:	b25a      	sxtb	r2, r3
 80003ea:	793b      	ldrb	r3, [r7, #4]
 80003ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	b25b      	sxtb	r3, r3
 80003f6:	f003 0302 	and.w	r3, r3, #2
 80003fa:	b25b      	sxtb	r3, r3
 80003fc:	4313      	orrs	r3, r2
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.Zen, CTRL_REG1_ZEN);
 8000402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000406:	f023 0304 	bic.w	r3, r3, #4
 800040a:	b25a      	sxtb	r2, r3
 800040c:	793b      	ldrb	r3, [r7, #4]
 800040e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	b25b      	sxtb	r3, r3
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	b25b      	sxtb	r3, r3
 800041e:	4313      	orrs	r3, r2
 8000420:	b25b      	sxtb	r3, r3
 8000422:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.PD,  CTRL_REG1_PD);
 8000424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000428:	f023 0308 	bic.w	r3, r3, #8
 800042c:	b25a      	sxtb	r2, r3
 800042e:	793b      	ldrb	r3, [r7, #4]
 8000430:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	00db      	lsls	r3, r3, #3
 8000438:	b25b      	sxtb	r3, r3
 800043a:	f003 0308 	and.w	r3, r3, #8
 800043e:	b25b      	sxtb	r3, r3
 8000440:	4313      	orrs	r3, r2
 8000442:	b25b      	sxtb	r3, r3
 8000444:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.DR,  CTRL_REG1_DR);
 8000446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800044a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800044e:	b25a      	sxtb	r2, r3
 8000450:	793b      	ldrb	r3, [r7, #4]
 8000452:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000456:	b2db      	uxtb	r3, r3
 8000458:	019b      	lsls	r3, r3, #6
 800045a:	b25b      	sxtb	r3, r3
 800045c:	4313      	orrs	r3, r2
 800045e:	b25b      	sxtb	r3, r3
 8000460:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.BW,  CTRL_REG1_BW);
 8000462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000466:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800046a:	b25a      	sxtb	r2, r3
 800046c:	793b      	ldrb	r3, [r7, #4]
 800046e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	011b      	lsls	r3, r3, #4
 8000476:	b25b      	sxtb	r3, r3
 8000478:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800047c:	b25b      	sxtb	r3, r3
 800047e:	4313      	orrs	r3, r2
 8000480:	b25b      	sxtb	r3, r3
 8000482:	73bb      	strb	r3, [r7, #14]

		printf("\n data check: %x", reg.Xen);
 8000484:	793b      	ldrb	r3, [r7, #4]
 8000486:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800048a:	b2db      	uxtb	r3, r3
 800048c:	4619      	mov	r1, r3
 800048e:	481d      	ldr	r0, [pc, #116]	; (8000504 <L3GD20_Set_CTRL_REG1+0x154>)
 8000490:	f003 f85e 	bl	8003550 <iprintf>
		printf("\n data check: %x", reg.Yen);
 8000494:	793b      	ldrb	r3, [r7, #4]
 8000496:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4619      	mov	r1, r3
 800049e:	4819      	ldr	r0, [pc, #100]	; (8000504 <L3GD20_Set_CTRL_REG1+0x154>)
 80004a0:	f003 f856 	bl	8003550 <iprintf>
		printf("\n data check: %x", reg.Zen);
 80004a4:	793b      	ldrb	r3, [r7, #4]
 80004a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4619      	mov	r1, r3
 80004ae:	4815      	ldr	r0, [pc, #84]	; (8000504 <L3GD20_Set_CTRL_REG1+0x154>)
 80004b0:	f003 f84e 	bl	8003550 <iprintf>
		printf("\n data check: %x", reg.PD);
 80004b4:	793b      	ldrb	r3, [r7, #4]
 80004b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	4619      	mov	r1, r3
 80004be:	4811      	ldr	r0, [pc, #68]	; (8000504 <L3GD20_Set_CTRL_REG1+0x154>)
 80004c0:	f003 f846 	bl	8003550 <iprintf>
		printf("\n data check: %x", reg.BW);
 80004c4:	793b      	ldrb	r3, [r7, #4]
 80004c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4619      	mov	r1, r3
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <L3GD20_Set_CTRL_REG1+0x154>)
 80004d0:	f003 f83e 	bl	8003550 <iprintf>
		printf("\n data check: %x", reg.DR);
 80004d4:	793b      	ldrb	r3, [r7, #4]
 80004d6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	4809      	ldr	r0, [pc, #36]	; (8000504 <L3GD20_Set_CTRL_REG1+0x154>)
 80004e0:	f003 f836 	bl	8003550 <iprintf>
		printf("\n data check: %x", assign_value);
 80004e4:	7bbb      	ldrb	r3, [r7, #14]
 80004e6:	4619      	mov	r1, r3
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <L3GD20_Set_CTRL_REG1+0x154>)
 80004ea:	f003 f831 	bl	8003550 <iprintf>


	Set_DataBlock(address, assign_value);
 80004ee:	7bba      	ldrb	r2, [r7, #14]
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4611      	mov	r1, r2
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff19 	bl	800032c <Set_DataBlock>
};
 80004fa:	bf00      	nop
 80004fc:	4618      	mov	r0, r3
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	08004ac8 	.word	0x08004ac8

08000508 <L3GD20_Set_CTRL_REG2>:
	Set_DataBlock(address, return_value);

};

int L3GD20_Set_CTRL_REG2(CTRL_REG2_TypeDef reg)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	7138      	strb	r0, [r7, #4]
	uint8_t address = CTRL_REG2_BASE;
 8000510:	2321      	movs	r3, #33	; 0x21
 8000512:	73fb      	strb	r3, [r7, #15]
	uint8_t assign_value = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.HPCF, CTRL_REG2_HPCF);
 8000518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800051c:	f023 030f 	bic.w	r3, r3, #15
 8000520:	b25a      	sxtb	r2, r3
 8000522:	793b      	ldrb	r3, [r7, #4]
 8000524:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8000528:	b2db      	uxtb	r3, r3
 800052a:	b25b      	sxtb	r3, r3
 800052c:	f003 030f 	and.w	r3, r3, #15
 8000530:	b25b      	sxtb	r3, r3
 8000532:	4313      	orrs	r3, r2
 8000534:	b25b      	sxtb	r3, r3
 8000536:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.HPM, CTRL_REG2_HPM);
 8000538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800053c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000540:	b25a      	sxtb	r2, r3
 8000542:	793b      	ldrb	r3, [r7, #4]
 8000544:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000548:	b2db      	uxtb	r3, r3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	b25b      	sxtb	r3, r3
 800054e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000552:	b25b      	sxtb	r3, r3
 8000554:	4313      	orrs	r3, r2
 8000556:	b25b      	sxtb	r3, r3
 8000558:	73bb      	strb	r3, [r7, #14]
	Set_DataBlock(address, assign_value);
 800055a:	7bba      	ldrb	r2, [r7, #14]
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fee3 	bl	800032c <Set_DataBlock>
};
 8000566:	bf00      	nop
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <L3GD20_Set_CTRL_REG3>:
	return_value = BFN_SET(return_value, HPF_CutOff_Freq, CTRL_REG2_HPCF);
	Set_DataBlock(address, return_value);
};

int L3GD20_Set_CTRL_REG3(CTRL_REG3_TypeDef reg)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	7138      	strb	r0, [r7, #4]
//	initialise_monitor_handles();
	uint8_t address = CTRL_REG3_BASE;
 8000578:	2322      	movs	r3, #34	; 0x22
 800057a:	73fb      	strb	r3, [r7, #15]
	uint8_t assign_value = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.I1_Int1,   CTRL_REG3_I1_INT1);
 8000580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000588:	b25a      	sxtb	r2, r3
 800058a:	793b      	ldrb	r3, [r7, #4]
 800058c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	01db      	lsls	r3, r3, #7
 8000594:	b25b      	sxtb	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b25b      	sxtb	r3, r3
 800059a:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.I1_Boot,   CTRL_REG3_I1_BOOT);
 800059c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	793b      	ldrb	r3, [r7, #4]
 80005a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	019b      	lsls	r3, r3, #6
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b6:	b25b      	sxtb	r3, r3
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.H_Lactive, CTRL_REG3_H_LACTIVE);
 80005be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005c2:	f023 0320 	bic.w	r3, r3, #32
 80005c6:	b25a      	sxtb	r2, r3
 80005c8:	793b      	ldrb	r3, [r7, #4]
 80005ca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	015b      	lsls	r3, r3, #5
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	f003 0320 	and.w	r3, r3, #32
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	4313      	orrs	r3, r2
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.PP_OD,  	CTRL_REG3_PP_OD);
 80005e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005e4:	f023 0310 	bic.w	r3, r3, #16
 80005e8:	b25a      	sxtb	r2, r3
 80005ea:	793b      	ldrb	r3, [r7, #4]
 80005ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	f003 0310 	and.w	r3, r3, #16
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.I2_DRDY,   CTRL_REG3_I2_DRDY);
 8000602:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000606:	f023 0308 	bic.w	r3, r3, #8
 800060a:	b25a      	sxtb	r2, r3
 800060c:	793b      	ldrb	r3, [r7, #4]
 800060e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	00db      	lsls	r3, r3, #3
 8000616:	b25b      	sxtb	r3, r3
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	b25b      	sxtb	r3, r3
 800061e:	4313      	orrs	r3, r2
 8000620:	b25b      	sxtb	r3, r3
 8000622:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.I2_WTM,  	CTRL_REG3_I2_WTM);
 8000624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000628:	f023 0304 	bic.w	r3, r3, #4
 800062c:	b25a      	sxtb	r2, r3
 800062e:	793b      	ldrb	r3, [r7, #4]
 8000630:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25b      	sxtb	r3, r3
 8000644:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.I2_ORun, 	CTRL_REG3_I2_ORUN);
 8000646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800064a:	f023 0302 	bic.w	r3, r3, #2
 800064e:	b25a      	sxtb	r2, r3
 8000650:	793b      	ldrb	r3, [r7, #4]
 8000652:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	b25b      	sxtb	r3, r3
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	b25b      	sxtb	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b25b      	sxtb	r3, r3
 8000666:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value,reg.I2_Empty,  CTRL_REG3_I2_EMPTY);
 8000668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800066c:	f023 0301 	bic.w	r3, r3, #1
 8000670:	b25a      	sxtb	r2, r3
 8000672:	793b      	ldrb	r3, [r7, #4]
 8000674:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	b25b      	sxtb	r3, r3
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	b25b      	sxtb	r3, r3
 8000682:	4313      	orrs	r3, r2
 8000684:	b25b      	sxtb	r3, r3
 8000686:	73bb      	strb	r3, [r7, #14]
	Set_DataBlock(address, assign_value);
 8000688:	7bba      	ldrb	r2, [r7, #14]
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fe4c 	bl	800032c <Set_DataBlock>
};
 8000694:	bf00      	nop
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <L3GD20_Set_CTRL_REG4>:
	reg->I1_Boot  = BFN_GET(return_value, CTRL_REG3_I1_BOOT);
	reg->I1_Int1  = BFN_GET(return_value, CTRL_REG3_I1_INT1);
};

int L3GD20_Set_CTRL_REG4(CTRL_REG4_TypeDef reg)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b084      	sub	sp, #16
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	7138      	strb	r0, [r7, #4]
	uint8_t address = CTRL_REG4_BASE;
 80006a6:	2323      	movs	r3, #35	; 0x23
 80006a8:	73fb      	strb	r3, [r7, #15]
	uint8_t assign_value = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.SIM,   CTRL_REG4_SIM);
 80006ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006b2:	f023 0301 	bic.w	r3, r3, #1
 80006b6:	b25a      	sxtb	r2, r3
 80006b8:	793b      	ldrb	r3, [r7, #4]
 80006ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b25b      	sxtb	r3, r3
 80006cc:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.FS,    CTRL_REG4_FS);
 80006ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006d6:	b25a      	sxtb	r2, r3
 80006d8:	793b      	ldrb	r3, [r7, #4]
 80006da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.BLE, 	 CTRL_REG4_BLE);
 80006f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	793b      	ldrb	r3, [r7, #4]
 80006fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	019b      	lsls	r3, r3, #6
 8000704:	b25b      	sxtb	r3, r3
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	b25b      	sxtb	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.BDU, 	 CTRL_REG4_BDU);
 8000712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800071a:	b25a      	sxtb	r2, r3
 800071c:	793b      	ldrb	r3, [r7, #4]
 800071e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	01db      	lsls	r3, r3, #7
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b25b      	sxtb	r3, r3
 800072c:	73bb      	strb	r3, [r7, #14]
	Set_DataBlock(address, assign_value);
 800072e:	7bba      	ldrb	r2, [r7, #14]
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fdf9 	bl	800032c <Set_DataBlock>
};
 800073a:	bf00      	nop
 800073c:	4618      	mov	r0, r3
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <L3GD20_Set_CTRL_REG5>:
	reg->BLE = BFN_GET(return_value, CTRL_REG4_BLE);
	reg->BDU = BFN_GET(return_value, CTRL_REG4_BDU);
};

int L3GD20_Set_CTRL_REG5(CTRL_REG5_TypeDef reg)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	7138      	strb	r0, [r7, #4]
	uint8_t address = CTRL_REG5_BASE;
 800074c:	2324      	movs	r3, #36	; 0x24
 800074e:	73fb      	strb	r3, [r7, #15]
	uint8_t assign_value = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.Out_Sel,   CTRL_REG5_OUT_SEL);
 8000754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000758:	f023 0303 	bic.w	r3, r3, #3
 800075c:	b25a      	sxtb	r2, r3
 800075e:	793b      	ldrb	r3, [r7, #4]
 8000760:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	b25b      	sxtb	r3, r3
 8000768:	f003 0303 	and.w	r3, r3, #3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b25b      	sxtb	r3, r3
 8000772:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.INT1_Sel,  CTRL_REG5_INT_SEL);
 8000774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000778:	f023 030c 	bic.w	r3, r3, #12
 800077c:	b25a      	sxtb	r2, r3
 800077e:	793b      	ldrb	r3, [r7, #4]
 8000780:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000784:	b2db      	uxtb	r3, r3
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	b25b      	sxtb	r3, r3
 800078a:	f003 030c 	and.w	r3, r3, #12
 800078e:	b25b      	sxtb	r3, r3
 8000790:	4313      	orrs	r3, r2
 8000792:	b25b      	sxtb	r3, r3
 8000794:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.HPen, 	 CTRL_REG5_HPEN);
 8000796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079a:	f023 0320 	bic.w	r3, r3, #32
 800079e:	b25a      	sxtb	r2, r3
 80007a0:	793b      	ldrb	r3, [r7, #4]
 80007a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	015b      	lsls	r3, r3, #5
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	f003 0320 	and.w	r3, r3, #32
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.FIFO_EN, 	 CTRL_REG5_FIFO_EN);
 80007b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	793b      	ldrb	r3, [r7, #4]
 80007c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	019b      	lsls	r3, r3, #6
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.BOOT, 	 CTRL_REG5_BOOT);
 80007da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	01db      	lsls	r3, r3, #7
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	73bb      	strb	r3, [r7, #14]
	Set_DataBlock(address, assign_value);
 80007f6:	7bba      	ldrb	r2, [r7, #14]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4611      	mov	r1, r2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fd95 	bl	800032c <Set_DataBlock>
};
 8000802:	bf00      	nop
 8000804:	4618      	mov	r0, r3
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <L3GD20_Set_FIFO_CTRL_REG>:
	reg->ZOR   = BFN_GET(return_value, STATUS_REG_ZOR  );
	reg->ZYXOR = BFN_GET(return_value, STATUS_REG_ZYXOR);
}

int L3GD20_Set_FIFO_CTRL_REG(FIFO_CTRL_REG_TypeDef reg)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	7138      	strb	r0, [r7, #4]
	uint8_t address = FIFO_CTRL_REG_BASE;
 8000814:	232e      	movs	r3, #46	; 0x2e
 8000816:	73fb      	strb	r3, [r7, #15]
	uint8_t assign_value = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.FM,    FIFO_CTRL_FM  );
 800081c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000824:	b25a      	sxtb	r2, r3
 8000826:	793b      	ldrb	r3, [r7, #4]
 8000828:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800082c:	b2db      	uxtb	r3, r3
 800082e:	019b      	lsls	r3, r3, #6
 8000830:	b25b      	sxtb	r3, r3
 8000832:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000836:	b25b      	sxtb	r3, r3
 8000838:	4313      	orrs	r3, r2
 800083a:	b25b      	sxtb	r3, r3
 800083c:	73bb      	strb	r3, [r7, #14]
	BFN_SET(assign_value, reg.WTM,   FIFO_CTRL_WTM );
 800083e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000842:	f023 031f 	bic.w	r3, r3, #31
 8000846:	b25a      	sxtb	r2, r3
 8000848:	793b      	ldrb	r3, [r7, #4]
 800084a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	f003 031f 	and.w	r3, r3, #31
 8000856:	b25b      	sxtb	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b25b      	sxtb	r3, r3
 800085c:	73bb      	strb	r3, [r7, #14]
	Set_DataBlock(address, assign_value);
 800085e:	7bba      	ldrb	r2, [r7, #14]
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fd61 	bl	800032c <Set_DataBlock>
};
 800086a:	bf00      	nop
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <L3GD20_Read_FIFO_SRC_REG>:
	reg->FM    = BFN_GET(return_value, FIFO_CTRL_FM );
	reg->WTM   = BFN_GET(return_value, FIFO_CTRL_WTM);
};

int L3GD20_Read_FIFO_SRC_REG(FIFO_SRC_REG_TypeDef *reg)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t address = FIFO_CTRL_REG_BASE;
 800087c:	232e      	movs	r3, #46	; 0x2e
 800087e:	73fb      	strb	r3, [r7, #15]
	uint8_t return_value = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73bb      	strb	r3, [r7, #14]
	Get_DataBlock(address, &return_value);
 8000884:	f107 020e 	add.w	r2, r7, #14
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fcff 	bl	8000290 <Get_DataBlock>
	reg->EMPTY  = BFN_GET(return_value, FIFO_SRC_EMPTY );
 8000892:	7bbb      	ldrb	r3, [r7, #14]
 8000894:	115b      	asrs	r3, r3, #5
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2d9      	uxtb	r1, r3
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	7813      	ldrb	r3, [r2, #0]
 80008a0:	f361 1345 	bfi	r3, r1, #5, #1
 80008a4:	7013      	strb	r3, [r2, #0]
	reg->FSS    = BFN_GET(return_value, FIFO_SRC_FSS);
 80008a6:	7bbb      	ldrb	r3, [r7, #14]
 80008a8:	f003 031f 	and.w	r3, r3, #31
 80008ac:	b2d9      	uxtb	r1, r3
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	7813      	ldrb	r3, [r2, #0]
 80008b2:	f361 0304 	bfi	r3, r1, #0, #5
 80008b6:	7013      	strb	r3, [r2, #0]
	reg->OVRN	= BFN_GET(return_value, FIFO_SRC_OVRN);
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	119b      	asrs	r3, r3, #6
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	b2d9      	uxtb	r1, r3
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	7813      	ldrb	r3, [r2, #0]
 80008c6:	f361 1386 	bfi	r3, r1, #6, #1
 80008ca:	7013      	strb	r3, [r2, #0]
	reg->WTM 	= BFN_GET(return_value, FIFO_SRC_WTM);
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	09db      	lsrs	r3, r3, #7
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	b2d9      	uxtb	r1, r3
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	7813      	ldrb	r3, [r2, #0]
 80008dc:	f361 13c7 	bfi	r3, r1, #7, #1
 80008e0:	7013      	strb	r3, [r2, #0]
};
 80008e2:	bf00      	nop
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <L3GD20_Read_Data>:
{
	uint8_t address = OUT_TEMP_BASE;
	Get_DataBlock(address, data);
};
int L3GD20_Read_Data(OutValue_TypeDef *outvalue)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t address = OUT_X_L_BASE;
 80008f4:	2328      	movs	r3, #40	; 0x28
 80008f6:	73fb      	strb	r3, [r7, #15]
	Get_DataBlock(address, &data);
 80008f8:	f107 020e 	add.w	r2, r7, #14
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fcc5 	bl	8000290 <Get_DataBlock>
	outvalue->OUT_X = _BF_PREP(data, 0, 8);
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	b29a      	uxth	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	801a      	strh	r2, [r3, #0]
	address = OUT_X_H_BASE;
 800090e:	2329      	movs	r3, #41	; 0x29
 8000910:	73fb      	strb	r3, [r7, #15]
	Get_DataBlock(address, &data);
 8000912:	f107 020e 	add.w	r2, r7, #14
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fcb8 	bl	8000290 <Get_DataBlock>
	outvalue->OUT_X |= _BF_PREP(data, 8, 8);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	b21a      	sxth	r2, r3
 8000926:	7bbb      	ldrb	r3, [r7, #14]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21b      	sxth	r3, r3
 800092c:	4313      	orrs	r3, r2
 800092e:	b21b      	sxth	r3, r3
 8000930:	b29a      	uxth	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	801a      	strh	r2, [r3, #0]

	address = OUT_Y_L_BASE;
 8000936:	232a      	movs	r3, #42	; 0x2a
 8000938:	73fb      	strb	r3, [r7, #15]
	Get_DataBlock(address, &data);
 800093a:	f107 020e 	add.w	r2, r7, #14
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fca4 	bl	8000290 <Get_DataBlock>
	outvalue->OUT_Y = _BF_PREP(data, 0, 8);
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	b29a      	uxth	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	805a      	strh	r2, [r3, #2]
	address = OUT_Y_H_BASE;
 8000950:	232b      	movs	r3, #43	; 0x2b
 8000952:	73fb      	strb	r3, [r7, #15]
	Get_DataBlock(address, &data);
 8000954:	f107 020e 	add.w	r2, r7, #14
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc97 	bl	8000290 <Get_DataBlock>
	outvalue->OUT_Y |= _BF_PREP(data, 8, 8);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	885b      	ldrh	r3, [r3, #2]
 8000966:	b21a      	sxth	r2, r3
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21b      	sxth	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b21b      	sxth	r3, r3
 8000972:	b29a      	uxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	805a      	strh	r2, [r3, #2]

	address = OUT_Z_L_BASE;
 8000978:	232c      	movs	r3, #44	; 0x2c
 800097a:	73fb      	strb	r3, [r7, #15]
	Get_DataBlock(address, &data);
 800097c:	f107 020e 	add.w	r2, r7, #14
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fc83 	bl	8000290 <Get_DataBlock>
	outvalue->OUT_Z = _BF_PREP(data, 0, 8);
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	809a      	strh	r2, [r3, #4]
	address = OUT_Z_H_BASE;
 8000992:	232d      	movs	r3, #45	; 0x2d
 8000994:	73fb      	strb	r3, [r7, #15]
	Get_DataBlock(address, &data);
 8000996:	f107 020e 	add.w	r2, r7, #14
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fc76 	bl	8000290 <Get_DataBlock>
	outvalue->OUT_Z |= _BF_PREP(data, 8, 8);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	889b      	ldrh	r3, [r3, #4]
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	809a      	strh	r2, [r3, #4]
};
 80009ba:	bf00      	nop
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <MX_GPIO_Init>:

#include "gpio.h"


void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <MX_GPIO_Init+0x130>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a36      	ldr	r2, [pc, #216]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a2f      	ldr	r2, [pc, #188]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a28      	ldr	r2, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2108      	movs	r1, #8
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <MX_GPIO_Init+0x134>)
 8000a6c:	f000 ffcc 	bl	8001a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	4821      	ldr	r0, [pc, #132]	; (8000afc <MX_GPIO_Init+0x138>)
 8000a78:	f000 ffc6 	bl	8001a08 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4819      	ldr	r0, [pc, #100]	; (8000af8 <MX_GPIO_Init+0x134>)
 8000a94:	f000 fe34 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4812      	ldr	r0, [pc, #72]	; (8000af8 <MX_GPIO_Init+0x134>)
 8000aae:	f000 fe27 	bl	8001700 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_GPIO_Init+0x138>)
 8000ac8:	f000 fe1a 	bl	8001700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2105      	movs	r1, #5
 8000ad0:	2006      	movs	r0, #6
 8000ad2:	f000 fdc2 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ad6:	2006      	movs	r0, #6
 8000ad8:	f000 fddb 	bl	8001692 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2105      	movs	r1, #5
 8000ae0:	2007      	movs	r0, #7
 8000ae2:	f000 fdba 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f000 fdd3 	bl	8001692 <HAL_NVIC_EnableIRQ>

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020c00 	.word	0x40020c00

08000b00 <main>:
void StartDefaultTask(void const * argument);

extern void initialise_monitor_handles(void);

int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 8000b06:	f003 ff35 	bl	8004974 <initialise_monitor_handles>
  HAL_Init();
 8000b0a:	f000 fc35 	bl	8001378 <HAL_Init>
  MX_GPIO_Init();
 8000b0e:	f7ff ff59 	bl	80009c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000b12:	f000 f8ad 	bl	8000c70 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b16:	f000 f8fb 	bl	8000d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b1a:	f000 f96f 	bl	8000dfc <MX_TIM3_Init>
  MX_CRC_Init();
 8000b1e:	f000 f893 	bl	8000c48 <MX_CRC_Init>
  L3GD20_Init();
 8000b22:	f000 f84b 	bl	8000bbc <L3GD20_Init>
  FIFO_SRC_REG_TypeDef fifo_src_reg;
  L3GD20_Read_FIFO_SRC_REG(fifo_src_reg);
 8000b26:	7b38      	ldrb	r0, [r7, #12]
 8000b28:	f7ff fea4 	bl	8000874 <L3GD20_Read_FIFO_SRC_REG>
  printf("\n data check FSS: %x",  	 fifo_src_reg.FSS);
 8000b2c:	7b3b      	ldrb	r3, [r7, #12]
 8000b2e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4619      	mov	r1, r3
 8000b36:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <main+0xa0>)
 8000b38:	f002 fd0a 	bl	8003550 <iprintf>
  printf("\n data check EMPTY: %x",  fifo_src_reg.EMPTY);
 8000b3c:	7b3b      	ldrb	r3, [r7, #12]
 8000b3e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <main+0xa4>)
 8000b48:	f002 fd02 	bl	8003550 <iprintf>
  printf("\n data check OVRN: %x",   fifo_src_reg.OVRN);
 8000b4c:	7b3b      	ldrb	r3, [r7, #12]
 8000b4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4619      	mov	r1, r3
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <main+0xa8>)
 8000b58:	f002 fcfa 	bl	8003550 <iprintf>
  printf("\n data check WTM: %x",    fifo_src_reg.WTM);
 8000b5c:	7b3b      	ldrb	r3, [r7, #12]
 8000b5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <main+0xac>)
 8000b68:	f002 fcf2 	bl	8003550 <iprintf>
  printf("\n");
 8000b6c:	200a      	movs	r0, #10
 8000b6e:	f002 fd07 	bl	8003580 <putchar>
  OutValue_TypeDef out_value;

  while (1)
  {
	  L3GD20_Read_Data(&out_value);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff feb9 	bl	80008ec <L3GD20_Read_Data>
	  printf("\n data check OUT_X %X", out_value.OUT_X);
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <main+0xb0>)
 8000b80:	f002 fce6 	bl	8003550 <iprintf>
	  printf("\n data check OUT_Y %X", out_value.OUT_Y);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	4619      	mov	r1, r3
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <main+0xb4>)
 8000b8a:	f002 fce1 	bl	8003550 <iprintf>
	  printf("\n data check OUT_Z %X", out_value.OUT_Z );
 8000b8e:	893b      	ldrh	r3, [r7, #8]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <main+0xb8>)
 8000b94:	f002 fcdc 	bl	8003550 <iprintf>
	  printf("\n");
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f002 fcf1 	bl	8003580 <putchar>
  {
 8000b9e:	e7e8      	b.n	8000b72 <main+0x72>
 8000ba0:	08004adc 	.word	0x08004adc
 8000ba4:	08004af4 	.word	0x08004af4
 8000ba8:	08004b0c 	.word	0x08004b0c
 8000bac:	08004b24 	.word	0x08004b24
 8000bb0:	08004b3c 	.word	0x08004b3c
 8000bb4:	08004b54 	.word	0x08004b54
 8000bb8:	08004b6c 	.word	0x08004b6c

08000bbc <L3GD20_Init>:
}



void L3GD20_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
  CTRL_REG1_TypeDef reg1 = {
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <L3GD20_Init+0x7c>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	753b      	strb	r3, [r7, #20]
				  .BW = 0b11,
				  .DR = 0b11
		  };

  //  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
  L3GD20_Set_CTRL_REG1(reg1);
 8000bc8:	7d38      	ldrb	r0, [r7, #20]
 8000bca:	f7ff fbf1 	bl	80003b0 <L3GD20_Set_CTRL_REG1>

  CTRL_REG2_TypeDef reg2 = {
 8000bce:	7c3b      	ldrb	r3, [r7, #16]
 8000bd0:	f36f 0301 	bfc	r3, #0, #2
 8000bd4:	743b      	strb	r3, [r7, #16]
 8000bd6:	7c3b      	ldrb	r3, [r7, #16]
 8000bd8:	220b      	movs	r2, #11
 8000bda:	f362 0385 	bfi	r3, r2, #2, #4
 8000bde:	743b      	strb	r3, [r7, #16]
    .HPCF  = 0b1011,
	.HPM   = 0b00,
  };

  L3GD20_Set_CTRL_REG2(reg2);
 8000be0:	7c38      	ldrb	r0, [r7, #16]
 8000be2:	f7ff fc91 	bl	8000508 <L3GD20_Set_CTRL_REG2>

  CTRL_REG3_TypeDef reg3 = {
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <L3GD20_Init+0x80>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	733b      	strb	r3, [r7, #12]
 			  .PP_OD = 1,
 			  .H_Lactive = 1,
 			  .I1_Boot = 1,
 			  .I1_Int1 = 1.
 	  };
  L3GD20_Set_CTRL_REG3(reg3);
 8000bec:	7b38      	ldrb	r0, [r7, #12]
 8000bee:	f7ff fcbf 	bl	8000570 <L3GD20_Set_CTRL_REG3>

  CTRL_REG4_TypeDef reg4 = {
 8000bf2:	7a3b      	ldrb	r3, [r7, #8]
 8000bf4:	f36f 0300 	bfc	r3, #0, #1
 8000bf8:	723b      	strb	r3, [r7, #8]
 8000bfa:	7a3b      	ldrb	r3, [r7, #8]
 8000bfc:	f36f 0341 	bfc	r3, #1, #1
 8000c00:	723b      	strb	r3, [r7, #8]
 8000c02:	7a3b      	ldrb	r3, [r7, #8]
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	723b      	strb	r3, [r7, #8]
 8000c0a:	7a3b      	ldrb	r3, [r7, #8]
 8000c0c:	f36f 03c3 	bfc	r3, #3, #1
 8000c10:	723b      	strb	r3, [r7, #8]
  			.BDU = 0,
  			.BLE = 0,
  			.FS  = 0b11,
  			.SIM = 0
  	};
  L3GD20_Set_CTRL_REG4(reg4);
 8000c12:	7a38      	ldrb	r0, [r7, #8]
 8000c14:	f7ff fd43 	bl	800069e <L3GD20_Set_CTRL_REG4>

  CTRL_REG5_TypeDef reg5 = {
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <L3GD20_Init+0x84>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	713b      	strb	r3, [r7, #4]
  				.INT1_Sel = 0b11,
  				.HPen 	  = 1,
  				.FIFO_EN  = 1,
  				.BOOT     = 0
  		};
  L3GD20_Set_CTRL_REG5(reg5);
 8000c1e:	7938      	ldrb	r0, [r7, #4]
 8000c20:	f7ff fd90 	bl	8000744 <L3GD20_Set_CTRL_REG5>

  FIFO_CTRL_REG_TypeDef fifo_ctrl_reg = {
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <L3GD20_Init+0x88>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	703b      	strb	r3, [r7, #0]
		  .WTM = 0b1110,
		  .FM  = 0b001,
  };
  L3GD20_Set_FIFO_CTRL_REG(fifo_ctrl_reg);
 8000c2a:	7838      	ldrb	r0, [r7, #0]
 8000c2c:	f7ff fdee 	bl	800080c <L3GD20_Set_FIFO_CTRL_REG>
};
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	08004b84 	.word	0x08004b84
 8000c3c:	08004b88 	.word	0x08004b88
 8000c40:	08004b8c 	.word	0x08004b8c
 8000c44:	08004b90 	.word	0x08004b90

08000c48 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_CRC_Init+0x20>)
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <MX_CRC_Init+0x24>)
 8000c50:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_CRC_Init+0x20>)
 8000c54:	f000 fd37 	bl	80016c6 <HAL_CRC_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c5e:	f000 f96b 	bl	8000f38 <Error_Handler>
  }

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000094 	.word	0x20000094
 8000c6c:	40023000 	.word	0x40023000

08000c70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000c8e:	4a1f      	ldr	r2, [pc, #124]	; (8000d0c <MX_TIM1_Init+0x9c>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cba:	f001 f9d7 	bl	800206c <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f938 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cd6:	f001 fc29 	bl	800252c <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ce0:	f000 f92a 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM1_Init+0x98>)
 8000cf2:	f002 f97b 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cfc:	f000 f91c 	bl	8000f38 <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000009c 	.word	0x2000009c
 8000d0c:	40010000 	.word	0x40010000

08000d10 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08e      	sub	sp, #56	; 0x38
 8000d14:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	f107 0320 	add.w	r3, r7, #32
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d68:	4823      	ldr	r0, [pc, #140]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d6a:	f001 f97f 	bl	800206c <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d74:	f000 f8e0 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d82:	4619      	mov	r1, r3
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d86:	f001 fbd1 	bl	800252c <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d90:	f000 f8d2 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d94:	4818      	ldr	r0, [pc, #96]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000d96:	f001 f9b8 	bl	800210a <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000da0:	f000 f8ca 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	4619      	mov	r1, r3
 8000db2:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000db4:	f002 f91a 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dbe:	f000 f8bb 	bl	8000f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc2:	2360      	movs	r3, #96	; 0x60
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000dda:	f001 fae5 	bl	80023a8 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000de4:	f000 f8a8 	bl	8000f38 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM2_Init+0xe8>)
 8000dea:	f000 f9e9 	bl	80011c0 <HAL_TIM_MspPostInit>

}
 8000dee:	bf00      	nop
 8000df0:	3738      	adds	r7, #56	; 0x38
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000e4 	.word	0x200000e4

08000dfc <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b090      	sub	sp, #64	; 0x40
 8000e00:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000e36:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e38:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <MX_TIM3_Init+0x138>)
 8000e3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e48:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e5c:	4834      	ldr	r0, [pc, #208]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e5e:	f001 f905 	bl	800206c <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e68:	f000 f866 	bl	8000f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e76:	4619      	mov	r1, r3
 8000e78:	482d      	ldr	r0, [pc, #180]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e7a:	f001 fb57 	bl	800252c <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f000 f858 	bl	8000f38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e88:	4829      	ldr	r0, [pc, #164]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000e8a:	f001 f997 	bl	80021bc <HAL_TIM_IC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000e94:	f000 f850 	bl	8000f38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000e9c:	2360      	movs	r3, #96	; 0x60
 8000e9e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000eac:	f107 031c 	add.w	r3, r7, #28
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481f      	ldr	r0, [pc, #124]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000eb4:	f001 fc01 	bl	80026ba <HAL_TIM_SlaveConfigSynchro>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8000ebe:	f000 f83b 	bl	8000f38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4815      	ldr	r0, [pc, #84]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000edc:	f001 f9c7 	bl	800226e <HAL_TIM_IC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000ee6:	f000 f827 	bl	8000f38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000eea:	2302      	movs	r3, #2
 8000eec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000efc:	f001 f9b7 	bl	800226e <HAL_TIM_IC_ConfigChannel>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000f06:	f000 f817 	bl	8000f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_TIM3_Init+0x134>)
 8000f18:	f002 f868 	bl	8002fec <HAL_TIMEx_MasterConfigSynchronization>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 8000f22:	f000 f809 	bl	8000f38 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3740      	adds	r7, #64	; 0x40
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000012c 	.word	0x2000012c
 8000f34:	40000400 	.word	0x40000400

08000f38 <Error_Handler>:
  /* USER CODE END 5 */
}


void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <MX_SPI1_Init>:
#include "spi.h"

SPI_HandleTypeDef hspi1;

void MX_SPI1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f4a:	4a18      	ldr	r2, [pc, #96]	; (8000fac <MX_SPI1_Init+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f90:	220a      	movs	r2, #10
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_SPI1_Init+0x64>)
 8000f96:	f000 fd74 	bl	8001a82 <HAL_SPI_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fa0:	f7ff ffca 	bl	8000f38 <Error_Handler>
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000174 	.word	0x20000174
 8000fac:	40013000 	.word	0x40013000

08000fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_MspInit+0x54>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_MspInit+0x54>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x54>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_MspInit+0x54>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_MspInit+0x54>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_MspInit+0x54>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	210f      	movs	r1, #15
 8000ff2:	f06f 0001 	mvn.w	r0, #1
 8000ff6:	f000 fb30 	bl	800165a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <HAL_CRC_MspInit+0x3c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_CRC_MspInit+0x40>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <HAL_CRC_MspInit+0x40>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_CRC_MspInit+0x40>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023000 	.word	0x40023000
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_SPI_MspInit+0x84>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12b      	bne.n	80010c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010a6:	23e0      	movs	r3, #224	; 0xe0
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b6:	2305      	movs	r3, #5
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_SPI_MspInit+0x8c>)
 80010c2:	f000 fb1d 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013000 	.word	0x40013000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a2d      	ldr	r2, [pc, #180]	; (80011b0 <HAL_TIM_Base_MspInit+0xd4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10e      	bne.n	800111c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a2b      	ldr	r2, [pc, #172]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111a:	e044      	b.n	80011a6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001124:	d10e      	bne.n	8001144 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b22      	ldr	r3, [pc, #136]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a21      	ldr	r2, [pc, #132]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
}
 8001142:	e030      	b.n	80011a6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_TIM_Base_MspInit+0xdc>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d12b      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_TIM_Base_MspInit+0xd8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001196:	2302      	movs	r3, #2
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <HAL_TIM_Base_MspInit+0xe0>)
 80011a2:	f000 faad 	bl	8001700 <HAL_GPIO_Init>
}
 80011a6:	bf00      	nop
 80011a8:	3730      	adds	r7, #48	; 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010000 	.word	0x40010000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40000400 	.word	0x40000400
 80011bc:	40020800 	.word	0x40020800

080011c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e0:	d11d      	bne.n	800121e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_TIM_MspPostInit+0x68>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_TIM_MspPostInit+0x68>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_TIM_MspPostInit+0x68>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fe:	2301      	movs	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800120e:	2301      	movs	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <HAL_TIM_MspPostInit+0x6c>)
 800121a:	f000 fa71 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f8dc 	bl	800141c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001264:	f002 f8b2 	bl	80033cc <xTaskGetSchedulerState>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800126e:	f002 f91b 	bl	80034a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}

08001276 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800127a:	2001      	movs	r0, #1
 800127c:	f000 fbde 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001288:	2002      	movs	r0, #2
 800128a:	f000 fbd7 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f002 f912 	bl	80034ec <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20020000 	.word	0x20020000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	200001cc 	.word	0x200001cc
 80012fc:	20000348 	.word	0x20000348

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800132a:	490e      	ldr	r1, [pc, #56]	; (8001364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001340:	4c0b      	ldr	r4, [pc, #44]	; (8001370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134e:	f7ff ffd7 	bl	8001300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001352:	f002 f8d1 	bl	80034f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff fbd3 	bl	8000b00 <main>
  bx  lr    
 800135a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack    		 /* set stack pointer */
 800135c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001368:	08004ef8 	.word	0x08004ef8
  ldr r2, =_sbss
 800136c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001370:	20000348 	.word	0x20000348

08001374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC_IRQHandler>
	...

08001378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_Init+0x40>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_Init+0x40>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_Init+0x40>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f94f 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	200f      	movs	r0, #15
 80013a8:	f000 f808 	bl	80013bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff fe00 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00

080013bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x54>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f967 	bl	80016ae <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f92f 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_InitTick+0x5c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	20000008 	.word	0x20000008
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008
 8001440:	200001d0 	.word	0x200001d0

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200001d0 	.word	0x200001d0

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffde 	bl	8001444 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e00e      	b.n	80016f6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	795b      	ldrb	r3, [r3, #5]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d105      	bne.n	80016ee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fc8d 	bl	8001008 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e159      	b.n	80019d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8148 	bne.w	80019ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d005      	beq.n	8001752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	2b02      	cmp	r3, #2
 8001750:	d130      	bne.n	80017b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 0201 	and.w	r2, r3, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d017      	beq.n	80017f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d123      	bne.n	8001844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80a2 	beq.w	80019ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_GPIO_Init+0x2e8>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_GPIO_Init+0x2e8>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <HAL_GPIO_Init+0x2e8>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_GPIO_Init+0x2ec>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a49      	ldr	r2, [pc, #292]	; (80019f0 <HAL_GPIO_Init+0x2f0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d019      	beq.n	8001902 <HAL_GPIO_Init+0x202>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a48      	ldr	r2, [pc, #288]	; (80019f4 <HAL_GPIO_Init+0x2f4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0x1fe>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_GPIO_Init+0x2f8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00d      	beq.n	80018fa <HAL_GPIO_Init+0x1fa>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a46      	ldr	r2, [pc, #280]	; (80019fc <HAL_GPIO_Init+0x2fc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <HAL_GPIO_Init+0x1f6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a45      	ldr	r2, [pc, #276]	; (8001a00 <HAL_GPIO_Init+0x300>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_Init+0x1f2>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e008      	b.n	8001904 <HAL_GPIO_Init+0x204>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x204>
 80018f6:	2303      	movs	r3, #3
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x204>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x204>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x204>
 8001902:	2300      	movs	r3, #0
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	f002 0203 	and.w	r2, r2, #3
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001914:	4935      	ldr	r1, [pc, #212]	; (80019ec <HAL_GPIO_Init+0x2ec>)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_GPIO_Init+0x304>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001946:	4a2f      	ldr	r2, [pc, #188]	; (8001a04 <HAL_GPIO_Init+0x304>)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800194c:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <HAL_GPIO_Init+0x304>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001970:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <HAL_GPIO_Init+0x304>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_GPIO_Init+0x304>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199a:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <HAL_GPIO_Init+0x304>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c4:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_GPIO_Init+0x304>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3301      	adds	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	f67f aea2 	bls.w	800171c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40013800 	.word	0x40013800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40020800 	.word	0x40020800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40013c00 	.word	0x40013c00

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	619a      	str	r2, [r3, #24]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f806 	bl	8001a6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e07b      	b.n	8001b8c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d108      	bne.n	8001aae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aa4:	d009      	beq.n	8001aba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
 8001aac:	e005      	b.n	8001aba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fab9 	bl	800104c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	ea42 0103 	orr.w	r1, r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	f003 0104 	and.w	r1, r3, #4
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f003 0210 	and.w	r2, r3, #16
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_SPI_TransmitReceive+0x26>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e18a      	b.n	8001ed0 <HAL_SPI_TransmitReceive+0x33c>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc2:	f7ff fc3f 	bl	8001444 <HAL_GetTick>
 8001bc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001bd8:	887b      	ldrh	r3, [r7, #2]
 8001bda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d00f      	beq.n	8001c04 <HAL_SPI_TransmitReceive+0x70>
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bea:	d107      	bne.n	8001bfc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <HAL_SPI_TransmitReceive+0x68>
 8001bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d003      	beq.n	8001c04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c02:	e15b      	b.n	8001ebc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_SPI_TransmitReceive+0x82>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_SPI_TransmitReceive+0x82>
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001c1c:	e14e      	b.n	8001ebc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d003      	beq.n	8001c32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2205      	movs	r2, #5
 8001c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d007      	beq.n	8001c86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8e:	d178      	bne.n	8001d82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d002      	beq.n	8001c9e <HAL_SPI_TransmitReceive+0x10a>
 8001c98:	8b7b      	ldrh	r3, [r7, #26]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d166      	bne.n	8001d6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	1c9a      	adds	r2, r3, #2
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cc2:	e053      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d11b      	bne.n	8001d0a <HAL_SPI_TransmitReceive+0x176>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d016      	beq.n	8001d0a <HAL_SPI_TransmitReceive+0x176>
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d113      	bne.n	8001d0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	881a      	ldrh	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	1c9a      	adds	r2, r3, #2
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d119      	bne.n	8001d4c <HAL_SPI_TransmitReceive+0x1b8>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d014      	beq.n	8001d4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d34:	1c9a      	adds	r2, r3, #2
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d4c:	f7ff fb7a 	bl	8001444 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d807      	bhi.n	8001d6c <HAL_SPI_TransmitReceive+0x1d8>
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d003      	beq.n	8001d6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d6a:	e0a7      	b.n	8001ebc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1a6      	bne.n	8001cc4 <HAL_SPI_TransmitReceive+0x130>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1a1      	bne.n	8001cc4 <HAL_SPI_TransmitReceive+0x130>
 8001d80:	e07c      	b.n	8001e7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x1fc>
 8001d8a:	8b7b      	ldrh	r3, [r7, #26]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d16b      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001db6:	e057      	b.n	8001e68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d11c      	bne.n	8001e00 <HAL_SPI_TransmitReceive+0x26c>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d017      	beq.n	8001e00 <HAL_SPI_TransmitReceive+0x26c>
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d114      	bne.n	8001e00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	330c      	adds	r3, #12
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d119      	bne.n	8001e42 <HAL_SPI_TransmitReceive+0x2ae>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001e42:	f7ff faff 	bl	8001444 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d803      	bhi.n	8001e5a <HAL_SPI_TransmitReceive+0x2c6>
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d102      	bne.n	8001e60 <HAL_SPI_TransmitReceive+0x2cc>
 8001e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e66:	e029      	b.n	8001ebc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1a2      	bne.n	8001db8 <HAL_SPI_TransmitReceive+0x224>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d19d      	bne.n	8001db8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f8b1 	bl	8001fe8 <SPI_EndRxTxTransaction>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e98:	e010      	b.n	8001ebc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10b      	bne.n	8001eba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	e000      	b.n	8001ebc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3730      	adds	r7, #48	; 0x30
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ee8:	f7ff faac 	bl	8001444 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ef8:	f7ff faa4 	bl	8001444 <HAL_GetTick>
 8001efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	015b      	lsls	r3, r3, #5
 8001f04:	0d1b      	lsrs	r3, r3, #20
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f0e:	e054      	b.n	8001fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f16:	d050      	beq.n	8001fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f18:	f7ff fa94 	bl	8001444 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d902      	bls.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d13d      	bne.n	8001faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f46:	d111      	bne.n	8001f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f50:	d004      	beq.n	8001f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5a:	d107      	bne.n	8001f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f74:	d10f      	bne.n	8001f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e017      	b.n	8001fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	bf0c      	ite	eq
 8001fca:	2301      	moveq	r3, #1
 8001fcc:	2300      	movne	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d19b      	bne.n	8001f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <SPI_EndRxTxTransaction+0x7c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <SPI_EndRxTxTransaction+0x80>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0d5b      	lsrs	r3, r3, #21
 8002000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002012:	d112      	bne.n	800203a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2200      	movs	r2, #0
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff ff5a 	bl	8001ed8 <SPI_WaitFlagStateUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f043 0220 	orr.w	r2, r3, #32
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e00f      	b.n	800205a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3b01      	subs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d0f2      	beq.n	800203a <SPI_EndRxTxTransaction+0x52>
 8002054:	e000      	b.n	8002058 <SPI_EndRxTxTransaction+0x70>
        break;
 8002056:	bf00      	nop
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000
 8002068:	165e9f81 	.word	0x165e9f81

0800206c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e041      	b.n	8002102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff f822 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f000 fb48 	bl	8002740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e041      	b.n	80021a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f839 	bl	80021a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f000 faf9 	bl	8002740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f839 	bl	800225a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 faa0 	bl	8002740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_TIM_IC_ConfigChannel+0x1e>
 8002288:	2302      	movs	r3, #2
 800228a:	e088      	b.n	800239e <HAL_TIM_IC_ConfigChannel+0x130>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11b      	bne.n	80022d2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6818      	ldr	r0, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	6819      	ldr	r1, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f000 fce7 	bl	8002c7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 020c 	bic.w	r2, r2, #12
 80022bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6999      	ldr	r1, [r3, #24]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	619a      	str	r2, [r3, #24]
 80022d0:	e060      	b.n	8002394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11c      	bne.n	8002312 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f000 fd5f 	bl	8002daa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6999      	ldr	r1, [r3, #24]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	021a      	lsls	r2, r3, #8
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	e040      	b.n	8002394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f000 fdac 	bl	8002e84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 020c 	bic.w	r2, r2, #12
 800233a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69d9      	ldr	r1, [r3, #28]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	61da      	str	r2, [r3, #28]
 800234e:	e021      	b.n	8002394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d11c      	bne.n	8002390 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6818      	ldr	r0, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	6819      	ldr	r1, [r3, #0]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f000 fdc9 	bl	8002efc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002378:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69d9      	ldr	r1, [r3, #28]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	61da      	str	r2, [r3, #28]
 800238e:	e001      	b.n	8002394 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800239c:	7dfb      	ldrb	r3, [r7, #23]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e0ae      	b.n	8002524 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	f200 809f 	bhi.w	8002514 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	08002411 	.word	0x08002411
 80023e0:	08002515 	.word	0x08002515
 80023e4:	08002515 	.word	0x08002515
 80023e8:	08002515 	.word	0x08002515
 80023ec:	08002451 	.word	0x08002451
 80023f0:	08002515 	.word	0x08002515
 80023f4:	08002515 	.word	0x08002515
 80023f8:	08002515 	.word	0x08002515
 80023fc:	08002493 	.word	0x08002493
 8002400:	08002515 	.word	0x08002515
 8002404:	08002515 	.word	0x08002515
 8002408:	08002515 	.word	0x08002515
 800240c:	080024d3 	.word	0x080024d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fa12 	bl	8002840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0208 	orr.w	r2, r2, #8
 800242a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0204 	bic.w	r2, r2, #4
 800243a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6999      	ldr	r1, [r3, #24]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	619a      	str	r2, [r3, #24]
      break;
 800244e:	e064      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa58 	bl	800290c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6999      	ldr	r1, [r3, #24]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	021a      	lsls	r2, r3, #8
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	619a      	str	r2, [r3, #24]
      break;
 8002490:	e043      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	4618      	mov	r0, r3
 800249a:	f000 faa3 	bl	80029e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0208 	orr.w	r2, r2, #8
 80024ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0204 	bic.w	r2, r2, #4
 80024bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69d9      	ldr	r1, [r3, #28]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	61da      	str	r2, [r3, #28]
      break;
 80024d0:	e023      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 faed 	bl	8002ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69d9      	ldr	r1, [r3, #28]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	021a      	lsls	r2, r3, #8
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	61da      	str	r2, [r3, #28]
      break;
 8002512:	e002      	b.n	800251a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
      break;
 8002518:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002522:	7dfb      	ldrb	r3, [r7, #23]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_TIM_ConfigClockSource+0x1c>
 8002544:	2302      	movs	r3, #2
 8002546:	e0b4      	b.n	80026b2 <HAL_TIM_ConfigClockSource+0x186>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002580:	d03e      	beq.n	8002600 <HAL_TIM_ConfigClockSource+0xd4>
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	f200 8087 	bhi.w	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 800258a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258e:	f000 8086 	beq.w	800269e <HAL_TIM_ConfigClockSource+0x172>
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	d87f      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d01a      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0xa6>
 800259c:	2b70      	cmp	r3, #112	; 0x70
 800259e:	d87b      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b60      	cmp	r3, #96	; 0x60
 80025a2:	d050      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x11a>
 80025a4:	2b60      	cmp	r3, #96	; 0x60
 80025a6:	d877      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b50      	cmp	r3, #80	; 0x50
 80025aa:	d03c      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0xfa>
 80025ac:	2b50      	cmp	r3, #80	; 0x50
 80025ae:	d873      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d058      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x13a>
 80025b4:	2b40      	cmp	r3, #64	; 0x40
 80025b6:	d86f      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b30      	cmp	r3, #48	; 0x30
 80025ba:	d064      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x15a>
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d86b      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d060      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x15a>
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d867      	bhi.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d05c      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d05a      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x15a>
 80025d0:	e062      	b.n	8002698 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f000 fce3 	bl	8002fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	609a      	str	r2, [r3, #8]
      break;
 80025fe:	e04f      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6899      	ldr	r1, [r3, #8]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f000 fccc 	bl	8002fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002622:	609a      	str	r2, [r3, #8]
      break;
 8002624:	e03c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6859      	ldr	r1, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	f000 fb8a 	bl	8002d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2150      	movs	r1, #80	; 0x50
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fc99 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002644:	e02c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	461a      	mov	r2, r3
 8002654:	f000 fbe6 	bl	8002e24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2160      	movs	r1, #96	; 0x60
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fc89 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002664:	e01c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	461a      	mov	r2, r3
 8002674:	f000 fb6a 	bl	8002d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2140      	movs	r1, #64	; 0x40
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fc79 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002684:	e00c      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f000 fc70 	bl	8002f76 <TIM_ITRx_SetConfig>
      break;
 8002696:	e003      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e000      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800269e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e031      	b.n	8002736 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fa37 	bl	8002b58 <TIM_SlaveTimer_SetConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e018      	b.n	8002736 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002712:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002722:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a34      	ldr	r2, [pc, #208]	; (8002824 <TIM_Base_SetConfig+0xe4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00f      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275e:	d00b      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a31      	ldr	r2, [pc, #196]	; (8002828 <TIM_Base_SetConfig+0xe8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <TIM_Base_SetConfig+0xec>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x38>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <TIM_Base_SetConfig+0xf0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0xe4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01b      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d017      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a22      	ldr	r2, [pc, #136]	; (8002828 <TIM_Base_SetConfig+0xe8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a21      	ldr	r2, [pc, #132]	; (800282c <TIM_Base_SetConfig+0xec>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00f      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a20      	ldr	r2, [pc, #128]	; (8002830 <TIM_Base_SetConfig+0xf0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <TIM_Base_SetConfig+0xf4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <TIM_Base_SetConfig+0xf8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x8a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <TIM_Base_SetConfig+0xfc>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <TIM_Base_SetConfig+0xe4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d103      	bne.n	8002810 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	615a      	str	r2, [r3, #20]
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800
 8002830:	40000c00 	.word	0x40000c00
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800

08002840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 0302 	bic.w	r3, r3, #2
 8002888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <TIM_OC1_SetConfig+0xc8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d10c      	bne.n	80028b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f023 0308 	bic.w	r3, r3, #8
 80028a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <TIM_OC1_SetConfig+0xc8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d111      	bne.n	80028e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40010000 	.word	0x40010000

0800290c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f023 0210 	bic.w	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f023 0320 	bic.w	r3, r3, #32
 8002956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a1e      	ldr	r2, [pc, #120]	; (80029e0 <TIM_OC2_SetConfig+0xd4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d10d      	bne.n	8002988 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002986:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <TIM_OC2_SetConfig+0xd4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d113      	bne.n	80029b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800299e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000

080029e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <TIM_OC3_SetConfig+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d113      	bne.n	8002a8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40010000 	.word	0x40010000

08002ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	031b      	lsls	r3, r3, #12
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <TIM_OC4_SetConfig+0x9c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d109      	bne.n	8002b2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	621a      	str	r2, [r3, #32]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000

08002b58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f023 0307 	bic.w	r3, r3, #7
 8002b86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b70      	cmp	r3, #112	; 0x70
 8002ba0:	d01a      	beq.n	8002bd8 <TIM_SlaveTimer_SetConfig+0x80>
 8002ba2:	2b70      	cmp	r3, #112	; 0x70
 8002ba4:	d860      	bhi.n	8002c68 <TIM_SlaveTimer_SetConfig+0x110>
 8002ba6:	2b60      	cmp	r3, #96	; 0x60
 8002ba8:	d054      	beq.n	8002c54 <TIM_SlaveTimer_SetConfig+0xfc>
 8002baa:	2b60      	cmp	r3, #96	; 0x60
 8002bac:	d85c      	bhi.n	8002c68 <TIM_SlaveTimer_SetConfig+0x110>
 8002bae:	2b50      	cmp	r3, #80	; 0x50
 8002bb0:	d046      	beq.n	8002c40 <TIM_SlaveTimer_SetConfig+0xe8>
 8002bb2:	2b50      	cmp	r3, #80	; 0x50
 8002bb4:	d858      	bhi.n	8002c68 <TIM_SlaveTimer_SetConfig+0x110>
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d019      	beq.n	8002bee <TIM_SlaveTimer_SetConfig+0x96>
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d854      	bhi.n	8002c68 <TIM_SlaveTimer_SetConfig+0x110>
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	d055      	beq.n	8002c6e <TIM_SlaveTimer_SetConfig+0x116>
 8002bc2:	2b30      	cmp	r3, #48	; 0x30
 8002bc4:	d850      	bhi.n	8002c68 <TIM_SlaveTimer_SetConfig+0x110>
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d051      	beq.n	8002c6e <TIM_SlaveTimer_SetConfig+0x116>
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d84c      	bhi.n	8002c68 <TIM_SlaveTimer_SetConfig+0x110>
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d04d      	beq.n	8002c6e <TIM_SlaveTimer_SetConfig+0x116>
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d04b      	beq.n	8002c6e <TIM_SlaveTimer_SetConfig+0x116>
 8002bd6:	e047      	b.n	8002c68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68d9      	ldr	r1, [r3, #12]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f000 f9e0 	bl	8002fac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002bec:	e040      	b.n	8002c70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b05      	cmp	r3, #5
 8002bf4:	d101      	bne.n	8002bfa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e03b      	b.n	8002c72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	621a      	str	r2, [r3, #32]
      break;
 8002c3e:	e017      	b.n	8002c70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6899      	ldr	r1, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f000 f87d 	bl	8002d4c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002c52:	e00d      	b.n	8002c70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f000 f8df 	bl	8002e24 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002c66:	e003      	b.n	8002c70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6c:	e000      	b.n	8002c70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002c6e:	bf00      	nop
  }

  return status;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0201 	bic.w	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <TIM_TI1_SetConfig+0xbc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <TIM_TI1_SetConfig+0x56>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb0:	d00f      	beq.n	8002cd2 <TIM_TI1_SetConfig+0x56>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <TIM_TI1_SetConfig+0xc0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_TI1_SetConfig+0x56>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	; (8002d40 <TIM_TI1_SetConfig+0xc4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_TI1_SetConfig+0x56>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <TIM_TI1_SetConfig+0xc8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_TI1_SetConfig+0x56>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <TIM_TI1_SetConfig+0xcc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <TIM_TI1_SetConfig+0x5a>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <TIM_TI1_SetConfig+0x5c>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0303 	bic.w	r3, r3, #3
 8002ce2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	e003      	b.n	8002cf6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f023 030a 	bic.w	r3, r3, #10
 8002d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 030a 	and.w	r3, r3, #10
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40014000 	.word	0x40014000

08002d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 030a 	bic.w	r3, r3, #10
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f023 0210 	bic.w	r2, r3, #16
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	031b      	lsls	r3, r3, #12
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	621a      	str	r2, [r3, #32]
}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f023 0210 	bic.w	r2, r3, #16
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	031b      	lsls	r3, r3, #12
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	621a      	str	r2, [r3, #32]
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 0303 	bic.w	r3, r3, #3
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	621a      	str	r2, [r3, #32]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	031b      	lsls	r3, r3, #12
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	031b      	lsls	r3, r3, #12
 8002f54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f043 0307 	orr.w	r3, r3, #7
 8002f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003000:	2302      	movs	r3, #2
 8003002:	e050      	b.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d018      	beq.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d013      	beq.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00e      	beq.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d009      	beq.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10c      	bne.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	4313      	orrs	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40010000 	.word	0x40010000
 80030b8:	40000400 	.word	0x40000400
 80030bc:	40000800 	.word	0x40000800
 80030c0:	40000c00 	.word	0x40000c00
 80030c4:	40014000 	.word	0x40014000

080030c8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	601a      	str	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6852      	ldr	r2, [r2, #4]
 8003130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	429a      	cmp	r2, r3
 800313a:	d103      	bne.n	8003144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316e:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <xTaskIncrementTick+0x144>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 808e 	bne.w	8003294 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <xTaskIncrementTick+0x148>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003180:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <xTaskIncrementTick+0x148>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d120      	bne.n	80031ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800318c:	4b48      	ldr	r3, [pc, #288]	; (80032b0 <xTaskIncrementTick+0x14c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031a8:	bf00      	nop
 80031aa:	e7fe      	b.n	80031aa <xTaskIncrementTick+0x46>
 80031ac:	4b40      	ldr	r3, [pc, #256]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b40      	ldr	r3, [pc, #256]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a3e      	ldr	r2, [pc, #248]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4a3e      	ldr	r2, [pc, #248]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <xTaskIncrementTick+0x154>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a3c      	ldr	r2, [pc, #240]	; (80032b8 <xTaskIncrementTick+0x154>)
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	f000 f8df 	bl	800338c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031ce:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <xTaskIncrementTick+0x158>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d348      	bcc.n	800326a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <xTaskIncrementTick+0x158>)
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	601a      	str	r2, [r3, #0]
					break;
 80031ea:	e03e      	b.n	800326a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ec:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d203      	bcs.n	800320c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003204:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <xTaskIncrementTick+0x158>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800320a:	e02e      	b.n	800326a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3304      	adds	r3, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff7d 	bl	8003110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3318      	adds	r3, #24
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff74 	bl	8003110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2201      	movs	r2, #1
 800322e:	409a      	lsls	r2, r3
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <xTaskIncrementTick+0x15c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4313      	orrs	r3, r2
 8003236:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <xTaskIncrementTick+0x15c>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <xTaskIncrementTick+0x160>)
 8003248:	441a      	add	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7ff ff39 	bl	80030c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <xTaskIncrementTick+0x164>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	429a      	cmp	r2, r3
 8003262:	d3b9      	bcc.n	80031d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003268:	e7b6      	b.n	80031d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <xTaskIncrementTick+0x164>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	4914      	ldr	r1, [pc, #80]	; (80032c4 <xTaskIncrementTick+0x160>)
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d901      	bls.n	8003286 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003282:	2301      	movs	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <xTaskIncrementTick+0x168>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800328e:	2301      	movs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e004      	b.n	800329e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <xTaskIncrementTick+0x16c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <xTaskIncrementTick+0x16c>)
 800329c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800329e:	697b      	ldr	r3, [r7, #20]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000288 	.word	0x20000288
 80032ac:	2000026c 	.word	0x2000026c
 80032b0:	20000264 	.word	0x20000264
 80032b4:	20000268 	.word	0x20000268
 80032b8:	20000280 	.word	0x20000280
 80032bc:	20000284 	.word	0x20000284
 80032c0:	20000270 	.word	0x20000270
 80032c4:	200001d8 	.word	0x200001d8
 80032c8:	200001d4 	.word	0x200001d4
 80032cc:	2000027c 	.word	0x2000027c
 80032d0:	20000278 	.word	0x20000278

080032d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <vTaskSwitchContext+0xa4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <vTaskSwitchContext+0xa8>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032e8:	e03f      	b.n	800336a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <vTaskSwitchContext+0xa8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <vTaskSwitchContext+0xac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	f1c3 031f 	rsb	r3, r3, #31
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	491f      	ldr	r1, [pc, #124]	; (8003384 <vTaskSwitchContext+0xb0>)
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <vTaskSwitchContext+0x5c>
	__asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	607b      	str	r3, [r7, #4]
}
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <vTaskSwitchContext+0x5a>
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <vTaskSwitchContext+0xb0>)
 800333c:	4413      	add	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3308      	adds	r3, #8
 8003352:	429a      	cmp	r2, r3
 8003354:	d104      	bne.n	8003360 <vTaskSwitchContext+0x8c>
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4a08      	ldr	r2, [pc, #32]	; (8003388 <vTaskSwitchContext+0xb4>)
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000288 	.word	0x20000288
 800337c:	2000027c 	.word	0x2000027c
 8003380:	20000270 	.word	0x20000270
 8003384:	200001d8 	.word	0x200001d8
 8003388:	200001d4 	.word	0x200001d4

0800338c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <prvResetNextTaskUnblockTime+0x38>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d104      	bne.n	80033a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <prvResetNextTaskUnblockTime+0x3c>)
 800339e:	f04f 32ff 	mov.w	r2, #4294967295
 80033a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033a4:	e008      	b.n	80033b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <prvResetNextTaskUnblockTime+0x38>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <prvResetNextTaskUnblockTime+0x3c>)
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000264 	.word	0x20000264
 80033c8:	20000284 	.word	0x20000284

080033cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <xTaskGetSchedulerState+0x34>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80033da:	2301      	movs	r3, #1
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	e008      	b.n	80033f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <xTaskGetSchedulerState+0x38>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033e8:	2302      	movs	r3, #2
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	e001      	b.n	80033f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033f2:	687b      	ldr	r3, [r7, #4]
	}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	20000274 	.word	0x20000274
 8003404:	20000288 	.word	0x20000288
	...

08003410 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <pxCurrentTCBConst2>)
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	6808      	ldr	r0, [r1, #0]
 8003416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341a:	f380 8809 	msr	PSP, r0
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f380 8811 	msr	BASEPRI, r0
 800342a:	4770      	bx	lr
 800342c:	f3af 8000 	nop.w

08003430 <pxCurrentTCBConst2>:
 8003430:	200001d4 	.word	0x200001d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop
	...

08003440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003440:	f3ef 8009 	mrs	r0, PSP
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <pxCurrentTCBConst>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	f01e 0f10 	tst.w	lr, #16
 8003450:	bf08      	it	eq
 8003452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345a:	6010      	str	r0, [r2, #0]
 800345c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003464:	f380 8811 	msr	BASEPRI, r0
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f7ff ff30 	bl	80032d4 <vTaskSwitchContext>
 8003474:	f04f 0000 	mov.w	r0, #0
 8003478:	f380 8811 	msr	BASEPRI, r0
 800347c:	bc09      	pop	{r0, r3}
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	6808      	ldr	r0, [r1, #0]
 8003482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003486:	f01e 0f10 	tst.w	lr, #16
 800348a:	bf08      	it	eq
 800348c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003490:	f380 8809 	msr	PSP, r0
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w

080034a0 <pxCurrentTCBConst>:
 80034a0:	200001d4 	.word	0x200001d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop

080034a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	607b      	str	r3, [r7, #4]
}
 80034c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034c2:	f7ff fe4f 	bl	8003164 <xTaskIncrementTick>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <xPortSysTickHandler+0x40>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	e000ed04 	.word	0xe000ed04

080034ec <__errno>:
 80034ec:	4b01      	ldr	r3, [pc, #4]	; (80034f4 <__errno+0x8>)
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	2000000c 	.word	0x2000000c

080034f8 <__libc_init_array>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	4d0d      	ldr	r5, [pc, #52]	; (8003530 <__libc_init_array+0x38>)
 80034fc:	4c0d      	ldr	r4, [pc, #52]	; (8003534 <__libc_init_array+0x3c>)
 80034fe:	1b64      	subs	r4, r4, r5
 8003500:	10a4      	asrs	r4, r4, #2
 8003502:	2600      	movs	r6, #0
 8003504:	42a6      	cmp	r6, r4
 8003506:	d109      	bne.n	800351c <__libc_init_array+0x24>
 8003508:	4d0b      	ldr	r5, [pc, #44]	; (8003538 <__libc_init_array+0x40>)
 800350a:	4c0c      	ldr	r4, [pc, #48]	; (800353c <__libc_init_array+0x44>)
 800350c:	f001 faae 	bl	8004a6c <_init>
 8003510:	1b64      	subs	r4, r4, r5
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	2600      	movs	r6, #0
 8003516:	42a6      	cmp	r6, r4
 8003518:	d105      	bne.n	8003526 <__libc_init_array+0x2e>
 800351a:	bd70      	pop	{r4, r5, r6, pc}
 800351c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003520:	4798      	blx	r3
 8003522:	3601      	adds	r6, #1
 8003524:	e7ee      	b.n	8003504 <__libc_init_array+0xc>
 8003526:	f855 3b04 	ldr.w	r3, [r5], #4
 800352a:	4798      	blx	r3
 800352c:	3601      	adds	r6, #1
 800352e:	e7f2      	b.n	8003516 <__libc_init_array+0x1e>
 8003530:	08004ef0 	.word	0x08004ef0
 8003534:	08004ef0 	.word	0x08004ef0
 8003538:	08004ef0 	.word	0x08004ef0
 800353c:	08004ef4 	.word	0x08004ef4

08003540 <memset>:
 8003540:	4402      	add	r2, r0
 8003542:	4603      	mov	r3, r0
 8003544:	4293      	cmp	r3, r2
 8003546:	d100      	bne.n	800354a <memset+0xa>
 8003548:	4770      	bx	lr
 800354a:	f803 1b01 	strb.w	r1, [r3], #1
 800354e:	e7f9      	b.n	8003544 <memset+0x4>

08003550 <iprintf>:
 8003550:	b40f      	push	{r0, r1, r2, r3}
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <iprintf+0x2c>)
 8003554:	b513      	push	{r0, r1, r4, lr}
 8003556:	681c      	ldr	r4, [r3, #0]
 8003558:	b124      	cbz	r4, 8003564 <iprintf+0x14>
 800355a:	69a3      	ldr	r3, [r4, #24]
 800355c:	b913      	cbnz	r3, 8003564 <iprintf+0x14>
 800355e:	4620      	mov	r0, r4
 8003560:	f000 f87c 	bl	800365c <__sinit>
 8003564:	ab05      	add	r3, sp, #20
 8003566:	9a04      	ldr	r2, [sp, #16]
 8003568:	68a1      	ldr	r1, [r4, #8]
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	4620      	mov	r0, r4
 800356e:	f000 f9d3 	bl	8003918 <_vfiprintf_r>
 8003572:	b002      	add	sp, #8
 8003574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003578:	b004      	add	sp, #16
 800357a:	4770      	bx	lr
 800357c:	2000000c 	.word	0x2000000c

08003580 <putchar>:
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <putchar+0x28>)
 8003582:	b513      	push	{r0, r1, r4, lr}
 8003584:	681c      	ldr	r4, [r3, #0]
 8003586:	4601      	mov	r1, r0
 8003588:	b134      	cbz	r4, 8003598 <putchar+0x18>
 800358a:	69a3      	ldr	r3, [r4, #24]
 800358c:	b923      	cbnz	r3, 8003598 <putchar+0x18>
 800358e:	9001      	str	r0, [sp, #4]
 8003590:	4620      	mov	r0, r4
 8003592:	f000 f863 	bl	800365c <__sinit>
 8003596:	9901      	ldr	r1, [sp, #4]
 8003598:	68a2      	ldr	r2, [r4, #8]
 800359a:	4620      	mov	r0, r4
 800359c:	b002      	add	sp, #8
 800359e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035a2:	f000 bc7d 	b.w	8003ea0 <_putc_r>
 80035a6:	bf00      	nop
 80035a8:	2000000c 	.word	0x2000000c

080035ac <std>:
 80035ac:	2300      	movs	r3, #0
 80035ae:	b510      	push	{r4, lr}
 80035b0:	4604      	mov	r4, r0
 80035b2:	e9c0 3300 	strd	r3, r3, [r0]
 80035b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ba:	6083      	str	r3, [r0, #8]
 80035bc:	8181      	strh	r1, [r0, #12]
 80035be:	6643      	str	r3, [r0, #100]	; 0x64
 80035c0:	81c2      	strh	r2, [r0, #14]
 80035c2:	6183      	str	r3, [r0, #24]
 80035c4:	4619      	mov	r1, r3
 80035c6:	2208      	movs	r2, #8
 80035c8:	305c      	adds	r0, #92	; 0x5c
 80035ca:	f7ff ffb9 	bl	8003540 <memset>
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <std+0x38>)
 80035d0:	6263      	str	r3, [r4, #36]	; 0x24
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <std+0x3c>)
 80035d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <std+0x40>)
 80035d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <std+0x44>)
 80035dc:	6224      	str	r4, [r4, #32]
 80035de:	6323      	str	r3, [r4, #48]	; 0x30
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	bf00      	nop
 80035e4:	08003f51 	.word	0x08003f51
 80035e8:	08003f73 	.word	0x08003f73
 80035ec:	08003fab 	.word	0x08003fab
 80035f0:	08003fcf 	.word	0x08003fcf

080035f4 <_cleanup_r>:
 80035f4:	4901      	ldr	r1, [pc, #4]	; (80035fc <_cleanup_r+0x8>)
 80035f6:	f000 b8af 	b.w	8003758 <_fwalk_reent>
 80035fa:	bf00      	nop
 80035fc:	080042a9 	.word	0x080042a9

08003600 <__sfmoreglue>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	2268      	movs	r2, #104	; 0x68
 8003604:	1e4d      	subs	r5, r1, #1
 8003606:	4355      	muls	r5, r2
 8003608:	460e      	mov	r6, r1
 800360a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800360e:	f000 f8e5 	bl	80037dc <_malloc_r>
 8003612:	4604      	mov	r4, r0
 8003614:	b140      	cbz	r0, 8003628 <__sfmoreglue+0x28>
 8003616:	2100      	movs	r1, #0
 8003618:	e9c0 1600 	strd	r1, r6, [r0]
 800361c:	300c      	adds	r0, #12
 800361e:	60a0      	str	r0, [r4, #8]
 8003620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003624:	f7ff ff8c 	bl	8003540 <memset>
 8003628:	4620      	mov	r0, r4
 800362a:	bd70      	pop	{r4, r5, r6, pc}

0800362c <__sfp_lock_acquire>:
 800362c:	4801      	ldr	r0, [pc, #4]	; (8003634 <__sfp_lock_acquire+0x8>)
 800362e:	f000 b8b3 	b.w	8003798 <__retarget_lock_acquire_recursive>
 8003632:	bf00      	nop
 8003634:	2000028d 	.word	0x2000028d

08003638 <__sfp_lock_release>:
 8003638:	4801      	ldr	r0, [pc, #4]	; (8003640 <__sfp_lock_release+0x8>)
 800363a:	f000 b8ae 	b.w	800379a <__retarget_lock_release_recursive>
 800363e:	bf00      	nop
 8003640:	2000028d 	.word	0x2000028d

08003644 <__sinit_lock_acquire>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__sinit_lock_acquire+0x8>)
 8003646:	f000 b8a7 	b.w	8003798 <__retarget_lock_acquire_recursive>
 800364a:	bf00      	nop
 800364c:	2000028e 	.word	0x2000028e

08003650 <__sinit_lock_release>:
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <__sinit_lock_release+0x8>)
 8003652:	f000 b8a2 	b.w	800379a <__retarget_lock_release_recursive>
 8003656:	bf00      	nop
 8003658:	2000028e 	.word	0x2000028e

0800365c <__sinit>:
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
 8003660:	f7ff fff0 	bl	8003644 <__sinit_lock_acquire>
 8003664:	69a3      	ldr	r3, [r4, #24]
 8003666:	b11b      	cbz	r3, 8003670 <__sinit+0x14>
 8003668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800366c:	f7ff bff0 	b.w	8003650 <__sinit_lock_release>
 8003670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003674:	6523      	str	r3, [r4, #80]	; 0x50
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <__sinit+0x68>)
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <__sinit+0x6c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	62a2      	str	r2, [r4, #40]	; 0x28
 800367e:	42a3      	cmp	r3, r4
 8003680:	bf04      	itt	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	61a3      	streq	r3, [r4, #24]
 8003686:	4620      	mov	r0, r4
 8003688:	f000 f820 	bl	80036cc <__sfp>
 800368c:	6060      	str	r0, [r4, #4]
 800368e:	4620      	mov	r0, r4
 8003690:	f000 f81c 	bl	80036cc <__sfp>
 8003694:	60a0      	str	r0, [r4, #8]
 8003696:	4620      	mov	r0, r4
 8003698:	f000 f818 	bl	80036cc <__sfp>
 800369c:	2200      	movs	r2, #0
 800369e:	60e0      	str	r0, [r4, #12]
 80036a0:	2104      	movs	r1, #4
 80036a2:	6860      	ldr	r0, [r4, #4]
 80036a4:	f7ff ff82 	bl	80035ac <std>
 80036a8:	68a0      	ldr	r0, [r4, #8]
 80036aa:	2201      	movs	r2, #1
 80036ac:	2109      	movs	r1, #9
 80036ae:	f7ff ff7d 	bl	80035ac <std>
 80036b2:	68e0      	ldr	r0, [r4, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	2112      	movs	r1, #18
 80036b8:	f7ff ff78 	bl	80035ac <std>
 80036bc:	2301      	movs	r3, #1
 80036be:	61a3      	str	r3, [r4, #24]
 80036c0:	e7d2      	b.n	8003668 <__sinit+0xc>
 80036c2:	bf00      	nop
 80036c4:	08004e3c 	.word	0x08004e3c
 80036c8:	080035f5 	.word	0x080035f5

080036cc <__sfp>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	4607      	mov	r7, r0
 80036d0:	f7ff ffac 	bl	800362c <__sfp_lock_acquire>
 80036d4:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <__sfp+0x84>)
 80036d6:	681e      	ldr	r6, [r3, #0]
 80036d8:	69b3      	ldr	r3, [r6, #24]
 80036da:	b913      	cbnz	r3, 80036e2 <__sfp+0x16>
 80036dc:	4630      	mov	r0, r6
 80036de:	f7ff ffbd 	bl	800365c <__sinit>
 80036e2:	3648      	adds	r6, #72	; 0x48
 80036e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	d503      	bpl.n	80036f4 <__sfp+0x28>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	b30b      	cbz	r3, 8003734 <__sfp+0x68>
 80036f0:	6836      	ldr	r6, [r6, #0]
 80036f2:	e7f7      	b.n	80036e4 <__sfp+0x18>
 80036f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036f8:	b9d5      	cbnz	r5, 8003730 <__sfp+0x64>
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <__sfp+0x88>)
 80036fc:	60e3      	str	r3, [r4, #12]
 80036fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003702:	6665      	str	r5, [r4, #100]	; 0x64
 8003704:	f000 f847 	bl	8003796 <__retarget_lock_init_recursive>
 8003708:	f7ff ff96 	bl	8003638 <__sfp_lock_release>
 800370c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003714:	6025      	str	r5, [r4, #0]
 8003716:	61a5      	str	r5, [r4, #24]
 8003718:	2208      	movs	r2, #8
 800371a:	4629      	mov	r1, r5
 800371c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003720:	f7ff ff0e 	bl	8003540 <memset>
 8003724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800372c:	4620      	mov	r0, r4
 800372e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003730:	3468      	adds	r4, #104	; 0x68
 8003732:	e7d9      	b.n	80036e8 <__sfp+0x1c>
 8003734:	2104      	movs	r1, #4
 8003736:	4638      	mov	r0, r7
 8003738:	f7ff ff62 	bl	8003600 <__sfmoreglue>
 800373c:	4604      	mov	r4, r0
 800373e:	6030      	str	r0, [r6, #0]
 8003740:	2800      	cmp	r0, #0
 8003742:	d1d5      	bne.n	80036f0 <__sfp+0x24>
 8003744:	f7ff ff78 	bl	8003638 <__sfp_lock_release>
 8003748:	230c      	movs	r3, #12
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	e7ee      	b.n	800372c <__sfp+0x60>
 800374e:	bf00      	nop
 8003750:	08004e3c 	.word	0x08004e3c
 8003754:	ffff0001 	.word	0xffff0001

08003758 <_fwalk_reent>:
 8003758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800375c:	4606      	mov	r6, r0
 800375e:	4688      	mov	r8, r1
 8003760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003764:	2700      	movs	r7, #0
 8003766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800376a:	f1b9 0901 	subs.w	r9, r9, #1
 800376e:	d505      	bpl.n	800377c <_fwalk_reent+0x24>
 8003770:	6824      	ldr	r4, [r4, #0]
 8003772:	2c00      	cmp	r4, #0
 8003774:	d1f7      	bne.n	8003766 <_fwalk_reent+0xe>
 8003776:	4638      	mov	r0, r7
 8003778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800377c:	89ab      	ldrh	r3, [r5, #12]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d907      	bls.n	8003792 <_fwalk_reent+0x3a>
 8003782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003786:	3301      	adds	r3, #1
 8003788:	d003      	beq.n	8003792 <_fwalk_reent+0x3a>
 800378a:	4629      	mov	r1, r5
 800378c:	4630      	mov	r0, r6
 800378e:	47c0      	blx	r8
 8003790:	4307      	orrs	r7, r0
 8003792:	3568      	adds	r5, #104	; 0x68
 8003794:	e7e9      	b.n	800376a <_fwalk_reent+0x12>

08003796 <__retarget_lock_init_recursive>:
 8003796:	4770      	bx	lr

08003798 <__retarget_lock_acquire_recursive>:
 8003798:	4770      	bx	lr

0800379a <__retarget_lock_release_recursive>:
 800379a:	4770      	bx	lr

0800379c <sbrk_aligned>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	4e0e      	ldr	r6, [pc, #56]	; (80037d8 <sbrk_aligned+0x3c>)
 80037a0:	460c      	mov	r4, r1
 80037a2:	6831      	ldr	r1, [r6, #0]
 80037a4:	4605      	mov	r5, r0
 80037a6:	b911      	cbnz	r1, 80037ae <sbrk_aligned+0x12>
 80037a8:	f000 fbc2 	bl	8003f30 <_sbrk_r>
 80037ac:	6030      	str	r0, [r6, #0]
 80037ae:	4621      	mov	r1, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 fbbd 	bl	8003f30 <_sbrk_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	d00a      	beq.n	80037d0 <sbrk_aligned+0x34>
 80037ba:	1cc4      	adds	r4, r0, #3
 80037bc:	f024 0403 	bic.w	r4, r4, #3
 80037c0:	42a0      	cmp	r0, r4
 80037c2:	d007      	beq.n	80037d4 <sbrk_aligned+0x38>
 80037c4:	1a21      	subs	r1, r4, r0
 80037c6:	4628      	mov	r0, r5
 80037c8:	f000 fbb2 	bl	8003f30 <_sbrk_r>
 80037cc:	3001      	adds	r0, #1
 80037ce:	d101      	bne.n	80037d4 <sbrk_aligned+0x38>
 80037d0:	f04f 34ff 	mov.w	r4, #4294967295
 80037d4:	4620      	mov	r0, r4
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	20000294 	.word	0x20000294

080037dc <_malloc_r>:
 80037dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e0:	1ccd      	adds	r5, r1, #3
 80037e2:	f025 0503 	bic.w	r5, r5, #3
 80037e6:	3508      	adds	r5, #8
 80037e8:	2d0c      	cmp	r5, #12
 80037ea:	bf38      	it	cc
 80037ec:	250c      	movcc	r5, #12
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	4607      	mov	r7, r0
 80037f2:	db01      	blt.n	80037f8 <_malloc_r+0x1c>
 80037f4:	42a9      	cmp	r1, r5
 80037f6:	d905      	bls.n	8003804 <_malloc_r+0x28>
 80037f8:	230c      	movs	r3, #12
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	2600      	movs	r6, #0
 80037fe:	4630      	mov	r0, r6
 8003800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003804:	4e2e      	ldr	r6, [pc, #184]	; (80038c0 <_malloc_r+0xe4>)
 8003806:	f000 fe03 	bl	8004410 <__malloc_lock>
 800380a:	6833      	ldr	r3, [r6, #0]
 800380c:	461c      	mov	r4, r3
 800380e:	bb34      	cbnz	r4, 800385e <_malloc_r+0x82>
 8003810:	4629      	mov	r1, r5
 8003812:	4638      	mov	r0, r7
 8003814:	f7ff ffc2 	bl	800379c <sbrk_aligned>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	4604      	mov	r4, r0
 800381c:	d14d      	bne.n	80038ba <_malloc_r+0xde>
 800381e:	6834      	ldr	r4, [r6, #0]
 8003820:	4626      	mov	r6, r4
 8003822:	2e00      	cmp	r6, #0
 8003824:	d140      	bne.n	80038a8 <_malloc_r+0xcc>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	4631      	mov	r1, r6
 800382a:	4638      	mov	r0, r7
 800382c:	eb04 0803 	add.w	r8, r4, r3
 8003830:	f000 fb7e 	bl	8003f30 <_sbrk_r>
 8003834:	4580      	cmp	r8, r0
 8003836:	d13a      	bne.n	80038ae <_malloc_r+0xd2>
 8003838:	6821      	ldr	r1, [r4, #0]
 800383a:	3503      	adds	r5, #3
 800383c:	1a6d      	subs	r5, r5, r1
 800383e:	f025 0503 	bic.w	r5, r5, #3
 8003842:	3508      	adds	r5, #8
 8003844:	2d0c      	cmp	r5, #12
 8003846:	bf38      	it	cc
 8003848:	250c      	movcc	r5, #12
 800384a:	4629      	mov	r1, r5
 800384c:	4638      	mov	r0, r7
 800384e:	f7ff ffa5 	bl	800379c <sbrk_aligned>
 8003852:	3001      	adds	r0, #1
 8003854:	d02b      	beq.n	80038ae <_malloc_r+0xd2>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	442b      	add	r3, r5
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	e00e      	b.n	800387c <_malloc_r+0xa0>
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	1b52      	subs	r2, r2, r5
 8003862:	d41e      	bmi.n	80038a2 <_malloc_r+0xc6>
 8003864:	2a0b      	cmp	r2, #11
 8003866:	d916      	bls.n	8003896 <_malloc_r+0xba>
 8003868:	1961      	adds	r1, r4, r5
 800386a:	42a3      	cmp	r3, r4
 800386c:	6025      	str	r5, [r4, #0]
 800386e:	bf18      	it	ne
 8003870:	6059      	strne	r1, [r3, #4]
 8003872:	6863      	ldr	r3, [r4, #4]
 8003874:	bf08      	it	eq
 8003876:	6031      	streq	r1, [r6, #0]
 8003878:	5162      	str	r2, [r4, r5]
 800387a:	604b      	str	r3, [r1, #4]
 800387c:	4638      	mov	r0, r7
 800387e:	f104 060b 	add.w	r6, r4, #11
 8003882:	f000 fdcb 	bl	800441c <__malloc_unlock>
 8003886:	f026 0607 	bic.w	r6, r6, #7
 800388a:	1d23      	adds	r3, r4, #4
 800388c:	1af2      	subs	r2, r6, r3
 800388e:	d0b6      	beq.n	80037fe <_malloc_r+0x22>
 8003890:	1b9b      	subs	r3, r3, r6
 8003892:	50a3      	str	r3, [r4, r2]
 8003894:	e7b3      	b.n	80037fe <_malloc_r+0x22>
 8003896:	6862      	ldr	r2, [r4, #4]
 8003898:	42a3      	cmp	r3, r4
 800389a:	bf0c      	ite	eq
 800389c:	6032      	streq	r2, [r6, #0]
 800389e:	605a      	strne	r2, [r3, #4]
 80038a0:	e7ec      	b.n	800387c <_malloc_r+0xa0>
 80038a2:	4623      	mov	r3, r4
 80038a4:	6864      	ldr	r4, [r4, #4]
 80038a6:	e7b2      	b.n	800380e <_malloc_r+0x32>
 80038a8:	4634      	mov	r4, r6
 80038aa:	6876      	ldr	r6, [r6, #4]
 80038ac:	e7b9      	b.n	8003822 <_malloc_r+0x46>
 80038ae:	230c      	movs	r3, #12
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4638      	mov	r0, r7
 80038b4:	f000 fdb2 	bl	800441c <__malloc_unlock>
 80038b8:	e7a1      	b.n	80037fe <_malloc_r+0x22>
 80038ba:	6025      	str	r5, [r4, #0]
 80038bc:	e7de      	b.n	800387c <_malloc_r+0xa0>
 80038be:	bf00      	nop
 80038c0:	20000290 	.word	0x20000290

080038c4 <__sfputc_r>:
 80038c4:	6893      	ldr	r3, [r2, #8]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	b410      	push	{r4}
 80038cc:	6093      	str	r3, [r2, #8]
 80038ce:	da08      	bge.n	80038e2 <__sfputc_r+0x1e>
 80038d0:	6994      	ldr	r4, [r2, #24]
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	db01      	blt.n	80038da <__sfputc_r+0x16>
 80038d6:	290a      	cmp	r1, #10
 80038d8:	d103      	bne.n	80038e2 <__sfputc_r+0x1e>
 80038da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038de:	f000 bb7b 	b.w	8003fd8 <__swbuf_r>
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	1c58      	adds	r0, r3, #1
 80038e6:	6010      	str	r0, [r2, #0]
 80038e8:	7019      	strb	r1, [r3, #0]
 80038ea:	4608      	mov	r0, r1
 80038ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <__sfputs_r>:
 80038f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f4:	4606      	mov	r6, r0
 80038f6:	460f      	mov	r7, r1
 80038f8:	4614      	mov	r4, r2
 80038fa:	18d5      	adds	r5, r2, r3
 80038fc:	42ac      	cmp	r4, r5
 80038fe:	d101      	bne.n	8003904 <__sfputs_r+0x12>
 8003900:	2000      	movs	r0, #0
 8003902:	e007      	b.n	8003914 <__sfputs_r+0x22>
 8003904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003908:	463a      	mov	r2, r7
 800390a:	4630      	mov	r0, r6
 800390c:	f7ff ffda 	bl	80038c4 <__sfputc_r>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	d1f3      	bne.n	80038fc <__sfputs_r+0xa>
 8003914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003918 <_vfiprintf_r>:
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	460d      	mov	r5, r1
 800391e:	b09d      	sub	sp, #116	; 0x74
 8003920:	4614      	mov	r4, r2
 8003922:	4698      	mov	r8, r3
 8003924:	4606      	mov	r6, r0
 8003926:	b118      	cbz	r0, 8003930 <_vfiprintf_r+0x18>
 8003928:	6983      	ldr	r3, [r0, #24]
 800392a:	b90b      	cbnz	r3, 8003930 <_vfiprintf_r+0x18>
 800392c:	f7ff fe96 	bl	800365c <__sinit>
 8003930:	4b89      	ldr	r3, [pc, #548]	; (8003b58 <_vfiprintf_r+0x240>)
 8003932:	429d      	cmp	r5, r3
 8003934:	d11b      	bne.n	800396e <_vfiprintf_r+0x56>
 8003936:	6875      	ldr	r5, [r6, #4]
 8003938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800393a:	07d9      	lsls	r1, r3, #31
 800393c:	d405      	bmi.n	800394a <_vfiprintf_r+0x32>
 800393e:	89ab      	ldrh	r3, [r5, #12]
 8003940:	059a      	lsls	r2, r3, #22
 8003942:	d402      	bmi.n	800394a <_vfiprintf_r+0x32>
 8003944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003946:	f7ff ff27 	bl	8003798 <__retarget_lock_acquire_recursive>
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	071b      	lsls	r3, r3, #28
 800394e:	d501      	bpl.n	8003954 <_vfiprintf_r+0x3c>
 8003950:	692b      	ldr	r3, [r5, #16]
 8003952:	b9eb      	cbnz	r3, 8003990 <_vfiprintf_r+0x78>
 8003954:	4629      	mov	r1, r5
 8003956:	4630      	mov	r0, r6
 8003958:	f000 fba2 	bl	80040a0 <__swsetup_r>
 800395c:	b1c0      	cbz	r0, 8003990 <_vfiprintf_r+0x78>
 800395e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003960:	07dc      	lsls	r4, r3, #31
 8003962:	d50e      	bpl.n	8003982 <_vfiprintf_r+0x6a>
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	b01d      	add	sp, #116	; 0x74
 800396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396e:	4b7b      	ldr	r3, [pc, #492]	; (8003b5c <_vfiprintf_r+0x244>)
 8003970:	429d      	cmp	r5, r3
 8003972:	d101      	bne.n	8003978 <_vfiprintf_r+0x60>
 8003974:	68b5      	ldr	r5, [r6, #8]
 8003976:	e7df      	b.n	8003938 <_vfiprintf_r+0x20>
 8003978:	4b79      	ldr	r3, [pc, #484]	; (8003b60 <_vfiprintf_r+0x248>)
 800397a:	429d      	cmp	r5, r3
 800397c:	bf08      	it	eq
 800397e:	68f5      	ldreq	r5, [r6, #12]
 8003980:	e7da      	b.n	8003938 <_vfiprintf_r+0x20>
 8003982:	89ab      	ldrh	r3, [r5, #12]
 8003984:	0598      	lsls	r0, r3, #22
 8003986:	d4ed      	bmi.n	8003964 <_vfiprintf_r+0x4c>
 8003988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800398a:	f7ff ff06 	bl	800379a <__retarget_lock_release_recursive>
 800398e:	e7e9      	b.n	8003964 <_vfiprintf_r+0x4c>
 8003990:	2300      	movs	r3, #0
 8003992:	9309      	str	r3, [sp, #36]	; 0x24
 8003994:	2320      	movs	r3, #32
 8003996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800399a:	f8cd 800c 	str.w	r8, [sp, #12]
 800399e:	2330      	movs	r3, #48	; 0x30
 80039a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b64 <_vfiprintf_r+0x24c>
 80039a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039a8:	f04f 0901 	mov.w	r9, #1
 80039ac:	4623      	mov	r3, r4
 80039ae:	469a      	mov	sl, r3
 80039b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039b4:	b10a      	cbz	r2, 80039ba <_vfiprintf_r+0xa2>
 80039b6:	2a25      	cmp	r2, #37	; 0x25
 80039b8:	d1f9      	bne.n	80039ae <_vfiprintf_r+0x96>
 80039ba:	ebba 0b04 	subs.w	fp, sl, r4
 80039be:	d00b      	beq.n	80039d8 <_vfiprintf_r+0xc0>
 80039c0:	465b      	mov	r3, fp
 80039c2:	4622      	mov	r2, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	4630      	mov	r0, r6
 80039c8:	f7ff ff93 	bl	80038f2 <__sfputs_r>
 80039cc:	3001      	adds	r0, #1
 80039ce:	f000 80aa 	beq.w	8003b26 <_vfiprintf_r+0x20e>
 80039d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039d4:	445a      	add	r2, fp
 80039d6:	9209      	str	r2, [sp, #36]	; 0x24
 80039d8:	f89a 3000 	ldrb.w	r3, [sl]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a2 	beq.w	8003b26 <_vfiprintf_r+0x20e>
 80039e2:	2300      	movs	r3, #0
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ec:	f10a 0a01 	add.w	sl, sl, #1
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	9307      	str	r3, [sp, #28]
 80039f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039f8:	931a      	str	r3, [sp, #104]	; 0x68
 80039fa:	4654      	mov	r4, sl
 80039fc:	2205      	movs	r2, #5
 80039fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a02:	4858      	ldr	r0, [pc, #352]	; (8003b64 <_vfiprintf_r+0x24c>)
 8003a04:	f7fc fbec 	bl	80001e0 <memchr>
 8003a08:	9a04      	ldr	r2, [sp, #16]
 8003a0a:	b9d8      	cbnz	r0, 8003a44 <_vfiprintf_r+0x12c>
 8003a0c:	06d1      	lsls	r1, r2, #27
 8003a0e:	bf44      	itt	mi
 8003a10:	2320      	movmi	r3, #32
 8003a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a16:	0713      	lsls	r3, r2, #28
 8003a18:	bf44      	itt	mi
 8003a1a:	232b      	movmi	r3, #43	; 0x2b
 8003a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a20:	f89a 3000 	ldrb.w	r3, [sl]
 8003a24:	2b2a      	cmp	r3, #42	; 0x2a
 8003a26:	d015      	beq.n	8003a54 <_vfiprintf_r+0x13c>
 8003a28:	9a07      	ldr	r2, [sp, #28]
 8003a2a:	4654      	mov	r4, sl
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f04f 0c0a 	mov.w	ip, #10
 8003a32:	4621      	mov	r1, r4
 8003a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a38:	3b30      	subs	r3, #48	; 0x30
 8003a3a:	2b09      	cmp	r3, #9
 8003a3c:	d94e      	bls.n	8003adc <_vfiprintf_r+0x1c4>
 8003a3e:	b1b0      	cbz	r0, 8003a6e <_vfiprintf_r+0x156>
 8003a40:	9207      	str	r2, [sp, #28]
 8003a42:	e014      	b.n	8003a6e <_vfiprintf_r+0x156>
 8003a44:	eba0 0308 	sub.w	r3, r0, r8
 8003a48:	fa09 f303 	lsl.w	r3, r9, r3
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	9304      	str	r3, [sp, #16]
 8003a50:	46a2      	mov	sl, r4
 8003a52:	e7d2      	b.n	80039fa <_vfiprintf_r+0xe2>
 8003a54:	9b03      	ldr	r3, [sp, #12]
 8003a56:	1d19      	adds	r1, r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	9103      	str	r1, [sp, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bfbb      	ittet	lt
 8003a60:	425b      	neglt	r3, r3
 8003a62:	f042 0202 	orrlt.w	r2, r2, #2
 8003a66:	9307      	strge	r3, [sp, #28]
 8003a68:	9307      	strlt	r3, [sp, #28]
 8003a6a:	bfb8      	it	lt
 8003a6c:	9204      	strlt	r2, [sp, #16]
 8003a6e:	7823      	ldrb	r3, [r4, #0]
 8003a70:	2b2e      	cmp	r3, #46	; 0x2e
 8003a72:	d10c      	bne.n	8003a8e <_vfiprintf_r+0x176>
 8003a74:	7863      	ldrb	r3, [r4, #1]
 8003a76:	2b2a      	cmp	r3, #42	; 0x2a
 8003a78:	d135      	bne.n	8003ae6 <_vfiprintf_r+0x1ce>
 8003a7a:	9b03      	ldr	r3, [sp, #12]
 8003a7c:	1d1a      	adds	r2, r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	9203      	str	r2, [sp, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfb8      	it	lt
 8003a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a8a:	3402      	adds	r4, #2
 8003a8c:	9305      	str	r3, [sp, #20]
 8003a8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b74 <_vfiprintf_r+0x25c>
 8003a92:	7821      	ldrb	r1, [r4, #0]
 8003a94:	2203      	movs	r2, #3
 8003a96:	4650      	mov	r0, sl
 8003a98:	f7fc fba2 	bl	80001e0 <memchr>
 8003a9c:	b140      	cbz	r0, 8003ab0 <_vfiprintf_r+0x198>
 8003a9e:	2340      	movs	r3, #64	; 0x40
 8003aa0:	eba0 000a 	sub.w	r0, r0, sl
 8003aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8003aa8:	9b04      	ldr	r3, [sp, #16]
 8003aaa:	4303      	orrs	r3, r0
 8003aac:	3401      	adds	r4, #1
 8003aae:	9304      	str	r3, [sp, #16]
 8003ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab4:	482c      	ldr	r0, [pc, #176]	; (8003b68 <_vfiprintf_r+0x250>)
 8003ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aba:	2206      	movs	r2, #6
 8003abc:	f7fc fb90 	bl	80001e0 <memchr>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d03f      	beq.n	8003b44 <_vfiprintf_r+0x22c>
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <_vfiprintf_r+0x254>)
 8003ac6:	bb1b      	cbnz	r3, 8003b10 <_vfiprintf_r+0x1f8>
 8003ac8:	9b03      	ldr	r3, [sp, #12]
 8003aca:	3307      	adds	r3, #7
 8003acc:	f023 0307 	bic.w	r3, r3, #7
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	9303      	str	r3, [sp, #12]
 8003ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad6:	443b      	add	r3, r7
 8003ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ada:	e767      	b.n	80039ac <_vfiprintf_r+0x94>
 8003adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	e7a5      	b.n	8003a32 <_vfiprintf_r+0x11a>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	3401      	adds	r4, #1
 8003aea:	9305      	str	r3, [sp, #20]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f04f 0c0a 	mov.w	ip, #10
 8003af2:	4620      	mov	r0, r4
 8003af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003af8:	3a30      	subs	r2, #48	; 0x30
 8003afa:	2a09      	cmp	r2, #9
 8003afc:	d903      	bls.n	8003b06 <_vfiprintf_r+0x1ee>
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0c5      	beq.n	8003a8e <_vfiprintf_r+0x176>
 8003b02:	9105      	str	r1, [sp, #20]
 8003b04:	e7c3      	b.n	8003a8e <_vfiprintf_r+0x176>
 8003b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e7f0      	b.n	8003af2 <_vfiprintf_r+0x1da>
 8003b10:	ab03      	add	r3, sp, #12
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	462a      	mov	r2, r5
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <_vfiprintf_r+0x258>)
 8003b18:	a904      	add	r1, sp, #16
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f3af 8000 	nop.w
 8003b20:	4607      	mov	r7, r0
 8003b22:	1c78      	adds	r0, r7, #1
 8003b24:	d1d6      	bne.n	8003ad4 <_vfiprintf_r+0x1bc>
 8003b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b28:	07d9      	lsls	r1, r3, #31
 8003b2a:	d405      	bmi.n	8003b38 <_vfiprintf_r+0x220>
 8003b2c:	89ab      	ldrh	r3, [r5, #12]
 8003b2e:	059a      	lsls	r2, r3, #22
 8003b30:	d402      	bmi.n	8003b38 <_vfiprintf_r+0x220>
 8003b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b34:	f7ff fe31 	bl	800379a <__retarget_lock_release_recursive>
 8003b38:	89ab      	ldrh	r3, [r5, #12]
 8003b3a:	065b      	lsls	r3, r3, #25
 8003b3c:	f53f af12 	bmi.w	8003964 <_vfiprintf_r+0x4c>
 8003b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b42:	e711      	b.n	8003968 <_vfiprintf_r+0x50>
 8003b44:	ab03      	add	r3, sp, #12
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	462a      	mov	r2, r5
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <_vfiprintf_r+0x258>)
 8003b4c:	a904      	add	r1, sp, #16
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f000 f880 	bl	8003c54 <_printf_i>
 8003b54:	e7e4      	b.n	8003b20 <_vfiprintf_r+0x208>
 8003b56:	bf00      	nop
 8003b58:	08004e60 	.word	0x08004e60
 8003b5c:	08004e80 	.word	0x08004e80
 8003b60:	08004e40 	.word	0x08004e40
 8003b64:	08004ea0 	.word	0x08004ea0
 8003b68:	08004eaa 	.word	0x08004eaa
 8003b6c:	00000000 	.word	0x00000000
 8003b70:	080038f3 	.word	0x080038f3
 8003b74:	08004ea6 	.word	0x08004ea6

08003b78 <_printf_common>:
 8003b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b7c:	4616      	mov	r6, r2
 8003b7e:	4699      	mov	r9, r3
 8003b80:	688a      	ldr	r2, [r1, #8]
 8003b82:	690b      	ldr	r3, [r1, #16]
 8003b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bfb8      	it	lt
 8003b8c:	4613      	movlt	r3, r2
 8003b8e:	6033      	str	r3, [r6, #0]
 8003b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b94:	4607      	mov	r7, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	b10a      	cbz	r2, 8003b9e <_printf_common+0x26>
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	6033      	str	r3, [r6, #0]
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	0699      	lsls	r1, r3, #26
 8003ba2:	bf42      	ittt	mi
 8003ba4:	6833      	ldrmi	r3, [r6, #0]
 8003ba6:	3302      	addmi	r3, #2
 8003ba8:	6033      	strmi	r3, [r6, #0]
 8003baa:	6825      	ldr	r5, [r4, #0]
 8003bac:	f015 0506 	ands.w	r5, r5, #6
 8003bb0:	d106      	bne.n	8003bc0 <_printf_common+0x48>
 8003bb2:	f104 0a19 	add.w	sl, r4, #25
 8003bb6:	68e3      	ldr	r3, [r4, #12]
 8003bb8:	6832      	ldr	r2, [r6, #0]
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	42ab      	cmp	r3, r5
 8003bbe:	dc26      	bgt.n	8003c0e <_printf_common+0x96>
 8003bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bc4:	1e13      	subs	r3, r2, #0
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	bf18      	it	ne
 8003bca:	2301      	movne	r3, #1
 8003bcc:	0692      	lsls	r2, r2, #26
 8003bce:	d42b      	bmi.n	8003c28 <_printf_common+0xb0>
 8003bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	47c0      	blx	r8
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d01e      	beq.n	8003c1c <_printf_common+0xa4>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	68e5      	ldr	r5, [r4, #12]
 8003be2:	6832      	ldr	r2, [r6, #0]
 8003be4:	f003 0306 	and.w	r3, r3, #6
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	bf08      	it	eq
 8003bec:	1aad      	subeq	r5, r5, r2
 8003bee:	68a3      	ldr	r3, [r4, #8]
 8003bf0:	6922      	ldr	r2, [r4, #16]
 8003bf2:	bf0c      	ite	eq
 8003bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf8:	2500      	movne	r5, #0
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	bfc4      	itt	gt
 8003bfe:	1a9b      	subgt	r3, r3, r2
 8003c00:	18ed      	addgt	r5, r5, r3
 8003c02:	2600      	movs	r6, #0
 8003c04:	341a      	adds	r4, #26
 8003c06:	42b5      	cmp	r5, r6
 8003c08:	d11a      	bne.n	8003c40 <_printf_common+0xc8>
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	e008      	b.n	8003c20 <_printf_common+0xa8>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4652      	mov	r2, sl
 8003c12:	4649      	mov	r1, r9
 8003c14:	4638      	mov	r0, r7
 8003c16:	47c0      	blx	r8
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d103      	bne.n	8003c24 <_printf_common+0xac>
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c24:	3501      	adds	r5, #1
 8003c26:	e7c6      	b.n	8003bb6 <_printf_common+0x3e>
 8003c28:	18e1      	adds	r1, r4, r3
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	2030      	movs	r0, #48	; 0x30
 8003c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c32:	4422      	add	r2, r4
 8003c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	e7c7      	b.n	8003bd0 <_printf_common+0x58>
 8003c40:	2301      	movs	r3, #1
 8003c42:	4622      	mov	r2, r4
 8003c44:	4649      	mov	r1, r9
 8003c46:	4638      	mov	r0, r7
 8003c48:	47c0      	blx	r8
 8003c4a:	3001      	adds	r0, #1
 8003c4c:	d0e6      	beq.n	8003c1c <_printf_common+0xa4>
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7d9      	b.n	8003c06 <_printf_common+0x8e>
	...

08003c54 <_printf_i>:
 8003c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	7e0f      	ldrb	r7, [r1, #24]
 8003c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c5c:	2f78      	cmp	r7, #120	; 0x78
 8003c5e:	4691      	mov	r9, r2
 8003c60:	4680      	mov	r8, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	469a      	mov	sl, r3
 8003c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c6a:	d807      	bhi.n	8003c7c <_printf_i+0x28>
 8003c6c:	2f62      	cmp	r7, #98	; 0x62
 8003c6e:	d80a      	bhi.n	8003c86 <_printf_i+0x32>
 8003c70:	2f00      	cmp	r7, #0
 8003c72:	f000 80d8 	beq.w	8003e26 <_printf_i+0x1d2>
 8003c76:	2f58      	cmp	r7, #88	; 0x58
 8003c78:	f000 80a3 	beq.w	8003dc2 <_printf_i+0x16e>
 8003c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c84:	e03a      	b.n	8003cfc <_printf_i+0xa8>
 8003c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c8a:	2b15      	cmp	r3, #21
 8003c8c:	d8f6      	bhi.n	8003c7c <_printf_i+0x28>
 8003c8e:	a101      	add	r1, pc, #4	; (adr r1, 8003c94 <_printf_i+0x40>)
 8003c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c94:	08003ced 	.word	0x08003ced
 8003c98:	08003d01 	.word	0x08003d01
 8003c9c:	08003c7d 	.word	0x08003c7d
 8003ca0:	08003c7d 	.word	0x08003c7d
 8003ca4:	08003c7d 	.word	0x08003c7d
 8003ca8:	08003c7d 	.word	0x08003c7d
 8003cac:	08003d01 	.word	0x08003d01
 8003cb0:	08003c7d 	.word	0x08003c7d
 8003cb4:	08003c7d 	.word	0x08003c7d
 8003cb8:	08003c7d 	.word	0x08003c7d
 8003cbc:	08003c7d 	.word	0x08003c7d
 8003cc0:	08003e0d 	.word	0x08003e0d
 8003cc4:	08003d31 	.word	0x08003d31
 8003cc8:	08003def 	.word	0x08003def
 8003ccc:	08003c7d 	.word	0x08003c7d
 8003cd0:	08003c7d 	.word	0x08003c7d
 8003cd4:	08003e2f 	.word	0x08003e2f
 8003cd8:	08003c7d 	.word	0x08003c7d
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003c7d 	.word	0x08003c7d
 8003ce4:	08003c7d 	.word	0x08003c7d
 8003ce8:	08003df7 	.word	0x08003df7
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	602a      	str	r2, [r5, #0]
 8003cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0a3      	b.n	8003e48 <_printf_i+0x1f4>
 8003d00:	6820      	ldr	r0, [r4, #0]
 8003d02:	6829      	ldr	r1, [r5, #0]
 8003d04:	0606      	lsls	r6, r0, #24
 8003d06:	f101 0304 	add.w	r3, r1, #4
 8003d0a:	d50a      	bpl.n	8003d22 <_printf_i+0xce>
 8003d0c:	680e      	ldr	r6, [r1, #0]
 8003d0e:	602b      	str	r3, [r5, #0]
 8003d10:	2e00      	cmp	r6, #0
 8003d12:	da03      	bge.n	8003d1c <_printf_i+0xc8>
 8003d14:	232d      	movs	r3, #45	; 0x2d
 8003d16:	4276      	negs	r6, r6
 8003d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d1c:	485e      	ldr	r0, [pc, #376]	; (8003e98 <_printf_i+0x244>)
 8003d1e:	230a      	movs	r3, #10
 8003d20:	e019      	b.n	8003d56 <_printf_i+0x102>
 8003d22:	680e      	ldr	r6, [r1, #0]
 8003d24:	602b      	str	r3, [r5, #0]
 8003d26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d2a:	bf18      	it	ne
 8003d2c:	b236      	sxthne	r6, r6
 8003d2e:	e7ef      	b.n	8003d10 <_printf_i+0xbc>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	1d19      	adds	r1, r3, #4
 8003d36:	6029      	str	r1, [r5, #0]
 8003d38:	0601      	lsls	r1, r0, #24
 8003d3a:	d501      	bpl.n	8003d40 <_printf_i+0xec>
 8003d3c:	681e      	ldr	r6, [r3, #0]
 8003d3e:	e002      	b.n	8003d46 <_printf_i+0xf2>
 8003d40:	0646      	lsls	r6, r0, #25
 8003d42:	d5fb      	bpl.n	8003d3c <_printf_i+0xe8>
 8003d44:	881e      	ldrh	r6, [r3, #0]
 8003d46:	4854      	ldr	r0, [pc, #336]	; (8003e98 <_printf_i+0x244>)
 8003d48:	2f6f      	cmp	r7, #111	; 0x6f
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2308      	moveq	r3, #8
 8003d4e:	230a      	movne	r3, #10
 8003d50:	2100      	movs	r1, #0
 8003d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d56:	6865      	ldr	r5, [r4, #4]
 8003d58:	60a5      	str	r5, [r4, #8]
 8003d5a:	2d00      	cmp	r5, #0
 8003d5c:	bfa2      	ittt	ge
 8003d5e:	6821      	ldrge	r1, [r4, #0]
 8003d60:	f021 0104 	bicge.w	r1, r1, #4
 8003d64:	6021      	strge	r1, [r4, #0]
 8003d66:	b90e      	cbnz	r6, 8003d6c <_printf_i+0x118>
 8003d68:	2d00      	cmp	r5, #0
 8003d6a:	d04d      	beq.n	8003e08 <_printf_i+0x1b4>
 8003d6c:	4615      	mov	r5, r2
 8003d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d72:	fb03 6711 	mls	r7, r3, r1, r6
 8003d76:	5dc7      	ldrb	r7, [r0, r7]
 8003d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d7c:	4637      	mov	r7, r6
 8003d7e:	42bb      	cmp	r3, r7
 8003d80:	460e      	mov	r6, r1
 8003d82:	d9f4      	bls.n	8003d6e <_printf_i+0x11a>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d10b      	bne.n	8003da0 <_printf_i+0x14c>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	07de      	lsls	r6, r3, #31
 8003d8c:	d508      	bpl.n	8003da0 <_printf_i+0x14c>
 8003d8e:	6923      	ldr	r3, [r4, #16]
 8003d90:	6861      	ldr	r1, [r4, #4]
 8003d92:	4299      	cmp	r1, r3
 8003d94:	bfde      	ittt	le
 8003d96:	2330      	movle	r3, #48	; 0x30
 8003d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003da0:	1b52      	subs	r2, r2, r5
 8003da2:	6122      	str	r2, [r4, #16]
 8003da4:	f8cd a000 	str.w	sl, [sp]
 8003da8:	464b      	mov	r3, r9
 8003daa:	aa03      	add	r2, sp, #12
 8003dac:	4621      	mov	r1, r4
 8003dae:	4640      	mov	r0, r8
 8003db0:	f7ff fee2 	bl	8003b78 <_printf_common>
 8003db4:	3001      	adds	r0, #1
 8003db6:	d14c      	bne.n	8003e52 <_printf_i+0x1fe>
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	b004      	add	sp, #16
 8003dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc2:	4835      	ldr	r0, [pc, #212]	; (8003e98 <_printf_i+0x244>)
 8003dc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dc8:	6829      	ldr	r1, [r5, #0]
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dd0:	6029      	str	r1, [r5, #0]
 8003dd2:	061d      	lsls	r5, r3, #24
 8003dd4:	d514      	bpl.n	8003e00 <_printf_i+0x1ac>
 8003dd6:	07df      	lsls	r7, r3, #31
 8003dd8:	bf44      	itt	mi
 8003dda:	f043 0320 	orrmi.w	r3, r3, #32
 8003dde:	6023      	strmi	r3, [r4, #0]
 8003de0:	b91e      	cbnz	r6, 8003dea <_printf_i+0x196>
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	f023 0320 	bic.w	r3, r3, #32
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	2310      	movs	r3, #16
 8003dec:	e7b0      	b.n	8003d50 <_printf_i+0xfc>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	f043 0320 	orr.w	r3, r3, #32
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	2378      	movs	r3, #120	; 0x78
 8003df8:	4828      	ldr	r0, [pc, #160]	; (8003e9c <_printf_i+0x248>)
 8003dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dfe:	e7e3      	b.n	8003dc8 <_printf_i+0x174>
 8003e00:	0659      	lsls	r1, r3, #25
 8003e02:	bf48      	it	mi
 8003e04:	b2b6      	uxthmi	r6, r6
 8003e06:	e7e6      	b.n	8003dd6 <_printf_i+0x182>
 8003e08:	4615      	mov	r5, r2
 8003e0a:	e7bb      	b.n	8003d84 <_printf_i+0x130>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	6826      	ldr	r6, [r4, #0]
 8003e10:	6961      	ldr	r1, [r4, #20]
 8003e12:	1d18      	adds	r0, r3, #4
 8003e14:	6028      	str	r0, [r5, #0]
 8003e16:	0635      	lsls	r5, r6, #24
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	d501      	bpl.n	8003e20 <_printf_i+0x1cc>
 8003e1c:	6019      	str	r1, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <_printf_i+0x1d2>
 8003e20:	0670      	lsls	r0, r6, #25
 8003e22:	d5fb      	bpl.n	8003e1c <_printf_i+0x1c8>
 8003e24:	8019      	strh	r1, [r3, #0]
 8003e26:	2300      	movs	r3, #0
 8003e28:	6123      	str	r3, [r4, #16]
 8003e2a:	4615      	mov	r5, r2
 8003e2c:	e7ba      	b.n	8003da4 <_printf_i+0x150>
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	1d1a      	adds	r2, r3, #4
 8003e32:	602a      	str	r2, [r5, #0]
 8003e34:	681d      	ldr	r5, [r3, #0]
 8003e36:	6862      	ldr	r2, [r4, #4]
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f7fc f9d0 	bl	80001e0 <memchr>
 8003e40:	b108      	cbz	r0, 8003e46 <_printf_i+0x1f2>
 8003e42:	1b40      	subs	r0, r0, r5
 8003e44:	6060      	str	r0, [r4, #4]
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	6123      	str	r3, [r4, #16]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e50:	e7a8      	b.n	8003da4 <_printf_i+0x150>
 8003e52:	6923      	ldr	r3, [r4, #16]
 8003e54:	462a      	mov	r2, r5
 8003e56:	4649      	mov	r1, r9
 8003e58:	4640      	mov	r0, r8
 8003e5a:	47d0      	blx	sl
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d0ab      	beq.n	8003db8 <_printf_i+0x164>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	079b      	lsls	r3, r3, #30
 8003e64:	d413      	bmi.n	8003e8e <_printf_i+0x23a>
 8003e66:	68e0      	ldr	r0, [r4, #12]
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	4298      	cmp	r0, r3
 8003e6c:	bfb8      	it	lt
 8003e6e:	4618      	movlt	r0, r3
 8003e70:	e7a4      	b.n	8003dbc <_printf_i+0x168>
 8003e72:	2301      	movs	r3, #1
 8003e74:	4632      	mov	r2, r6
 8003e76:	4649      	mov	r1, r9
 8003e78:	4640      	mov	r0, r8
 8003e7a:	47d0      	blx	sl
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d09b      	beq.n	8003db8 <_printf_i+0x164>
 8003e80:	3501      	adds	r5, #1
 8003e82:	68e3      	ldr	r3, [r4, #12]
 8003e84:	9903      	ldr	r1, [sp, #12]
 8003e86:	1a5b      	subs	r3, r3, r1
 8003e88:	42ab      	cmp	r3, r5
 8003e8a:	dcf2      	bgt.n	8003e72 <_printf_i+0x21e>
 8003e8c:	e7eb      	b.n	8003e66 <_printf_i+0x212>
 8003e8e:	2500      	movs	r5, #0
 8003e90:	f104 0619 	add.w	r6, r4, #25
 8003e94:	e7f5      	b.n	8003e82 <_printf_i+0x22e>
 8003e96:	bf00      	nop
 8003e98:	08004eb1 	.word	0x08004eb1
 8003e9c:	08004ec2 	.word	0x08004ec2

08003ea0 <_putc_r>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	460d      	mov	r5, r1
 8003ea4:	4614      	mov	r4, r2
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	b118      	cbz	r0, 8003eb2 <_putc_r+0x12>
 8003eaa:	6983      	ldr	r3, [r0, #24]
 8003eac:	b90b      	cbnz	r3, 8003eb2 <_putc_r+0x12>
 8003eae:	f7ff fbd5 	bl	800365c <__sinit>
 8003eb2:	4b1c      	ldr	r3, [pc, #112]	; (8003f24 <_putc_r+0x84>)
 8003eb4:	429c      	cmp	r4, r3
 8003eb6:	d124      	bne.n	8003f02 <_putc_r+0x62>
 8003eb8:	6874      	ldr	r4, [r6, #4]
 8003eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ebc:	07d8      	lsls	r0, r3, #31
 8003ebe:	d405      	bmi.n	8003ecc <_putc_r+0x2c>
 8003ec0:	89a3      	ldrh	r3, [r4, #12]
 8003ec2:	0599      	lsls	r1, r3, #22
 8003ec4:	d402      	bmi.n	8003ecc <_putc_r+0x2c>
 8003ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ec8:	f7ff fc66 	bl	8003798 <__retarget_lock_acquire_recursive>
 8003ecc:	68a3      	ldr	r3, [r4, #8]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	60a3      	str	r3, [r4, #8]
 8003ed4:	da05      	bge.n	8003ee2 <_putc_r+0x42>
 8003ed6:	69a2      	ldr	r2, [r4, #24]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	db1c      	blt.n	8003f16 <_putc_r+0x76>
 8003edc:	b2eb      	uxtb	r3, r5
 8003ede:	2b0a      	cmp	r3, #10
 8003ee0:	d019      	beq.n	8003f16 <_putc_r+0x76>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	701d      	strb	r5, [r3, #0]
 8003eea:	b2ed      	uxtb	r5, r5
 8003eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eee:	07da      	lsls	r2, r3, #31
 8003ef0:	d405      	bmi.n	8003efe <_putc_r+0x5e>
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	059b      	lsls	r3, r3, #22
 8003ef6:	d402      	bmi.n	8003efe <_putc_r+0x5e>
 8003ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003efa:	f7ff fc4e 	bl	800379a <__retarget_lock_release_recursive>
 8003efe:	4628      	mov	r0, r5
 8003f00:	bd70      	pop	{r4, r5, r6, pc}
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <_putc_r+0x88>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d101      	bne.n	8003f0c <_putc_r+0x6c>
 8003f08:	68b4      	ldr	r4, [r6, #8]
 8003f0a:	e7d6      	b.n	8003eba <_putc_r+0x1a>
 8003f0c:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <_putc_r+0x8c>)
 8003f0e:	429c      	cmp	r4, r3
 8003f10:	bf08      	it	eq
 8003f12:	68f4      	ldreq	r4, [r6, #12]
 8003f14:	e7d1      	b.n	8003eba <_putc_r+0x1a>
 8003f16:	4629      	mov	r1, r5
 8003f18:	4622      	mov	r2, r4
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f85c 	bl	8003fd8 <__swbuf_r>
 8003f20:	4605      	mov	r5, r0
 8003f22:	e7e3      	b.n	8003eec <_putc_r+0x4c>
 8003f24:	08004e60 	.word	0x08004e60
 8003f28:	08004e80 	.word	0x08004e80
 8003f2c:	08004e40 	.word	0x08004e40

08003f30 <_sbrk_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4d06      	ldr	r5, [pc, #24]	; (8003f4c <_sbrk_r+0x1c>)
 8003f34:	2300      	movs	r3, #0
 8003f36:	4604      	mov	r4, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	602b      	str	r3, [r5, #0]
 8003f3c:	f7fd f9aa 	bl	8001294 <_sbrk>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_sbrk_r+0x1a>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_sbrk_r+0x1a>
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	20000298 	.word	0x20000298

08003f50 <__sread>:
 8003f50:	b510      	push	{r4, lr}
 8003f52:	460c      	mov	r4, r1
 8003f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f58:	f000 fab2 	bl	80044c0 <_read_r>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	bfab      	itete	ge
 8003f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f62:	89a3      	ldrhlt	r3, [r4, #12]
 8003f64:	181b      	addge	r3, r3, r0
 8003f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f6a:	bfac      	ite	ge
 8003f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f6e:	81a3      	strhlt	r3, [r4, #12]
 8003f70:	bd10      	pop	{r4, pc}

08003f72 <__swrite>:
 8003f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f76:	461f      	mov	r7, r3
 8003f78:	898b      	ldrh	r3, [r1, #12]
 8003f7a:	05db      	lsls	r3, r3, #23
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	4616      	mov	r6, r2
 8003f82:	d505      	bpl.n	8003f90 <__swrite+0x1e>
 8003f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f88:	2302      	movs	r3, #2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f000 f9c8 	bl	8004320 <_lseek_r>
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f9a:	81a3      	strh	r3, [r4, #12]
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	463b      	mov	r3, r7
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa6:	f000 b869 	b.w	800407c <_write_r>

08003faa <__sseek>:
 8003faa:	b510      	push	{r4, lr}
 8003fac:	460c      	mov	r4, r1
 8003fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb2:	f000 f9b5 	bl	8004320 <_lseek_r>
 8003fb6:	1c43      	adds	r3, r0, #1
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	bf15      	itete	ne
 8003fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fc6:	81a3      	strheq	r3, [r4, #12]
 8003fc8:	bf18      	it	ne
 8003fca:	81a3      	strhne	r3, [r4, #12]
 8003fcc:	bd10      	pop	{r4, pc}

08003fce <__sclose>:
 8003fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd2:	f000 b8d3 	b.w	800417c <_close_r>
	...

08003fd8 <__swbuf_r>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	460e      	mov	r6, r1
 8003fdc:	4614      	mov	r4, r2
 8003fde:	4605      	mov	r5, r0
 8003fe0:	b118      	cbz	r0, 8003fea <__swbuf_r+0x12>
 8003fe2:	6983      	ldr	r3, [r0, #24]
 8003fe4:	b90b      	cbnz	r3, 8003fea <__swbuf_r+0x12>
 8003fe6:	f7ff fb39 	bl	800365c <__sinit>
 8003fea:	4b21      	ldr	r3, [pc, #132]	; (8004070 <__swbuf_r+0x98>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	d12b      	bne.n	8004048 <__swbuf_r+0x70>
 8003ff0:	686c      	ldr	r4, [r5, #4]
 8003ff2:	69a3      	ldr	r3, [r4, #24]
 8003ff4:	60a3      	str	r3, [r4, #8]
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	071a      	lsls	r2, r3, #28
 8003ffa:	d52f      	bpl.n	800405c <__swbuf_r+0x84>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	b36b      	cbz	r3, 800405c <__swbuf_r+0x84>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	1ac0      	subs	r0, r0, r3
 8004006:	6963      	ldr	r3, [r4, #20]
 8004008:	b2f6      	uxtb	r6, r6
 800400a:	4283      	cmp	r3, r0
 800400c:	4637      	mov	r7, r6
 800400e:	dc04      	bgt.n	800401a <__swbuf_r+0x42>
 8004010:	4621      	mov	r1, r4
 8004012:	4628      	mov	r0, r5
 8004014:	f000 f948 	bl	80042a8 <_fflush_r>
 8004018:	bb30      	cbnz	r0, 8004068 <__swbuf_r+0x90>
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	3b01      	subs	r3, #1
 800401e:	60a3      	str	r3, [r4, #8]
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	6022      	str	r2, [r4, #0]
 8004026:	701e      	strb	r6, [r3, #0]
 8004028:	6963      	ldr	r3, [r4, #20]
 800402a:	3001      	adds	r0, #1
 800402c:	4283      	cmp	r3, r0
 800402e:	d004      	beq.n	800403a <__swbuf_r+0x62>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d506      	bpl.n	8004044 <__swbuf_r+0x6c>
 8004036:	2e0a      	cmp	r6, #10
 8004038:	d104      	bne.n	8004044 <__swbuf_r+0x6c>
 800403a:	4621      	mov	r1, r4
 800403c:	4628      	mov	r0, r5
 800403e:	f000 f933 	bl	80042a8 <_fflush_r>
 8004042:	b988      	cbnz	r0, 8004068 <__swbuf_r+0x90>
 8004044:	4638      	mov	r0, r7
 8004046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <__swbuf_r+0x9c>)
 800404a:	429c      	cmp	r4, r3
 800404c:	d101      	bne.n	8004052 <__swbuf_r+0x7a>
 800404e:	68ac      	ldr	r4, [r5, #8]
 8004050:	e7cf      	b.n	8003ff2 <__swbuf_r+0x1a>
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <__swbuf_r+0xa0>)
 8004054:	429c      	cmp	r4, r3
 8004056:	bf08      	it	eq
 8004058:	68ec      	ldreq	r4, [r5, #12]
 800405a:	e7ca      	b.n	8003ff2 <__swbuf_r+0x1a>
 800405c:	4621      	mov	r1, r4
 800405e:	4628      	mov	r0, r5
 8004060:	f000 f81e 	bl	80040a0 <__swsetup_r>
 8004064:	2800      	cmp	r0, #0
 8004066:	d0cb      	beq.n	8004000 <__swbuf_r+0x28>
 8004068:	f04f 37ff 	mov.w	r7, #4294967295
 800406c:	e7ea      	b.n	8004044 <__swbuf_r+0x6c>
 800406e:	bf00      	nop
 8004070:	08004e60 	.word	0x08004e60
 8004074:	08004e80 	.word	0x08004e80
 8004078:	08004e40 	.word	0x08004e40

0800407c <_write_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4d07      	ldr	r5, [pc, #28]	; (800409c <_write_r+0x20>)
 8004080:	4604      	mov	r4, r0
 8004082:	4608      	mov	r0, r1
 8004084:	4611      	mov	r1, r2
 8004086:	2200      	movs	r2, #0
 8004088:	602a      	str	r2, [r5, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	f000 faf3 	bl	8004676 <_write>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_write_r+0x1e>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_write_r+0x1e>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	20000298 	.word	0x20000298

080040a0 <__swsetup_r>:
 80040a0:	4b32      	ldr	r3, [pc, #200]	; (800416c <__swsetup_r+0xcc>)
 80040a2:	b570      	push	{r4, r5, r6, lr}
 80040a4:	681d      	ldr	r5, [r3, #0]
 80040a6:	4606      	mov	r6, r0
 80040a8:	460c      	mov	r4, r1
 80040aa:	b125      	cbz	r5, 80040b6 <__swsetup_r+0x16>
 80040ac:	69ab      	ldr	r3, [r5, #24]
 80040ae:	b913      	cbnz	r3, 80040b6 <__swsetup_r+0x16>
 80040b0:	4628      	mov	r0, r5
 80040b2:	f7ff fad3 	bl	800365c <__sinit>
 80040b6:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <__swsetup_r+0xd0>)
 80040b8:	429c      	cmp	r4, r3
 80040ba:	d10f      	bne.n	80040dc <__swsetup_r+0x3c>
 80040bc:	686c      	ldr	r4, [r5, #4]
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040c4:	0719      	lsls	r1, r3, #28
 80040c6:	d42c      	bmi.n	8004122 <__swsetup_r+0x82>
 80040c8:	06dd      	lsls	r5, r3, #27
 80040ca:	d411      	bmi.n	80040f0 <__swsetup_r+0x50>
 80040cc:	2309      	movs	r3, #9
 80040ce:	6033      	str	r3, [r6, #0]
 80040d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295
 80040da:	e03e      	b.n	800415a <__swsetup_r+0xba>
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <__swsetup_r+0xd4>)
 80040de:	429c      	cmp	r4, r3
 80040e0:	d101      	bne.n	80040e6 <__swsetup_r+0x46>
 80040e2:	68ac      	ldr	r4, [r5, #8]
 80040e4:	e7eb      	b.n	80040be <__swsetup_r+0x1e>
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <__swsetup_r+0xd8>)
 80040e8:	429c      	cmp	r4, r3
 80040ea:	bf08      	it	eq
 80040ec:	68ec      	ldreq	r4, [r5, #12]
 80040ee:	e7e6      	b.n	80040be <__swsetup_r+0x1e>
 80040f0:	0758      	lsls	r0, r3, #29
 80040f2:	d512      	bpl.n	800411a <__swsetup_r+0x7a>
 80040f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040f6:	b141      	cbz	r1, 800410a <__swsetup_r+0x6a>
 80040f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040fc:	4299      	cmp	r1, r3
 80040fe:	d002      	beq.n	8004106 <__swsetup_r+0x66>
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f991 	bl	8004428 <_free_r>
 8004106:	2300      	movs	r3, #0
 8004108:	6363      	str	r3, [r4, #52]	; 0x34
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	2300      	movs	r3, #0
 8004114:	6063      	str	r3, [r4, #4]
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f043 0308 	orr.w	r3, r3, #8
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	b94b      	cbnz	r3, 800413a <__swsetup_r+0x9a>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800412c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004130:	d003      	beq.n	800413a <__swsetup_r+0x9a>
 8004132:	4621      	mov	r1, r4
 8004134:	4630      	mov	r0, r6
 8004136:	f000 f92b 	bl	8004390 <__smakebuf_r>
 800413a:	89a0      	ldrh	r0, [r4, #12]
 800413c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004140:	f010 0301 	ands.w	r3, r0, #1
 8004144:	d00a      	beq.n	800415c <__swsetup_r+0xbc>
 8004146:	2300      	movs	r3, #0
 8004148:	60a3      	str	r3, [r4, #8]
 800414a:	6963      	ldr	r3, [r4, #20]
 800414c:	425b      	negs	r3, r3
 800414e:	61a3      	str	r3, [r4, #24]
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	b943      	cbnz	r3, 8004166 <__swsetup_r+0xc6>
 8004154:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004158:	d1ba      	bne.n	80040d0 <__swsetup_r+0x30>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	0781      	lsls	r1, r0, #30
 800415e:	bf58      	it	pl
 8004160:	6963      	ldrpl	r3, [r4, #20]
 8004162:	60a3      	str	r3, [r4, #8]
 8004164:	e7f4      	b.n	8004150 <__swsetup_r+0xb0>
 8004166:	2000      	movs	r0, #0
 8004168:	e7f7      	b.n	800415a <__swsetup_r+0xba>
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c
 8004170:	08004e60 	.word	0x08004e60
 8004174:	08004e80 	.word	0x08004e80
 8004178:	08004e40 	.word	0x08004e40

0800417c <_close_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d06      	ldr	r5, [pc, #24]	; (8004198 <_close_r+0x1c>)
 8004180:	2300      	movs	r3, #0
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f000 faa6 	bl	80046d8 <_close>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_close_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_close_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	20000298 	.word	0x20000298

0800419c <__sflush_r>:
 800419c:	898a      	ldrh	r2, [r1, #12]
 800419e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a2:	4605      	mov	r5, r0
 80041a4:	0710      	lsls	r0, r2, #28
 80041a6:	460c      	mov	r4, r1
 80041a8:	d458      	bmi.n	800425c <__sflush_r+0xc0>
 80041aa:	684b      	ldr	r3, [r1, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dc05      	bgt.n	80041bc <__sflush_r+0x20>
 80041b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	dc02      	bgt.n	80041bc <__sflush_r+0x20>
 80041b6:	2000      	movs	r0, #0
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041be:	2e00      	cmp	r6, #0
 80041c0:	d0f9      	beq.n	80041b6 <__sflush_r+0x1a>
 80041c2:	2300      	movs	r3, #0
 80041c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041c8:	682f      	ldr	r7, [r5, #0]
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	d032      	beq.n	8004234 <__sflush_r+0x98>
 80041ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	075a      	lsls	r2, r3, #29
 80041d4:	d505      	bpl.n	80041e2 <__sflush_r+0x46>
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	1ac0      	subs	r0, r0, r3
 80041da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041dc:	b10b      	cbz	r3, 80041e2 <__sflush_r+0x46>
 80041de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e0:	1ac0      	subs	r0, r0, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	4602      	mov	r2, r0
 80041e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041e8:	6a21      	ldr	r1, [r4, #32]
 80041ea:	4628      	mov	r0, r5
 80041ec:	47b0      	blx	r6
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	d106      	bne.n	8004202 <__sflush_r+0x66>
 80041f4:	6829      	ldr	r1, [r5, #0]
 80041f6:	291d      	cmp	r1, #29
 80041f8:	d82c      	bhi.n	8004254 <__sflush_r+0xb8>
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <__sflush_r+0x108>)
 80041fc:	40ca      	lsrs	r2, r1
 80041fe:	07d6      	lsls	r6, r2, #31
 8004200:	d528      	bpl.n	8004254 <__sflush_r+0xb8>
 8004202:	2200      	movs	r2, #0
 8004204:	6062      	str	r2, [r4, #4]
 8004206:	04d9      	lsls	r1, r3, #19
 8004208:	6922      	ldr	r2, [r4, #16]
 800420a:	6022      	str	r2, [r4, #0]
 800420c:	d504      	bpl.n	8004218 <__sflush_r+0x7c>
 800420e:	1c42      	adds	r2, r0, #1
 8004210:	d101      	bne.n	8004216 <__sflush_r+0x7a>
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	b903      	cbnz	r3, 8004218 <__sflush_r+0x7c>
 8004216:	6560      	str	r0, [r4, #84]	; 0x54
 8004218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800421a:	602f      	str	r7, [r5, #0]
 800421c:	2900      	cmp	r1, #0
 800421e:	d0ca      	beq.n	80041b6 <__sflush_r+0x1a>
 8004220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004224:	4299      	cmp	r1, r3
 8004226:	d002      	beq.n	800422e <__sflush_r+0x92>
 8004228:	4628      	mov	r0, r5
 800422a:	f000 f8fd 	bl	8004428 <_free_r>
 800422e:	2000      	movs	r0, #0
 8004230:	6360      	str	r0, [r4, #52]	; 0x34
 8004232:	e7c1      	b.n	80041b8 <__sflush_r+0x1c>
 8004234:	6a21      	ldr	r1, [r4, #32]
 8004236:	2301      	movs	r3, #1
 8004238:	4628      	mov	r0, r5
 800423a:	47b0      	blx	r6
 800423c:	1c41      	adds	r1, r0, #1
 800423e:	d1c7      	bne.n	80041d0 <__sflush_r+0x34>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0c4      	beq.n	80041d0 <__sflush_r+0x34>
 8004246:	2b1d      	cmp	r3, #29
 8004248:	d001      	beq.n	800424e <__sflush_r+0xb2>
 800424a:	2b16      	cmp	r3, #22
 800424c:	d101      	bne.n	8004252 <__sflush_r+0xb6>
 800424e:	602f      	str	r7, [r5, #0]
 8004250:	e7b1      	b.n	80041b6 <__sflush_r+0x1a>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	e7ad      	b.n	80041b8 <__sflush_r+0x1c>
 800425c:	690f      	ldr	r7, [r1, #16]
 800425e:	2f00      	cmp	r7, #0
 8004260:	d0a9      	beq.n	80041b6 <__sflush_r+0x1a>
 8004262:	0793      	lsls	r3, r2, #30
 8004264:	680e      	ldr	r6, [r1, #0]
 8004266:	bf08      	it	eq
 8004268:	694b      	ldreq	r3, [r1, #20]
 800426a:	600f      	str	r7, [r1, #0]
 800426c:	bf18      	it	ne
 800426e:	2300      	movne	r3, #0
 8004270:	eba6 0807 	sub.w	r8, r6, r7
 8004274:	608b      	str	r3, [r1, #8]
 8004276:	f1b8 0f00 	cmp.w	r8, #0
 800427a:	dd9c      	ble.n	80041b6 <__sflush_r+0x1a>
 800427c:	6a21      	ldr	r1, [r4, #32]
 800427e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004280:	4643      	mov	r3, r8
 8004282:	463a      	mov	r2, r7
 8004284:	4628      	mov	r0, r5
 8004286:	47b0      	blx	r6
 8004288:	2800      	cmp	r0, #0
 800428a:	dc06      	bgt.n	800429a <__sflush_r+0xfe>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e78e      	b.n	80041b8 <__sflush_r+0x1c>
 800429a:	4407      	add	r7, r0
 800429c:	eba8 0800 	sub.w	r8, r8, r0
 80042a0:	e7e9      	b.n	8004276 <__sflush_r+0xda>
 80042a2:	bf00      	nop
 80042a4:	20400001 	.word	0x20400001

080042a8 <_fflush_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	690b      	ldr	r3, [r1, #16]
 80042ac:	4605      	mov	r5, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	b913      	cbnz	r3, 80042b8 <_fflush_r+0x10>
 80042b2:	2500      	movs	r5, #0
 80042b4:	4628      	mov	r0, r5
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	b118      	cbz	r0, 80042c2 <_fflush_r+0x1a>
 80042ba:	6983      	ldr	r3, [r0, #24]
 80042bc:	b90b      	cbnz	r3, 80042c2 <_fflush_r+0x1a>
 80042be:	f7ff f9cd 	bl	800365c <__sinit>
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <_fflush_r+0x6c>)
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d11b      	bne.n	8004300 <_fflush_r+0x58>
 80042c8:	686c      	ldr	r4, [r5, #4]
 80042ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <_fflush_r+0xa>
 80042d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042d4:	07d0      	lsls	r0, r2, #31
 80042d6:	d404      	bmi.n	80042e2 <_fflush_r+0x3a>
 80042d8:	0599      	lsls	r1, r3, #22
 80042da:	d402      	bmi.n	80042e2 <_fflush_r+0x3a>
 80042dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042de:	f7ff fa5b 	bl	8003798 <__retarget_lock_acquire_recursive>
 80042e2:	4628      	mov	r0, r5
 80042e4:	4621      	mov	r1, r4
 80042e6:	f7ff ff59 	bl	800419c <__sflush_r>
 80042ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042ec:	07da      	lsls	r2, r3, #31
 80042ee:	4605      	mov	r5, r0
 80042f0:	d4e0      	bmi.n	80042b4 <_fflush_r+0xc>
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	059b      	lsls	r3, r3, #22
 80042f6:	d4dd      	bmi.n	80042b4 <_fflush_r+0xc>
 80042f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042fa:	f7ff fa4e 	bl	800379a <__retarget_lock_release_recursive>
 80042fe:	e7d9      	b.n	80042b4 <_fflush_r+0xc>
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <_fflush_r+0x70>)
 8004302:	429c      	cmp	r4, r3
 8004304:	d101      	bne.n	800430a <_fflush_r+0x62>
 8004306:	68ac      	ldr	r4, [r5, #8]
 8004308:	e7df      	b.n	80042ca <_fflush_r+0x22>
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <_fflush_r+0x74>)
 800430c:	429c      	cmp	r4, r3
 800430e:	bf08      	it	eq
 8004310:	68ec      	ldreq	r4, [r5, #12]
 8004312:	e7da      	b.n	80042ca <_fflush_r+0x22>
 8004314:	08004e60 	.word	0x08004e60
 8004318:	08004e80 	.word	0x08004e80
 800431c:	08004e40 	.word	0x08004e40

08004320 <_lseek_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d07      	ldr	r5, [pc, #28]	; (8004340 <_lseek_r+0x20>)
 8004324:	4604      	mov	r4, r0
 8004326:	4608      	mov	r0, r1
 8004328:	4611      	mov	r1, r2
 800432a:	2200      	movs	r2, #0
 800432c:	602a      	str	r2, [r5, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	f000 f98f 	bl	8004652 <_lseek>
 8004334:	1c43      	adds	r3, r0, #1
 8004336:	d102      	bne.n	800433e <_lseek_r+0x1e>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	b103      	cbz	r3, 800433e <_lseek_r+0x1e>
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	20000298 	.word	0x20000298

08004344 <__swhatbuf_r>:
 8004344:	b570      	push	{r4, r5, r6, lr}
 8004346:	460e      	mov	r6, r1
 8004348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434c:	2900      	cmp	r1, #0
 800434e:	b096      	sub	sp, #88	; 0x58
 8004350:	4614      	mov	r4, r2
 8004352:	461d      	mov	r5, r3
 8004354:	da08      	bge.n	8004368 <__swhatbuf_r+0x24>
 8004356:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	061a      	lsls	r2, r3, #24
 8004360:	d410      	bmi.n	8004384 <__swhatbuf_r+0x40>
 8004362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004366:	e00e      	b.n	8004386 <__swhatbuf_r+0x42>
 8004368:	466a      	mov	r2, sp
 800436a:	f000 f8bb 	bl	80044e4 <_fstat_r>
 800436e:	2800      	cmp	r0, #0
 8004370:	dbf1      	blt.n	8004356 <__swhatbuf_r+0x12>
 8004372:	9a01      	ldr	r2, [sp, #4]
 8004374:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004378:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800437c:	425a      	negs	r2, r3
 800437e:	415a      	adcs	r2, r3
 8004380:	602a      	str	r2, [r5, #0]
 8004382:	e7ee      	b.n	8004362 <__swhatbuf_r+0x1e>
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	2000      	movs	r0, #0
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	b016      	add	sp, #88	; 0x58
 800438c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004390 <__smakebuf_r>:
 8004390:	898b      	ldrh	r3, [r1, #12]
 8004392:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004394:	079d      	lsls	r5, r3, #30
 8004396:	4606      	mov	r6, r0
 8004398:	460c      	mov	r4, r1
 800439a:	d507      	bpl.n	80043ac <__smakebuf_r+0x1c>
 800439c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043a0:	6023      	str	r3, [r4, #0]
 80043a2:	6123      	str	r3, [r4, #16]
 80043a4:	2301      	movs	r3, #1
 80043a6:	6163      	str	r3, [r4, #20]
 80043a8:	b002      	add	sp, #8
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	ab01      	add	r3, sp, #4
 80043ae:	466a      	mov	r2, sp
 80043b0:	f7ff ffc8 	bl	8004344 <__swhatbuf_r>
 80043b4:	9900      	ldr	r1, [sp, #0]
 80043b6:	4605      	mov	r5, r0
 80043b8:	4630      	mov	r0, r6
 80043ba:	f7ff fa0f 	bl	80037dc <_malloc_r>
 80043be:	b948      	cbnz	r0, 80043d4 <__smakebuf_r+0x44>
 80043c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043c4:	059a      	lsls	r2, r3, #22
 80043c6:	d4ef      	bmi.n	80043a8 <__smakebuf_r+0x18>
 80043c8:	f023 0303 	bic.w	r3, r3, #3
 80043cc:	f043 0302 	orr.w	r3, r3, #2
 80043d0:	81a3      	strh	r3, [r4, #12]
 80043d2:	e7e3      	b.n	800439c <__smakebuf_r+0xc>
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <__smakebuf_r+0x7c>)
 80043d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	6020      	str	r0, [r4, #0]
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	81a3      	strh	r3, [r4, #12]
 80043e2:	9b00      	ldr	r3, [sp, #0]
 80043e4:	6163      	str	r3, [r4, #20]
 80043e6:	9b01      	ldr	r3, [sp, #4]
 80043e8:	6120      	str	r0, [r4, #16]
 80043ea:	b15b      	cbz	r3, 8004404 <__smakebuf_r+0x74>
 80043ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f0:	4630      	mov	r0, r6
 80043f2:	f000 f889 	bl	8004508 <_isatty_r>
 80043f6:	b128      	cbz	r0, 8004404 <__smakebuf_r+0x74>
 80043f8:	89a3      	ldrh	r3, [r4, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	81a3      	strh	r3, [r4, #12]
 8004404:	89a0      	ldrh	r0, [r4, #12]
 8004406:	4305      	orrs	r5, r0
 8004408:	81a5      	strh	r5, [r4, #12]
 800440a:	e7cd      	b.n	80043a8 <__smakebuf_r+0x18>
 800440c:	080035f5 	.word	0x080035f5

08004410 <__malloc_lock>:
 8004410:	4801      	ldr	r0, [pc, #4]	; (8004418 <__malloc_lock+0x8>)
 8004412:	f7ff b9c1 	b.w	8003798 <__retarget_lock_acquire_recursive>
 8004416:	bf00      	nop
 8004418:	2000028c 	.word	0x2000028c

0800441c <__malloc_unlock>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__malloc_unlock+0x8>)
 800441e:	f7ff b9bc 	b.w	800379a <__retarget_lock_release_recursive>
 8004422:	bf00      	nop
 8004424:	2000028c 	.word	0x2000028c

08004428 <_free_r>:
 8004428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800442a:	2900      	cmp	r1, #0
 800442c:	d044      	beq.n	80044b8 <_free_r+0x90>
 800442e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004432:	9001      	str	r0, [sp, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f1a1 0404 	sub.w	r4, r1, #4
 800443a:	bfb8      	it	lt
 800443c:	18e4      	addlt	r4, r4, r3
 800443e:	f7ff ffe7 	bl	8004410 <__malloc_lock>
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <_free_r+0x94>)
 8004444:	9801      	ldr	r0, [sp, #4]
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	b933      	cbnz	r3, 8004458 <_free_r+0x30>
 800444a:	6063      	str	r3, [r4, #4]
 800444c:	6014      	str	r4, [r2, #0]
 800444e:	b003      	add	sp, #12
 8004450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004454:	f7ff bfe2 	b.w	800441c <__malloc_unlock>
 8004458:	42a3      	cmp	r3, r4
 800445a:	d908      	bls.n	800446e <_free_r+0x46>
 800445c:	6825      	ldr	r5, [r4, #0]
 800445e:	1961      	adds	r1, r4, r5
 8004460:	428b      	cmp	r3, r1
 8004462:	bf01      	itttt	eq
 8004464:	6819      	ldreq	r1, [r3, #0]
 8004466:	685b      	ldreq	r3, [r3, #4]
 8004468:	1949      	addeq	r1, r1, r5
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	e7ed      	b.n	800444a <_free_r+0x22>
 800446e:	461a      	mov	r2, r3
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b10b      	cbz	r3, 8004478 <_free_r+0x50>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d9fa      	bls.n	800446e <_free_r+0x46>
 8004478:	6811      	ldr	r1, [r2, #0]
 800447a:	1855      	adds	r5, r2, r1
 800447c:	42a5      	cmp	r5, r4
 800447e:	d10b      	bne.n	8004498 <_free_r+0x70>
 8004480:	6824      	ldr	r4, [r4, #0]
 8004482:	4421      	add	r1, r4
 8004484:	1854      	adds	r4, r2, r1
 8004486:	42a3      	cmp	r3, r4
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	d1e0      	bne.n	800444e <_free_r+0x26>
 800448c:	681c      	ldr	r4, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	6053      	str	r3, [r2, #4]
 8004492:	4421      	add	r1, r4
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	e7da      	b.n	800444e <_free_r+0x26>
 8004498:	d902      	bls.n	80044a0 <_free_r+0x78>
 800449a:	230c      	movs	r3, #12
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	e7d6      	b.n	800444e <_free_r+0x26>
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1961      	adds	r1, r4, r5
 80044a4:	428b      	cmp	r3, r1
 80044a6:	bf04      	itt	eq
 80044a8:	6819      	ldreq	r1, [r3, #0]
 80044aa:	685b      	ldreq	r3, [r3, #4]
 80044ac:	6063      	str	r3, [r4, #4]
 80044ae:	bf04      	itt	eq
 80044b0:	1949      	addeq	r1, r1, r5
 80044b2:	6021      	streq	r1, [r4, #0]
 80044b4:	6054      	str	r4, [r2, #4]
 80044b6:	e7ca      	b.n	800444e <_free_r+0x26>
 80044b8:	b003      	add	sp, #12
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	20000290 	.word	0x20000290

080044c0 <_read_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d07      	ldr	r5, [pc, #28]	; (80044e0 <_read_r+0x20>)
 80044c4:	4604      	mov	r4, r0
 80044c6:	4608      	mov	r0, r1
 80044c8:	4611      	mov	r1, r2
 80044ca:	2200      	movs	r2, #0
 80044cc:	602a      	str	r2, [r5, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 f867 	bl	80045a2 <_read>
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	d102      	bne.n	80044de <_read_r+0x1e>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	b103      	cbz	r3, 80044de <_read_r+0x1e>
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	20000298 	.word	0x20000298

080044e4 <_fstat_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4d07      	ldr	r5, [pc, #28]	; (8004504 <_fstat_r+0x20>)
 80044e8:	2300      	movs	r3, #0
 80044ea:	4604      	mov	r4, r0
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	f000 f938 	bl	8004766 <_fstat>
 80044f6:	1c43      	adds	r3, r0, #1
 80044f8:	d102      	bne.n	8004500 <_fstat_r+0x1c>
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	b103      	cbz	r3, 8004500 <_fstat_r+0x1c>
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	bd38      	pop	{r3, r4, r5, pc}
 8004502:	bf00      	nop
 8004504:	20000298 	.word	0x20000298

08004508 <_isatty_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4d06      	ldr	r5, [pc, #24]	; (8004524 <_isatty_r+0x1c>)
 800450c:	2300      	movs	r3, #0
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f000 fa8e 	bl	8004a34 <_isatty>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_isatty_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_isatty_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	20000298 	.word	0x20000298

08004528 <findslot>:
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <findslot+0x2c>)
 800452a:	b510      	push	{r4, lr}
 800452c:	4604      	mov	r4, r0
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	b118      	cbz	r0, 800453a <findslot+0x12>
 8004532:	6983      	ldr	r3, [r0, #24]
 8004534:	b90b      	cbnz	r3, 800453a <findslot+0x12>
 8004536:	f7ff f891 	bl	800365c <__sinit>
 800453a:	2c13      	cmp	r4, #19
 800453c:	d807      	bhi.n	800454e <findslot+0x26>
 800453e:	4806      	ldr	r0, [pc, #24]	; (8004558 <findslot+0x30>)
 8004540:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004544:	3201      	adds	r2, #1
 8004546:	d002      	beq.n	800454e <findslot+0x26>
 8004548:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800454c:	bd10      	pop	{r4, pc}
 800454e:	2000      	movs	r0, #0
 8004550:	e7fc      	b.n	800454c <findslot+0x24>
 8004552:	bf00      	nop
 8004554:	2000000c 	.word	0x2000000c
 8004558:	200002a8 	.word	0x200002a8

0800455c <error>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	4604      	mov	r4, r0
 8004560:	f7fe ffc4 	bl	80034ec <__errno>
 8004564:	2613      	movs	r6, #19
 8004566:	4605      	mov	r5, r0
 8004568:	2700      	movs	r7, #0
 800456a:	4630      	mov	r0, r6
 800456c:	4639      	mov	r1, r7
 800456e:	beab      	bkpt	0x00ab
 8004570:	4606      	mov	r6, r0
 8004572:	602e      	str	r6, [r5, #0]
 8004574:	4620      	mov	r0, r4
 8004576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004578 <checkerror>:
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d101      	bne.n	8004580 <checkerror+0x8>
 800457c:	f7ff bfee 	b.w	800455c <error>
 8004580:	4770      	bx	lr

08004582 <_swiread>:
 8004582:	b530      	push	{r4, r5, lr}
 8004584:	b085      	sub	sp, #20
 8004586:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800458a:	9203      	str	r2, [sp, #12]
 800458c:	2406      	movs	r4, #6
 800458e:	ad01      	add	r5, sp, #4
 8004590:	4620      	mov	r0, r4
 8004592:	4629      	mov	r1, r5
 8004594:	beab      	bkpt	0x00ab
 8004596:	4604      	mov	r4, r0
 8004598:	4620      	mov	r0, r4
 800459a:	f7ff ffed 	bl	8004578 <checkerror>
 800459e:	b005      	add	sp, #20
 80045a0:	bd30      	pop	{r4, r5, pc}

080045a2 <_read>:
 80045a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045a4:	4615      	mov	r5, r2
 80045a6:	9101      	str	r1, [sp, #4]
 80045a8:	f7ff ffbe 	bl	8004528 <findslot>
 80045ac:	9901      	ldr	r1, [sp, #4]
 80045ae:	4604      	mov	r4, r0
 80045b0:	b938      	cbnz	r0, 80045c2 <_read+0x20>
 80045b2:	f7fe ff9b 	bl	80034ec <__errno>
 80045b6:	2309      	movs	r3, #9
 80045b8:	6003      	str	r3, [r0, #0]
 80045ba:	f04f 30ff 	mov.w	r0, #4294967295
 80045be:	b003      	add	sp, #12
 80045c0:	bd30      	pop	{r4, r5, pc}
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	462a      	mov	r2, r5
 80045c6:	f7ff ffdc 	bl	8004582 <_swiread>
 80045ca:	1c43      	adds	r3, r0, #1
 80045cc:	d0f7      	beq.n	80045be <_read+0x1c>
 80045ce:	6863      	ldr	r3, [r4, #4]
 80045d0:	1a2a      	subs	r2, r5, r0
 80045d2:	4413      	add	r3, r2
 80045d4:	6063      	str	r3, [r4, #4]
 80045d6:	4610      	mov	r0, r2
 80045d8:	e7f1      	b.n	80045be <_read+0x1c>

080045da <_swilseek>:
 80045da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045dc:	460c      	mov	r4, r1
 80045de:	4616      	mov	r6, r2
 80045e0:	f7ff ffa2 	bl	8004528 <findslot>
 80045e4:	4605      	mov	r5, r0
 80045e6:	b940      	cbnz	r0, 80045fa <_swilseek+0x20>
 80045e8:	f7fe ff80 	bl	80034ec <__errno>
 80045ec:	2309      	movs	r3, #9
 80045ee:	6003      	str	r3, [r0, #0]
 80045f0:	f04f 34ff 	mov.w	r4, #4294967295
 80045f4:	4620      	mov	r0, r4
 80045f6:	b003      	add	sp, #12
 80045f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fa:	2e02      	cmp	r6, #2
 80045fc:	d903      	bls.n	8004606 <_swilseek+0x2c>
 80045fe:	f7fe ff75 	bl	80034ec <__errno>
 8004602:	2316      	movs	r3, #22
 8004604:	e7f3      	b.n	80045ee <_swilseek+0x14>
 8004606:	2e01      	cmp	r6, #1
 8004608:	d112      	bne.n	8004630 <_swilseek+0x56>
 800460a:	6843      	ldr	r3, [r0, #4]
 800460c:	18e4      	adds	r4, r4, r3
 800460e:	d4f6      	bmi.n	80045fe <_swilseek+0x24>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	260a      	movs	r6, #10
 8004614:	e9cd 3400 	strd	r3, r4, [sp]
 8004618:	466f      	mov	r7, sp
 800461a:	4630      	mov	r0, r6
 800461c:	4639      	mov	r1, r7
 800461e:	beab      	bkpt	0x00ab
 8004620:	4606      	mov	r6, r0
 8004622:	4630      	mov	r0, r6
 8004624:	f7ff ffa8 	bl	8004578 <checkerror>
 8004628:	2800      	cmp	r0, #0
 800462a:	dbe1      	blt.n	80045f0 <_swilseek+0x16>
 800462c:	606c      	str	r4, [r5, #4]
 800462e:	e7e1      	b.n	80045f4 <_swilseek+0x1a>
 8004630:	2e02      	cmp	r6, #2
 8004632:	d1ed      	bne.n	8004610 <_swilseek+0x36>
 8004634:	6803      	ldr	r3, [r0, #0]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	260c      	movs	r6, #12
 800463a:	466f      	mov	r7, sp
 800463c:	4630      	mov	r0, r6
 800463e:	4639      	mov	r1, r7
 8004640:	beab      	bkpt	0x00ab
 8004642:	4606      	mov	r6, r0
 8004644:	4630      	mov	r0, r6
 8004646:	f7ff ff97 	bl	8004578 <checkerror>
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	d0d0      	beq.n	80045f0 <_swilseek+0x16>
 800464e:	4404      	add	r4, r0
 8004650:	e7de      	b.n	8004610 <_swilseek+0x36>

08004652 <_lseek>:
 8004652:	f7ff bfc2 	b.w	80045da <_swilseek>

08004656 <_swiwrite>:
 8004656:	b530      	push	{r4, r5, lr}
 8004658:	b085      	sub	sp, #20
 800465a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800465e:	9203      	str	r2, [sp, #12]
 8004660:	2405      	movs	r4, #5
 8004662:	ad01      	add	r5, sp, #4
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	beab      	bkpt	0x00ab
 800466a:	4604      	mov	r4, r0
 800466c:	4620      	mov	r0, r4
 800466e:	f7ff ff83 	bl	8004578 <checkerror>
 8004672:	b005      	add	sp, #20
 8004674:	bd30      	pop	{r4, r5, pc}

08004676 <_write>:
 8004676:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004678:	4615      	mov	r5, r2
 800467a:	9101      	str	r1, [sp, #4]
 800467c:	f7ff ff54 	bl	8004528 <findslot>
 8004680:	9901      	ldr	r1, [sp, #4]
 8004682:	4604      	mov	r4, r0
 8004684:	b930      	cbnz	r0, 8004694 <_write+0x1e>
 8004686:	f7fe ff31 	bl	80034ec <__errno>
 800468a:	2309      	movs	r3, #9
 800468c:	6003      	str	r3, [r0, #0]
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	e012      	b.n	80046ba <_write+0x44>
 8004694:	6800      	ldr	r0, [r0, #0]
 8004696:	462a      	mov	r2, r5
 8004698:	f7ff ffdd 	bl	8004656 <_swiwrite>
 800469c:	2800      	cmp	r0, #0
 800469e:	dbf6      	blt.n	800468e <_write+0x18>
 80046a0:	6862      	ldr	r2, [r4, #4]
 80046a2:	1a2b      	subs	r3, r5, r0
 80046a4:	441a      	add	r2, r3
 80046a6:	42a8      	cmp	r0, r5
 80046a8:	6062      	str	r2, [r4, #4]
 80046aa:	d105      	bne.n	80046b8 <_write+0x42>
 80046ac:	2000      	movs	r0, #0
 80046ae:	b003      	add	sp, #12
 80046b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046b4:	f7ff bf52 	b.w	800455c <error>
 80046b8:	4618      	mov	r0, r3
 80046ba:	b003      	add	sp, #12
 80046bc:	bd30      	pop	{r4, r5, pc}

080046be <_swiclose>:
 80046be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046c0:	2402      	movs	r4, #2
 80046c2:	9001      	str	r0, [sp, #4]
 80046c4:	ad01      	add	r5, sp, #4
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	beab      	bkpt	0x00ab
 80046cc:	4604      	mov	r4, r0
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7ff ff52 	bl	8004578 <checkerror>
 80046d4:	b003      	add	sp, #12
 80046d6:	bd30      	pop	{r4, r5, pc}

080046d8 <_close>:
 80046d8:	b538      	push	{r3, r4, r5, lr}
 80046da:	4605      	mov	r5, r0
 80046dc:	f7ff ff24 	bl	8004528 <findslot>
 80046e0:	4604      	mov	r4, r0
 80046e2:	b930      	cbnz	r0, 80046f2 <_close+0x1a>
 80046e4:	f7fe ff02 	bl	80034ec <__errno>
 80046e8:	2309      	movs	r3, #9
 80046ea:	6003      	str	r3, [r0, #0]
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	3d01      	subs	r5, #1
 80046f4:	2d01      	cmp	r5, #1
 80046f6:	d809      	bhi.n	800470c <_close+0x34>
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <_close+0x48>)
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d104      	bne.n	800470c <_close+0x34>
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	6003      	str	r3, [r0, #0]
 8004708:	2000      	movs	r0, #0
 800470a:	e7f1      	b.n	80046f0 <_close+0x18>
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	f7ff ffd6 	bl	80046be <_swiclose>
 8004712:	2800      	cmp	r0, #0
 8004714:	d1ec      	bne.n	80046f0 <_close+0x18>
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	e7e8      	b.n	80046f0 <_close+0x18>
 800471e:	bf00      	nop
 8004720:	200002a8 	.word	0x200002a8

08004724 <_swistat>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	460c      	mov	r4, r1
 8004728:	f7ff fefe 	bl	8004528 <findslot>
 800472c:	4605      	mov	r5, r0
 800472e:	b930      	cbnz	r0, 800473e <_swistat+0x1a>
 8004730:	f7fe fedc 	bl	80034ec <__errno>
 8004734:	2309      	movs	r3, #9
 8004736:	6003      	str	r3, [r0, #0]
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	bd70      	pop	{r4, r5, r6, pc}
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800474a:	64a3      	str	r3, [r4, #72]	; 0x48
 800474c:	260c      	movs	r6, #12
 800474e:	4630      	mov	r0, r6
 8004750:	4629      	mov	r1, r5
 8004752:	beab      	bkpt	0x00ab
 8004754:	4605      	mov	r5, r0
 8004756:	4628      	mov	r0, r5
 8004758:	f7ff ff0e 	bl	8004578 <checkerror>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	bf1c      	itt	ne
 8004760:	6120      	strne	r0, [r4, #16]
 8004762:	2000      	movne	r0, #0
 8004764:	e7ea      	b.n	800473c <_swistat+0x18>

08004766 <_fstat>:
 8004766:	460b      	mov	r3, r1
 8004768:	b510      	push	{r4, lr}
 800476a:	2100      	movs	r1, #0
 800476c:	4604      	mov	r4, r0
 800476e:	2258      	movs	r2, #88	; 0x58
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fee5 	bl	8003540 <memset>
 8004776:	4601      	mov	r1, r0
 8004778:	4620      	mov	r0, r4
 800477a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800477e:	f7ff bfd1 	b.w	8004724 <_swistat>

08004782 <_stat>:
 8004782:	b538      	push	{r3, r4, r5, lr}
 8004784:	460d      	mov	r5, r1
 8004786:	4604      	mov	r4, r0
 8004788:	2258      	movs	r2, #88	; 0x58
 800478a:	2100      	movs	r1, #0
 800478c:	4628      	mov	r0, r5
 800478e:	f7fe fed7 	bl	8003540 <memset>
 8004792:	4620      	mov	r0, r4
 8004794:	2100      	movs	r1, #0
 8004796:	f000 f811 	bl	80047bc <_swiopen>
 800479a:	1c43      	adds	r3, r0, #1
 800479c:	4604      	mov	r4, r0
 800479e:	d00b      	beq.n	80047b8 <_stat+0x36>
 80047a0:	686b      	ldr	r3, [r5, #4]
 80047a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047a6:	606b      	str	r3, [r5, #4]
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7ff ffbb 	bl	8004724 <_swistat>
 80047ae:	4605      	mov	r5, r0
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7ff ff91 	bl	80046d8 <_close>
 80047b6:	462c      	mov	r4, r5
 80047b8:	4620      	mov	r0, r4
 80047ba:	bd38      	pop	{r3, r4, r5, pc}

080047bc <_swiopen>:
 80047bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047c0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800486c <_swiopen+0xb0>
 80047c4:	b097      	sub	sp, #92	; 0x5c
 80047c6:	4607      	mov	r7, r0
 80047c8:	460e      	mov	r6, r1
 80047ca:	2500      	movs	r5, #0
 80047cc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80047d0:	1c61      	adds	r1, r4, #1
 80047d2:	d037      	beq.n	8004844 <_swiopen+0x88>
 80047d4:	3501      	adds	r5, #1
 80047d6:	2d14      	cmp	r5, #20
 80047d8:	d1f8      	bne.n	80047cc <_swiopen+0x10>
 80047da:	f7fe fe87 	bl	80034ec <__errno>
 80047de:	2318      	movs	r3, #24
 80047e0:	6003      	str	r3, [r0, #0]
 80047e2:	f04f 34ff 	mov.w	r4, #4294967295
 80047e6:	e03d      	b.n	8004864 <_swiopen+0xa8>
 80047e8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80047ec:	f240 6301 	movw	r3, #1537	; 0x601
 80047f0:	07b2      	lsls	r2, r6, #30
 80047f2:	bf48      	it	mi
 80047f4:	f044 0402 	orrmi.w	r4, r4, #2
 80047f8:	421e      	tst	r6, r3
 80047fa:	bf18      	it	ne
 80047fc:	f044 0404 	orrne.w	r4, r4, #4
 8004800:	0733      	lsls	r3, r6, #28
 8004802:	bf48      	it	mi
 8004804:	f024 0404 	bicmi.w	r4, r4, #4
 8004808:	4638      	mov	r0, r7
 800480a:	bf48      	it	mi
 800480c:	f044 0408 	orrmi.w	r4, r4, #8
 8004810:	9700      	str	r7, [sp, #0]
 8004812:	f7fb fd35 	bl	8000280 <strlen>
 8004816:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800481a:	2401      	movs	r4, #1
 800481c:	4620      	mov	r0, r4
 800481e:	4649      	mov	r1, r9
 8004820:	beab      	bkpt	0x00ab
 8004822:	4604      	mov	r4, r0
 8004824:	2c00      	cmp	r4, #0
 8004826:	db08      	blt.n	800483a <_swiopen+0x7e>
 8004828:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800482c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004830:	2300      	movs	r3, #0
 8004832:	f8c8 3004 	str.w	r3, [r8, #4]
 8004836:	462c      	mov	r4, r5
 8004838:	e014      	b.n	8004864 <_swiopen+0xa8>
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff fe8e 	bl	800455c <error>
 8004840:	4604      	mov	r4, r0
 8004842:	e00f      	b.n	8004864 <_swiopen+0xa8>
 8004844:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8004848:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800484c:	46e9      	mov	r9, sp
 800484e:	d1cb      	bne.n	80047e8 <_swiopen+0x2c>
 8004850:	4649      	mov	r1, r9
 8004852:	4638      	mov	r0, r7
 8004854:	f7ff ff95 	bl	8004782 <_stat>
 8004858:	3001      	adds	r0, #1
 800485a:	d0c5      	beq.n	80047e8 <_swiopen+0x2c>
 800485c:	f7fe fe46 	bl	80034ec <__errno>
 8004860:	2311      	movs	r3, #17
 8004862:	6003      	str	r3, [r0, #0]
 8004864:	4620      	mov	r0, r4
 8004866:	b017      	add	sp, #92	; 0x5c
 8004868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800486c:	200002a8 	.word	0x200002a8

08004870 <_get_semihosting_exts>:
 8004870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004874:	4606      	mov	r6, r0
 8004876:	460f      	mov	r7, r1
 8004878:	482a      	ldr	r0, [pc, #168]	; (8004924 <_get_semihosting_exts+0xb4>)
 800487a:	2100      	movs	r1, #0
 800487c:	4615      	mov	r5, r2
 800487e:	f7ff ff9d 	bl	80047bc <_swiopen>
 8004882:	462a      	mov	r2, r5
 8004884:	4604      	mov	r4, r0
 8004886:	2100      	movs	r1, #0
 8004888:	4630      	mov	r0, r6
 800488a:	f7fe fe59 	bl	8003540 <memset>
 800488e:	1c63      	adds	r3, r4, #1
 8004890:	d016      	beq.n	80048c0 <_get_semihosting_exts+0x50>
 8004892:	4620      	mov	r0, r4
 8004894:	f7ff fe48 	bl	8004528 <findslot>
 8004898:	f04f 090c 	mov.w	r9, #12
 800489c:	4680      	mov	r8, r0
 800489e:	4648      	mov	r0, r9
 80048a0:	4641      	mov	r1, r8
 80048a2:	beab      	bkpt	0x00ab
 80048a4:	4680      	mov	r8, r0
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7ff fe66 	bl	8004578 <checkerror>
 80048ac:	2803      	cmp	r0, #3
 80048ae:	dd02      	ble.n	80048b6 <_get_semihosting_exts+0x46>
 80048b0:	1ec3      	subs	r3, r0, #3
 80048b2:	42ab      	cmp	r3, r5
 80048b4:	dc08      	bgt.n	80048c8 <_get_semihosting_exts+0x58>
 80048b6:	4620      	mov	r0, r4
 80048b8:	f7ff ff0e 	bl	80046d8 <_close>
 80048bc:	f04f 34ff 	mov.w	r4, #4294967295
 80048c0:	4620      	mov	r0, r4
 80048c2:	b003      	add	sp, #12
 80048c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048c8:	2204      	movs	r2, #4
 80048ca:	eb0d 0102 	add.w	r1, sp, r2
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7ff fe67 	bl	80045a2 <_read>
 80048d4:	2803      	cmp	r0, #3
 80048d6:	ddee      	ble.n	80048b6 <_get_semihosting_exts+0x46>
 80048d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80048dc:	2b53      	cmp	r3, #83	; 0x53
 80048de:	d1ea      	bne.n	80048b6 <_get_semihosting_exts+0x46>
 80048e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80048e4:	2b48      	cmp	r3, #72	; 0x48
 80048e6:	d1e6      	bne.n	80048b6 <_get_semihosting_exts+0x46>
 80048e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80048ec:	2b46      	cmp	r3, #70	; 0x46
 80048ee:	d1e2      	bne.n	80048b6 <_get_semihosting_exts+0x46>
 80048f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048f4:	2b42      	cmp	r3, #66	; 0x42
 80048f6:	d1de      	bne.n	80048b6 <_get_semihosting_exts+0x46>
 80048f8:	2201      	movs	r2, #1
 80048fa:	4639      	mov	r1, r7
 80048fc:	4620      	mov	r0, r4
 80048fe:	f7ff fe6c 	bl	80045da <_swilseek>
 8004902:	2800      	cmp	r0, #0
 8004904:	dbd7      	blt.n	80048b6 <_get_semihosting_exts+0x46>
 8004906:	462a      	mov	r2, r5
 8004908:	4631      	mov	r1, r6
 800490a:	4620      	mov	r0, r4
 800490c:	f7ff fe49 	bl	80045a2 <_read>
 8004910:	4605      	mov	r5, r0
 8004912:	4620      	mov	r0, r4
 8004914:	f7ff fee0 	bl	80046d8 <_close>
 8004918:	4628      	mov	r0, r5
 800491a:	f7ff fe2d 	bl	8004578 <checkerror>
 800491e:	4604      	mov	r4, r0
 8004920:	e7ce      	b.n	80048c0 <_get_semihosting_exts+0x50>
 8004922:	bf00      	nop
 8004924:	08004ed3 	.word	0x08004ed3

08004928 <initialise_semihosting_exts>:
 8004928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800492a:	4d0a      	ldr	r5, [pc, #40]	; (8004954 <initialise_semihosting_exts+0x2c>)
 800492c:	4c0a      	ldr	r4, [pc, #40]	; (8004958 <initialise_semihosting_exts+0x30>)
 800492e:	2100      	movs	r1, #0
 8004930:	2201      	movs	r2, #1
 8004932:	a801      	add	r0, sp, #4
 8004934:	6029      	str	r1, [r5, #0]
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	f7ff ff9a 	bl	8004870 <_get_semihosting_exts>
 800493c:	2800      	cmp	r0, #0
 800493e:	dd07      	ble.n	8004950 <initialise_semihosting_exts+0x28>
 8004940:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004944:	f003 0201 	and.w	r2, r3, #1
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	b003      	add	sp, #12
 8004952:	bd30      	pop	{r4, r5, pc}
 8004954:	20000070 	.word	0x20000070
 8004958:	20000074 	.word	0x20000074

0800495c <_has_ext_stdout_stderr>:
 800495c:	b510      	push	{r4, lr}
 800495e:	4c04      	ldr	r4, [pc, #16]	; (8004970 <_has_ext_stdout_stderr+0x14>)
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	da01      	bge.n	800496a <_has_ext_stdout_stderr+0xe>
 8004966:	f7ff ffdf 	bl	8004928 <initialise_semihosting_exts>
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	bd10      	pop	{r4, pc}
 800496e:	bf00      	nop
 8004970:	20000074 	.word	0x20000074

08004974 <initialise_monitor_handles>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	b085      	sub	sp, #20
 800497a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004a2c <initialise_monitor_handles+0xb8>
 800497e:	f8cd 9004 	str.w	r9, [sp, #4]
 8004982:	2303      	movs	r3, #3
 8004984:	2400      	movs	r4, #0
 8004986:	9303      	str	r3, [sp, #12]
 8004988:	af01      	add	r7, sp, #4
 800498a:	9402      	str	r4, [sp, #8]
 800498c:	2501      	movs	r5, #1
 800498e:	4628      	mov	r0, r5
 8004990:	4639      	mov	r1, r7
 8004992:	beab      	bkpt	0x00ab
 8004994:	4605      	mov	r5, r0
 8004996:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004a30 <initialise_monitor_handles+0xbc>
 800499a:	4623      	mov	r3, r4
 800499c:	4c20      	ldr	r4, [pc, #128]	; (8004a20 <initialise_monitor_handles+0xac>)
 800499e:	f8c8 5000 	str.w	r5, [r8]
 80049a2:	f04f 32ff 	mov.w	r2, #4294967295
 80049a6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80049aa:	3301      	adds	r3, #1
 80049ac:	2b14      	cmp	r3, #20
 80049ae:	d1fa      	bne.n	80049a6 <initialise_monitor_handles+0x32>
 80049b0:	f7ff ffd4 	bl	800495c <_has_ext_stdout_stderr>
 80049b4:	4d1b      	ldr	r5, [pc, #108]	; (8004a24 <initialise_monitor_handles+0xb0>)
 80049b6:	b1d0      	cbz	r0, 80049ee <initialise_monitor_handles+0x7a>
 80049b8:	f04f 0a03 	mov.w	sl, #3
 80049bc:	2304      	movs	r3, #4
 80049be:	f8cd 9004 	str.w	r9, [sp, #4]
 80049c2:	2601      	movs	r6, #1
 80049c4:	f8cd a00c 	str.w	sl, [sp, #12]
 80049c8:	9302      	str	r3, [sp, #8]
 80049ca:	4630      	mov	r0, r6
 80049cc:	4639      	mov	r1, r7
 80049ce:	beab      	bkpt	0x00ab
 80049d0:	4683      	mov	fp, r0
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <initialise_monitor_handles+0xb4>)
 80049d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80049d8:	f8c3 b000 	str.w	fp, [r3]
 80049dc:	2308      	movs	r3, #8
 80049de:	f8cd a00c 	str.w	sl, [sp, #12]
 80049e2:	9302      	str	r3, [sp, #8]
 80049e4:	4630      	mov	r0, r6
 80049e6:	4639      	mov	r1, r7
 80049e8:	beab      	bkpt	0x00ab
 80049ea:	4606      	mov	r6, r0
 80049ec:	602e      	str	r6, [r5, #0]
 80049ee:	682b      	ldr	r3, [r5, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	bf02      	ittt	eq
 80049f4:	4b0c      	ldreq	r3, [pc, #48]	; (8004a28 <initialise_monitor_handles+0xb4>)
 80049f6:	681b      	ldreq	r3, [r3, #0]
 80049f8:	602b      	streq	r3, [r5, #0]
 80049fa:	2600      	movs	r6, #0
 80049fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	6066      	str	r6, [r4, #4]
 8004a04:	f7ff ffaa 	bl	800495c <_has_ext_stdout_stderr>
 8004a08:	b130      	cbz	r0, 8004a18 <initialise_monitor_handles+0xa4>
 8004a0a:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <initialise_monitor_handles+0xb4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004a18:	b005      	add	sp, #20
 8004a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	200002a8 	.word	0x200002a8
 8004a24:	2000029c 	.word	0x2000029c
 8004a28:	200002a4 	.word	0x200002a4
 8004a2c:	08004ee9 	.word	0x08004ee9
 8004a30:	200002a0 	.word	0x200002a0

08004a34 <_isatty>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	f7ff fd77 	bl	8004528 <findslot>
 8004a3a:	2509      	movs	r5, #9
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	b920      	cbnz	r0, 8004a4a <_isatty+0x16>
 8004a40:	f7fe fd54 	bl	80034ec <__errno>
 8004a44:	6005      	str	r5, [r0, #0]
 8004a46:	4620      	mov	r0, r4
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	beab      	bkpt	0x00ab
 8004a50:	4604      	mov	r4, r0
 8004a52:	2c01      	cmp	r4, #1
 8004a54:	d0f7      	beq.n	8004a46 <_isatty+0x12>
 8004a56:	f7fe fd49 	bl	80034ec <__errno>
 8004a5a:	2400      	movs	r4, #0
 8004a5c:	4605      	mov	r5, r0
 8004a5e:	2613      	movs	r6, #19
 8004a60:	4630      	mov	r0, r6
 8004a62:	4621      	mov	r1, r4
 8004a64:	beab      	bkpt	0x00ab
 8004a66:	4606      	mov	r6, r0
 8004a68:	602e      	str	r6, [r5, #0]
 8004a6a:	e7ec      	b.n	8004a46 <_isatty+0x12>

08004a6c <_init>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr

08004a78 <_fini>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr
