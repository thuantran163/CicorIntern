
STM32_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e78  08003e78  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003e78  08003e78  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e78  08003e78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000078  08003ef8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003ef8  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4ef  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffc  00000000  00000000  0002d597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000303a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004023  00000000  00000000  000310a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e859  00000000  00000000  000350c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f10  00000000  00000000  0004391c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d982c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004558  00000000  00000000  000d987c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d90 	.word	0x08003d90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003d90 	.word	0x08003d90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <L3GD20_Set_CTRL_REG1>:
	}
	else return 0;
}

int L3GD20_Set_CTRL_REG1(CTRL_REG1_TypeDef reg)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	7138      	strb	r0, [r7, #4]
	initialise_monitor_handles();
 8000298:	f003 fcfe 	bl	8003c98 <initialise_monitor_handles>
	uint8_t address = CTRL_REG1_BASE;
 800029c:	2320      	movs	r3, #32
 800029e:	72fb      	strb	r3, [r7, #11]
	uint8_t assign_value = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	72bb      	strb	r3, [r7, #10]
	BFN_SET(assign_value,reg.Yen, CTRL_REG1_YEN);
 80002a4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80002a8:	f023 0301 	bic.w	r3, r3, #1
 80002ac:	b25a      	sxtb	r2, r3
 80002ae:	793b      	ldrb	r3, [r7, #4]
 80002b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	4313      	orrs	r3, r2
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	72bb      	strb	r3, [r7, #10]
	BFN_SET(assign_value,reg.Xen, CTRL_REG1_XEN);
 80002c4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80002c8:	f023 0302 	bic.w	r3, r3, #2
 80002cc:	b25a      	sxtb	r2, r3
 80002ce:	793b      	ldrb	r3, [r7, #4]
 80002d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	f003 0302 	and.w	r3, r3, #2
 80002de:	b25b      	sxtb	r3, r3
 80002e0:	4313      	orrs	r3, r2
 80002e2:	b25b      	sxtb	r3, r3
 80002e4:	72bb      	strb	r3, [r7, #10]
	BFN_SET(assign_value,reg.Zen, CTRL_REG1_ZEN);
 80002e6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80002ea:	f023 0304 	bic.w	r3, r3, #4
 80002ee:	b25a      	sxtb	r2, r3
 80002f0:	793b      	ldrb	r3, [r7, #4]
 80002f2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	b25b      	sxtb	r3, r3
 80002fc:	f003 0304 	and.w	r3, r3, #4
 8000300:	b25b      	sxtb	r3, r3
 8000302:	4313      	orrs	r3, r2
 8000304:	b25b      	sxtb	r3, r3
 8000306:	72bb      	strb	r3, [r7, #10]
	BFN_SET(assign_value,reg.PD, CTRL_REG1_PD);
 8000308:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800030c:	f023 0308 	bic.w	r3, r3, #8
 8000310:	b25a      	sxtb	r2, r3
 8000312:	793b      	ldrb	r3, [r7, #4]
 8000314:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	b25b      	sxtb	r3, r3
 800031e:	f003 0308 	and.w	r3, r3, #8
 8000322:	b25b      	sxtb	r3, r3
 8000324:	4313      	orrs	r3, r2
 8000326:	b25b      	sxtb	r3, r3
 8000328:	72bb      	strb	r3, [r7, #10]
	BFN_SET(assign_value,reg.DR, CTRL_REG1_DR);
 800032a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800032e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000332:	b25a      	sxtb	r2, r3
 8000334:	793b      	ldrb	r3, [r7, #4]
 8000336:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800033a:	b2db      	uxtb	r3, r3
 800033c:	019b      	lsls	r3, r3, #6
 800033e:	b25b      	sxtb	r3, r3
 8000340:	4313      	orrs	r3, r2
 8000342:	b25b      	sxtb	r3, r3
 8000344:	72bb      	strb	r3, [r7, #10]
	BFN_SET(assign_value,reg.BW, CTRL_REG1_BW);
 8000346:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800034a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800034e:	b25a      	sxtb	r2, r3
 8000350:	793b      	ldrb	r3, [r7, #4]
 8000352:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000356:	b2db      	uxtb	r3, r3
 8000358:	011b      	lsls	r3, r3, #4
 800035a:	b25b      	sxtb	r3, r3
 800035c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000360:	b25b      	sxtb	r3, r3
 8000362:	4313      	orrs	r3, r2
 8000364:	b25b      	sxtb	r3, r3
 8000366:	72bb      	strb	r3, [r7, #10]
	for (int i =0; i<10; i++) printf("\n check set value %X", assign_value);
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	e007      	b.n	800037e <L3GD20_Set_CTRL_REG1+0xee>
 800036e:	7abb      	ldrb	r3, [r7, #10]
 8000370:	4619      	mov	r1, r3
 8000372:	4807      	ldr	r0, [pc, #28]	; (8000390 <L3GD20_Set_CTRL_REG1+0x100>)
 8000374:	f002 fadc 	bl	8002930 <iprintf>
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	3301      	adds	r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	2b09      	cmp	r3, #9
 8000382:	ddf4      	ble.n	800036e <L3GD20_Set_CTRL_REG1+0xde>
	SET( CTRL_REG1_BASE, assign_value)
}
 8000384:	bf00      	nop
 8000386:	4618      	mov	r0, r3
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	08003da8 	.word	0x08003da8

08000394 <L3GD20_Read_CTRL_REG1>:
int L3GD20_Read_CTRL_REG1(CTRL_REG1_TypeDef *reg)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	uint8_t address = CTRL_REG1_BASE;
 800039c:	2320      	movs	r3, #32
 800039e:	73fb      	strb	r3, [r7, #15]
	uint8_t return_value = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	73bb      	strb	r3, [r7, #14]
	GET(address, &return_value);

//	return_value = 0b01100101UL;
	reg->Xen = BFN_GET(return_value, CTRL_REG1_XEN);
 80003a4:	7bbb      	ldrb	r3, [r7, #14]
 80003a6:	105b      	asrs	r3, r3, #1
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	b2d9      	uxtb	r1, r3
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7813      	ldrb	r3, [r2, #0]
 80003b2:	f361 1386 	bfi	r3, r1, #6, #1
 80003b6:	7013      	strb	r3, [r2, #0]
	reg->Yen = BFN_GET(return_value, CTRL_REG1_YEN);
 80003b8:	7bbb      	ldrb	r3, [r7, #14]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	b2d9      	uxtb	r1, r3
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	7813      	ldrb	r3, [r2, #0]
 80003c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80003c8:	7013      	strb	r3, [r2, #0]
	reg->Zen = BFN_GET(return_value, CTRL_REG1_ZEN);
 80003ca:	7bbb      	ldrb	r3, [r7, #14]
 80003cc:	109b      	asrs	r3, r3, #2
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	b2d9      	uxtb	r1, r3
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	7813      	ldrb	r3, [r2, #0]
 80003d8:	f361 1345 	bfi	r3, r1, #5, #1
 80003dc:	7013      	strb	r3, [r2, #0]
	reg->PD  = BFN_GET(return_value, CTRL_REG1_PD);
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	10db      	asrs	r3, r3, #3
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	b2d9      	uxtb	r1, r3
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7813      	ldrb	r3, [r2, #0]
 80003ec:	f361 1304 	bfi	r3, r1, #4, #1
 80003f0:	7013      	strb	r3, [r2, #0]
	reg->BW  = BFN_GET(return_value, CTRL_REG1_BW);
 80003f2:	7bbb      	ldrb	r3, [r7, #14]
 80003f4:	111b      	asrs	r3, r3, #4
 80003f6:	f003 0303 	and.w	r3, r3, #3
 80003fa:	b2d9      	uxtb	r1, r3
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	7813      	ldrb	r3, [r2, #0]
 8000400:	f361 0383 	bfi	r3, r1, #2, #2
 8000404:	7013      	strb	r3, [r2, #0]
	reg->DR  = BFN_GET(return_value, CTRL_REG1_DR);
 8000406:	7bbb      	ldrb	r3, [r7, #14]
 8000408:	099b      	lsrs	r3, r3, #6
 800040a:	b2db      	uxtb	r3, r3
 800040c:	f003 0303 	and.w	r3, r3, #3
 8000410:	b2d9      	uxtb	r1, r3
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	7813      	ldrb	r3, [r2, #0]
 8000416:	f361 0301 	bfi	r3, r1, #0, #2
 800041a:	7013      	strb	r3, [r2, #0]
}
 800041c:	bf00      	nop
 800041e:	4618      	mov	r0, r3
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <main>:
void StartDefaultTask(void const * argument);
extern void initialise_monitor_handles(void);


int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000432:	f003 fc31 	bl	8003c98 <initialise_monitor_handles>

  HAL_Init();
 8000436:	f000 fc2d 	bl	8000c94 <HAL_Init>

  MX_GPIO_Init();
 800043a:	f000 f9c5 	bl	80007c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800043e:	f000 f829 	bl	8000494 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000442:	f000 f85d 	bl	8000500 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000446:	f000 f8ab 	bl	80005a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800044a:	f000 f91f 	bl	800068c <MX_TIM3_Init>
  MX_CRC_Init();
 800044e:	f000 f80d 	bl	800046c <MX_CRC_Init>

//  osKernelStart();


  CTRL_REG1_TypeDef reg;
  CTRL_REG1_TypeDef reg2 = {
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <main+0x3c>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	703b      	strb	r3, [r7, #0]
		  .Zen = 1,
		  .PD =  1,
		  .DR = 2,
		  .BW = 2
  };
  L3GD20_Read_CTRL_REG1(&reg);
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff9a 	bl	8000394 <L3GD20_Read_CTRL_REG1>
  L3GD20_Set_CTRL_REG1(reg2);
 8000460:	7838      	ldrb	r0, [r7, #0]
 8000462:	f7ff ff15 	bl	8000290 <L3GD20_Set_CTRL_REG1>

  while (1)
 8000466:	e7fe      	b.n	8000466 <main+0x3a>
 8000468:	08003dc0 	.word	0x08003dc0

0800046c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
  hcrc.Instance = CRC;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_CRC_Init+0x20>)
 8000472:	4a07      	ldr	r2, [pc, #28]	; (8000490 <MX_CRC_Init+0x24>)
 8000474:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_CRC_Init+0x20>)
 8000478:	f000 fd83 	bl	8000f82 <HAL_CRC_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000482:	f000 fa1d 	bl	80008c0 <Error_Handler>
  }

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000094 	.word	0x20000094
 8000490:	40023000 	.word	0x40023000

08000494 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <MX_SPI1_Init+0x64>)
 800049a:	4a18      	ldr	r2, [pc, #96]	; (80004fc <MX_SPI1_Init+0x68>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004da:	2200      	movs	r2, #0
 80004dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004e0:	220a      	movs	r2, #10
 80004e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_SPI1_Init+0x64>)
 80004e6:	f000 ff2a 	bl	800133e <HAL_SPI_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004f0:	f000 f9e6 	bl	80008c0 <Error_Handler>
  }
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000009c 	.word	0x2000009c
 80004fc:	40013000 	.word	0x40013000

08000500 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_TIM1_Init+0x98>)
 800051e:	4a1f      	ldr	r2, [pc, #124]	; (800059c <MX_TIM1_Init+0x9c>)
 8000520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <MX_TIM1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_TIM1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <MX_TIM1_Init+0x98>)
 8000530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_TIM1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_TIM1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_TIM1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000548:	4813      	ldr	r0, [pc, #76]	; (8000598 <MX_TIM1_Init+0x98>)
 800054a:	f000 ff81 	bl	8001450 <HAL_TIM_Base_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000554:	f000 f9b4 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	4619      	mov	r1, r3
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_TIM1_Init+0x98>)
 8000566:	f001 f9d3 	bl	8001910 <HAL_TIM_ConfigClockSource>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000570:	f000 f9a6 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000574:	2300      	movs	r3, #0
 8000576:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_TIM1_Init+0x98>)
 8000582:	f001 ff25 	bl	80023d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800058c:	f000 f998 	bl	80008c0 <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000f4 	.word	0x200000f4
 800059c:	40010000 	.word	0x40010000

080005a0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80005d0:	4b2d      	ldr	r3, [pc, #180]	; (8000688 <MX_TIM2_Init+0xe8>)
 80005d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <MX_TIM2_Init+0xe8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <MX_TIM2_Init+0xe8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <MX_TIM2_Init+0xe8>)
 80005e6:	f04f 32ff 	mov.w	r2, #4294967295
 80005ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <MX_TIM2_Init+0xe8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MX_TIM2_Init+0xe8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <MX_TIM2_Init+0xe8>)
 80005fa:	f000 ff29 	bl	8001450 <HAL_TIM_Base_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000604:	f000 f95c 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	4619      	mov	r1, r3
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <MX_TIM2_Init+0xe8>)
 8000616:	f001 f97b 	bl	8001910 <HAL_TIM_ConfigClockSource>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000620:	f000 f94e 	bl	80008c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000624:	4818      	ldr	r0, [pc, #96]	; (8000688 <MX_TIM2_Init+0xe8>)
 8000626:	f000 ff62 	bl	80014ee <HAL_TIM_PWM_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000630:	f000 f946 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4619      	mov	r1, r3
 8000642:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_TIM2_Init+0xe8>)
 8000644:	f001 fec4 	bl	80023d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800064e:	f000 f937 	bl	80008c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000652:	2360      	movs	r3, #96	; 0x60
 8000654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <MX_TIM2_Init+0xe8>)
 800066a:	f001 f88f 	bl	800178c <HAL_TIM_PWM_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000674:	f000 f924 	bl	80008c0 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <MX_TIM2_Init+0xe8>)
 800067a:	f000 fa2f 	bl	8000adc <HAL_TIM_MspPostInit>

}
 800067e:	bf00      	nop
 8000680:	3738      	adds	r7, #56	; 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000013c 	.word	0x2000013c

0800068c <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80006c6:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <MX_TIM3_Init+0x134>)
 80006c8:	4a3e      	ldr	r2, [pc, #248]	; (80007c4 <MX_TIM3_Init+0x138>)
 80006ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006cc:	4b3c      	ldr	r3, [pc, #240]	; (80007c0 <MX_TIM3_Init+0x134>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <MX_TIM3_Init+0x134>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006d8:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <MX_TIM3_Init+0x134>)
 80006da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <MX_TIM3_Init+0x134>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <MX_TIM3_Init+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006ec:	4834      	ldr	r0, [pc, #208]	; (80007c0 <MX_TIM3_Init+0x134>)
 80006ee:	f000 feaf 	bl	8001450 <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 f8e2 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000706:	4619      	mov	r1, r3
 8000708:	482d      	ldr	r0, [pc, #180]	; (80007c0 <MX_TIM3_Init+0x134>)
 800070a:	f001 f901 	bl	8001910 <HAL_TIM_ConfigClockSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000714:	f000 f8d4 	bl	80008c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000718:	4829      	ldr	r0, [pc, #164]	; (80007c0 <MX_TIM3_Init+0x134>)
 800071a:	f000 ff41 	bl	80015a0 <HAL_TIM_IC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000724:	f000 f8cc 	bl	80008c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000728:	2304      	movs	r3, #4
 800072a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800072c:	2360      	movs	r3, #96	; 0x60
 800072e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000730:	2302      	movs	r3, #2
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	481f      	ldr	r0, [pc, #124]	; (80007c0 <MX_TIM3_Init+0x134>)
 8000744:	f001 f9ab 	bl	8001a9e <HAL_TIM_SlaveConfigSynchro>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800074e:	f000 f8b7 	bl	80008c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000756:	2302      	movs	r3, #2
 8000758:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	4815      	ldr	r0, [pc, #84]	; (80007c0 <MX_TIM3_Init+0x134>)
 800076c:	f000 ff71 	bl	8001652 <HAL_TIM_IC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000776:	f000 f8a3 	bl	80008c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800077a:	2302      	movs	r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2204      	movs	r2, #4
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_TIM3_Init+0x134>)
 800078c:	f000 ff61 	bl	8001652 <HAL_TIM_IC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8000796:	f000 f893 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_TIM3_Init+0x134>)
 80007a8:	f001 fe12 	bl	80023d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 80007b2:	f000 f885 	bl	80008c0 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3740      	adds	r7, #64	; 0x40
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000184 	.word	0x20000184
 80007c4:	40000400 	.word	0x40000400

080007c8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2d      	ldr	r2, [pc, #180]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xf0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xf0>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_GPIO_Init+0xf4>)
 8000854:	f000 fd36 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000858:	2308      	movs	r3, #8
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4813      	ldr	r0, [pc, #76]	; (80008bc <MX_GPIO_Init+0xf4>)
 8000870:	f000 fba4 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000874:	2303      	movs	r3, #3
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000878:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_GPIO_Init+0xf4>)
 800088a:	f000 fb97 	bl	8000fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2006      	movs	r0, #6
 8000894:	f000 fb3f 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000898:	2006      	movs	r0, #6
 800089a:	f000 fb58 	bl	8000f4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2007      	movs	r0, #7
 80008a4:	f000 fb37 	bl	8000f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008a8:	2007      	movs	r0, #7
 80008aa:	f000 fb50 	bl	8000f4e <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40021000 	.word	0x40021000

080008c0 <Error_Handler>:
  /* USER CODE END 5 */
}


void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_MspInit+0x54>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x54>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 fb00 	bl	8000f16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_CRC_MspInit+0x3c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10d      	bne.n	8000952 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_CRC_MspInit+0x40>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a09      	ldr	r2, [pc, #36]	; (8000964 <HAL_CRC_MspInit+0x40>)
 8000940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <HAL_CRC_MspInit+0x40>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023000 	.word	0x40023000
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_SPI_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12b      	bne.n	80009e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_SPI_MspInit+0x88>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_SPI_MspInit+0x88>)
 8000994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_SPI_MspInit+0x88>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_SPI_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_SPI_MspInit+0x88>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_SPI_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009c2:	23e0      	movs	r3, #224	; 0xe0
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d2:	2305      	movs	r3, #5
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_SPI_MspInit+0x8c>)
 80009de:	f000 faed 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40013000 	.word	0x40013000
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <HAL_TIM_Base_MspInit+0xd4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10e      	bne.n	8000a38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a36:	e044      	b.n	8000ac2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a40:	d10e      	bne.n	8000a60 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
}
 8000a5e:	e030      	b.n	8000ac2 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <HAL_TIM_Base_MspInit+0xdc>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_TIM_Base_MspInit+0xd8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <HAL_TIM_Base_MspInit+0xe0>)
 8000abe:	f000 fa7d 	bl	8000fbc <HAL_GPIO_Init>
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010000 	.word	0x40010000
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40000400 	.word	0x40000400
 8000ad8:	40020800 	.word	0x40020800

08000adc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000afc:	d11d      	bne.n	8000b3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_TIM_MspPostInit+0x68>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_TIM_MspPostInit+0x68>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_TIM_MspPostInit+0x68>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <HAL_TIM_MspPostInit+0x6c>)
 8000b36:	f000 fa41 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3720      	adds	r7, #32
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f8dc 	bl	8000d38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b80:	f001 fe16 	bl	80027b0 <xTaskGetSchedulerState>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d001      	beq.n	8000b8e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b8a:	f001 fe7d 	bl	8002888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f000 fbae 	bl	80012f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f000 fba7 	bl	80012f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f001 fe74 	bl	80028cc <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20020000 	.word	0x20020000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	200001cc 	.word	0x200001cc
 8000c18:	20000348 	.word	0x20000348

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c5c:	4c0b      	ldr	r4, [pc, #44]	; (8000c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6a:	f7ff ffd7 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f001 fe33 	bl	80028d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fbdb 	bl	800042c <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c84:	08003e80 	.word	0x08003e80
  ldr r2, =_sbss
 8000c88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c8c:	20000348 	.word	0x20000348

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f91f 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	200f      	movs	r0, #15
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fe00 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f937 	bl	8000f6a <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 f8ff 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	200001d0 	.word	0x200001d0

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff29 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff3e 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff31 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ffa2 	bl	8000ebc <SysTick_Config>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00e      	b.n	8000fb2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	795b      	ldrb	r3, [r3, #5]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fcbd 	bl	8000924 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e159      	b.n	800128c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8148 	bne.w	8001286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a2 	beq.w	8001286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a56      	ldr	r2, [pc, #344]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b54      	ldr	r3, [pc, #336]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a49      	ldr	r2, [pc, #292]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x202>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x1fe>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2f8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x1fa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x2fc>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x1f6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x300>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x1f2>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x304>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_GPIO_Init+0x304>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_GPIO_Init+0x304>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f aea2 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	619a      	str	r2, [r3, #24]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f806 	bl	8001328 <HAL_GPIO_EXTI_Callback>
  }
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40013c00 	.word	0x40013c00

08001328 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e07b      	b.n	8001448 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b00      	cmp	r3, #0
 8001356:	d108      	bne.n	800136a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001360:	d009      	beq.n	8001376 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
 8001368:	e005      	b.n	8001376 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fae9 	bl	8000968 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2202      	movs	r2, #2
 800139a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fa:	ea42 0103 	orr.w	r1, r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	0c1b      	lsrs	r3, r3, #16
 8001414:	f003 0104 	and.w	r1, r3, #4
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	f003 0210 	and.w	r2, r3, #16
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	69da      	ldr	r2, [r3, #28]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001436:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e041      	b.n	80014e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fabe 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3304      	adds	r3, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4610      	mov	r0, r2
 8001490:	f000 fb48 	bl	8001b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e041      	b.n	8001584 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f839 	bl	800158c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3304      	adds	r3, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4610      	mov	r0, r2
 800152e:	f000 faf9 	bl	8001b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e041      	b.n	8001636 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f839 	bl	800163e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3304      	adds	r3, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f000 faa0 	bl	8001b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_TIM_IC_ConfigChannel+0x1e>
 800166c:	2302      	movs	r3, #2
 800166e:	e088      	b.n	8001782 <HAL_TIM_IC_ConfigChannel+0x130>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d11b      	bne.n	80016b6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f000 fce7 	bl	8002060 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699a      	ldr	r2, [r3, #24]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 020c 	bic.w	r2, r2, #12
 80016a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6999      	ldr	r1, [r3, #24]
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	619a      	str	r2, [r3, #24]
 80016b4:	e060      	b.n	8001778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d11c      	bne.n	80016f6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f000 fd5f 	bl	800218e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80016de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6999      	ldr	r1, [r3, #24]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	021a      	lsls	r2, r3, #8
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	e040      	b.n	8001778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d11b      	bne.n	8001734 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	6819      	ldr	r1, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f000 fdac 	bl	8002268 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020c 	bic.w	r2, r2, #12
 800171e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	69d9      	ldr	r1, [r3, #28]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	61da      	str	r2, [r3, #28]
 8001732:	e021      	b.n	8001778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b0c      	cmp	r3, #12
 8001738:	d11c      	bne.n	8001774 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f000 fdc9 	bl	80022e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69da      	ldr	r2, [r3, #28]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800175c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69d9      	ldr	r1, [r3, #28]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	021a      	lsls	r2, r3, #8
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	61da      	str	r2, [r3, #28]
 8001772:	e001      	b.n	8001778 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001780:	7dfb      	ldrb	r3, [r7, #23]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e0ae      	b.n	8001908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	f200 809f 	bhi.w	80018f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017f5 	.word	0x080017f5
 80017c4:	080018f9 	.word	0x080018f9
 80017c8:	080018f9 	.word	0x080018f9
 80017cc:	080018f9 	.word	0x080018f9
 80017d0:	08001835 	.word	0x08001835
 80017d4:	080018f9 	.word	0x080018f9
 80017d8:	080018f9 	.word	0x080018f9
 80017dc:	080018f9 	.word	0x080018f9
 80017e0:	08001877 	.word	0x08001877
 80017e4:	080018f9 	.word	0x080018f9
 80017e8:	080018f9 	.word	0x080018f9
 80017ec:	080018f9 	.word	0x080018f9
 80017f0:	080018b7 	.word	0x080018b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fa12 	bl	8001c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699a      	ldr	r2, [r3, #24]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0204 	bic.w	r2, r2, #4
 800181e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6999      	ldr	r1, [r3, #24]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	619a      	str	r2, [r3, #24]
      break;
 8001832:	e064      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fa58 	bl	8001cf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699a      	ldr	r2, [r3, #24]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800184e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6999      	ldr	r1, [r3, #24]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	021a      	lsls	r2, r3, #8
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	619a      	str	r2, [r3, #24]
      break;
 8001874:	e043      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 faa3 	bl	8001dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f042 0208 	orr.w	r2, r2, #8
 8001890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0204 	bic.w	r2, r2, #4
 80018a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69d9      	ldr	r1, [r3, #28]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	61da      	str	r2, [r3, #28]
      break;
 80018b4:	e023      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 faed 	bl	8001e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69d9      	ldr	r1, [r3, #28]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	021a      	lsls	r2, r3, #8
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	61da      	str	r2, [r3, #28]
      break;
 80018f6:	e002      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	75fb      	strb	r3, [r7, #23]
      break;
 80018fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001906:	7dfb      	ldrb	r3, [r7, #23]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_TIM_ConfigClockSource+0x1c>
 8001928:	2302      	movs	r3, #2
 800192a:	e0b4      	b.n	8001a96 <HAL_TIM_ConfigClockSource+0x186>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800194a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001952:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001964:	d03e      	beq.n	80019e4 <HAL_TIM_ConfigClockSource+0xd4>
 8001966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800196a:	f200 8087 	bhi.w	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 800196e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001972:	f000 8086 	beq.w	8001a82 <HAL_TIM_ConfigClockSource+0x172>
 8001976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197a:	d87f      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 800197c:	2b70      	cmp	r3, #112	; 0x70
 800197e:	d01a      	beq.n	80019b6 <HAL_TIM_ConfigClockSource+0xa6>
 8001980:	2b70      	cmp	r3, #112	; 0x70
 8001982:	d87b      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 8001984:	2b60      	cmp	r3, #96	; 0x60
 8001986:	d050      	beq.n	8001a2a <HAL_TIM_ConfigClockSource+0x11a>
 8001988:	2b60      	cmp	r3, #96	; 0x60
 800198a:	d877      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 800198c:	2b50      	cmp	r3, #80	; 0x50
 800198e:	d03c      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0xfa>
 8001990:	2b50      	cmp	r3, #80	; 0x50
 8001992:	d873      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 8001994:	2b40      	cmp	r3, #64	; 0x40
 8001996:	d058      	beq.n	8001a4a <HAL_TIM_ConfigClockSource+0x13a>
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d86f      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 800199c:	2b30      	cmp	r3, #48	; 0x30
 800199e:	d064      	beq.n	8001a6a <HAL_TIM_ConfigClockSource+0x15a>
 80019a0:	2b30      	cmp	r3, #48	; 0x30
 80019a2:	d86b      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d060      	beq.n	8001a6a <HAL_TIM_ConfigClockSource+0x15a>
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	d867      	bhi.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05c      	beq.n	8001a6a <HAL_TIM_ConfigClockSource+0x15a>
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d05a      	beq.n	8001a6a <HAL_TIM_ConfigClockSource+0x15a>
 80019b4:	e062      	b.n	8001a7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f000 fce3 	bl	8002390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	609a      	str	r2, [r3, #8]
      break;
 80019e2:	e04f      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6899      	ldr	r1, [r3, #8]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f000 fccc 	bl	8002390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a06:	609a      	str	r2, [r3, #8]
      break;
 8001a08:	e03c      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6859      	ldr	r1, [r3, #4]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f000 fb8a 	bl	8002130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2150      	movs	r1, #80	; 0x50
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fc99 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8001a28:	e02c      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f000 fbe6 	bl	8002208 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2160      	movs	r1, #96	; 0x60
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc89 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8001a48:	e01c      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6859      	ldr	r1, [r3, #4]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f000 fb6a 	bl	8002130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fc79 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8001a68:	e00c      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4610      	mov	r0, r2
 8001a76:	f000 fc70 	bl	800235a <TIM_ITRx_SetConfig>
      break;
 8001a7a:	e003      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a80:	e000      	b.n	8001a84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001a82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e031      	b.n	8001b1a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001ac6:	6839      	ldr	r1, [r7, #0]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fa37 	bl	8001f3c <TIM_SlaveTimer_SetConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e018      	b.n	8001b1a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b06:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <TIM_Base_SetConfig+0xe4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00f      	beq.n	8001b5c <TIM_Base_SetConfig+0x38>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b42:	d00b      	beq.n	8001b5c <TIM_Base_SetConfig+0x38>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <TIM_Base_SetConfig+0xe8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <TIM_Base_SetConfig+0x38>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a30      	ldr	r2, [pc, #192]	; (8001c10 <TIM_Base_SetConfig+0xec>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d003      	beq.n	8001b5c <TIM_Base_SetConfig+0x38>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <TIM_Base_SetConfig+0xf0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d108      	bne.n	8001b6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <TIM_Base_SetConfig+0xe4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01b      	beq.n	8001bae <TIM_Base_SetConfig+0x8a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d017      	beq.n	8001bae <TIM_Base_SetConfig+0x8a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a22      	ldr	r2, [pc, #136]	; (8001c0c <TIM_Base_SetConfig+0xe8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <TIM_Base_SetConfig+0x8a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <TIM_Base_SetConfig+0xec>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00f      	beq.n	8001bae <TIM_Base_SetConfig+0x8a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <TIM_Base_SetConfig+0xf0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00b      	beq.n	8001bae <TIM_Base_SetConfig+0x8a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <TIM_Base_SetConfig+0xf4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d007      	beq.n	8001bae <TIM_Base_SetConfig+0x8a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <TIM_Base_SetConfig+0xf8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d003      	beq.n	8001bae <TIM_Base_SetConfig+0x8a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <TIM_Base_SetConfig+0xfc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d108      	bne.n	8001bc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <TIM_Base_SetConfig+0xe4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d103      	bne.n	8001bf4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	615a      	str	r2, [r3, #20]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40000c00 	.word	0x40000c00
 8001c18:	40014000 	.word	0x40014000
 8001c1c:	40014400 	.word	0x40014400
 8001c20:	40014800 	.word	0x40014800

08001c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	f023 0201 	bic.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f023 0302 	bic.w	r3, r3, #2
 8001c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <TIM_OC1_SetConfig+0xc8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d10c      	bne.n	8001c9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0308 	bic.w	r3, r3, #8
 8001c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	; (8001cec <TIM_OC1_SetConfig+0xc8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d111      	bne.n	8001cc6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	621a      	str	r2, [r3, #32]
}
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40010000 	.word	0x40010000

08001cf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	f023 0210 	bic.w	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f023 0320 	bic.w	r3, r3, #32
 8001d3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <TIM_OC2_SetConfig+0xd4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d10d      	bne.n	8001d6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <TIM_OC2_SetConfig+0xd4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d113      	bne.n	8001d9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	621a      	str	r2, [r3, #32]
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40010000 	.word	0x40010000

08001dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <TIM_OC3_SetConfig+0xd0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10d      	bne.n	8001e42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <TIM_OC3_SetConfig+0xd0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d113      	bne.n	8001e72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	621a      	str	r2, [r3, #32]
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40010000 	.word	0x40010000

08001e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	031b      	lsls	r3, r3, #12
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <TIM_OC4_SetConfig+0x9c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d109      	bne.n	8001f10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	621a      	str	r2, [r3, #32]
}
 8001f2a:	bf00      	nop
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40010000 	.word	0x40010000

08001f3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f58:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f023 0307 	bic.w	r3, r3, #7
 8001f6a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b70      	cmp	r3, #112	; 0x70
 8001f84:	d01a      	beq.n	8001fbc <TIM_SlaveTimer_SetConfig+0x80>
 8001f86:	2b70      	cmp	r3, #112	; 0x70
 8001f88:	d860      	bhi.n	800204c <TIM_SlaveTimer_SetConfig+0x110>
 8001f8a:	2b60      	cmp	r3, #96	; 0x60
 8001f8c:	d054      	beq.n	8002038 <TIM_SlaveTimer_SetConfig+0xfc>
 8001f8e:	2b60      	cmp	r3, #96	; 0x60
 8001f90:	d85c      	bhi.n	800204c <TIM_SlaveTimer_SetConfig+0x110>
 8001f92:	2b50      	cmp	r3, #80	; 0x50
 8001f94:	d046      	beq.n	8002024 <TIM_SlaveTimer_SetConfig+0xe8>
 8001f96:	2b50      	cmp	r3, #80	; 0x50
 8001f98:	d858      	bhi.n	800204c <TIM_SlaveTimer_SetConfig+0x110>
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d019      	beq.n	8001fd2 <TIM_SlaveTimer_SetConfig+0x96>
 8001f9e:	2b40      	cmp	r3, #64	; 0x40
 8001fa0:	d854      	bhi.n	800204c <TIM_SlaveTimer_SetConfig+0x110>
 8001fa2:	2b30      	cmp	r3, #48	; 0x30
 8001fa4:	d055      	beq.n	8002052 <TIM_SlaveTimer_SetConfig+0x116>
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	d850      	bhi.n	800204c <TIM_SlaveTimer_SetConfig+0x110>
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d051      	beq.n	8002052 <TIM_SlaveTimer_SetConfig+0x116>
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d84c      	bhi.n	800204c <TIM_SlaveTimer_SetConfig+0x110>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d04d      	beq.n	8002052 <TIM_SlaveTimer_SetConfig+0x116>
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d04b      	beq.n	8002052 <TIM_SlaveTimer_SetConfig+0x116>
 8001fba:	e047      	b.n	800204c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68d9      	ldr	r1, [r3, #12]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f000 f9e0 	bl	8002390 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8001fd0:	e040      	b.n	8002054 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d101      	bne.n	8001fde <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e03b      	b.n	8002056 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6a1a      	ldr	r2, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002004:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4313      	orrs	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	621a      	str	r2, [r3, #32]
      break;
 8002022:	e017      	b.n	8002054 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	461a      	mov	r2, r3
 8002032:	f000 f87d 	bl	8002130 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002036:	e00d      	b.n	8002054 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	461a      	mov	r2, r3
 8002046:	f000 f8df 	bl	8002208 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800204a:	e003      	b.n	8002054 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	75fb      	strb	r3, [r7, #23]
      break;
 8002050:	e000      	b.n	8002054 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002052:	bf00      	nop
  }

  return status;
 8002054:	7dfb      	ldrb	r3, [r7, #23]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f023 0201 	bic.w	r2, r3, #1
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <TIM_TI1_SetConfig+0xbc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <TIM_TI1_SetConfig+0x56>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d00f      	beq.n	80020b6 <TIM_TI1_SetConfig+0x56>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a21      	ldr	r2, [pc, #132]	; (8002120 <TIM_TI1_SetConfig+0xc0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00b      	beq.n	80020b6 <TIM_TI1_SetConfig+0x56>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4a20      	ldr	r2, [pc, #128]	; (8002124 <TIM_TI1_SetConfig+0xc4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <TIM_TI1_SetConfig+0x56>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <TIM_TI1_SetConfig+0xc8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d003      	beq.n	80020b6 <TIM_TI1_SetConfig+0x56>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	; (800212c <TIM_TI1_SetConfig+0xcc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <TIM_TI1_SetConfig+0x5a>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <TIM_TI1_SetConfig+0x5c>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e003      	b.n	80020da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f023 030a 	bic.w	r3, r3, #10
 80020f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f003 030a 	and.w	r3, r3, #10
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	621a      	str	r2, [r3, #32]
}
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40010000 	.word	0x40010000
 8002120:	40000400 	.word	0x40000400
 8002124:	40000800 	.word	0x40000800
 8002128:	40000c00 	.word	0x40000c00
 800212c:	40014000 	.word	0x40014000

08002130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0201 	bic.w	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800215a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 030a 	bic.w	r3, r3, #10
 800216c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	621a      	str	r2, [r3, #32]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800218e:	b480      	push	{r7}
 8002190:	b087      	sub	sp, #28
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f023 0210 	bic.w	r2, r3, #16
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	031b      	lsls	r3, r3, #12
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	621a      	str	r2, [r3, #32]
}
 80021fc:	bf00      	nop
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f023 0210 	bic.w	r2, r3, #16
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002232:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	031b      	lsls	r3, r3, #12
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002244:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	621a      	str	r2, [r3, #32]
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f023 0303 	bic.w	r3, r3, #3
 8002294:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80022b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	621a      	str	r2, [r3, #32]
}
 80022d4:	bf00      	nop
 80022d6:	371c      	adds	r7, #28
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800231e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	031b      	lsls	r3, r3, #12
 8002324:	b29b      	uxth	r3, r3
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002332:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	031b      	lsls	r3, r3, #12
 8002338:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	621a      	str	r2, [r3, #32]
}
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	f043 0307 	orr.w	r3, r3, #7
 800237c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	609a      	str	r2, [r3, #8]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	021a      	lsls	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e050      	b.n	800248a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d018      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d013      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10c      	bne.n	8002478 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4313      	orrs	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40010000 	.word	0x40010000
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40014000 	.word	0x40014000

080024ac <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	601a      	str	r2, [r3, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6892      	ldr	r2, [r2, #8]
 800250a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6852      	ldr	r2, [r2, #4]
 8002514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	d103      	bne.n	8002528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1e5a      	subs	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002552:	4b4e      	ldr	r3, [pc, #312]	; (800268c <xTaskIncrementTick+0x144>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 808e 	bne.w	8002678 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <xTaskIncrementTick+0x148>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <xTaskIncrementTick+0x148>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d120      	bne.n	80025b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <xTaskIncrementTick+0x14c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800258c:	bf00      	nop
 800258e:	e7fe      	b.n	800258e <xTaskIncrementTick+0x46>
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <xTaskIncrementTick+0x14c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b40      	ldr	r3, [pc, #256]	; (8002698 <xTaskIncrementTick+0x150>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a3e      	ldr	r2, [pc, #248]	; (8002694 <xTaskIncrementTick+0x14c>)
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4a3e      	ldr	r2, [pc, #248]	; (8002698 <xTaskIncrementTick+0x150>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b3d      	ldr	r3, [pc, #244]	; (800269c <xTaskIncrementTick+0x154>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	4a3c      	ldr	r2, [pc, #240]	; (800269c <xTaskIncrementTick+0x154>)
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	f000 f8df 	bl	8002770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <xTaskIncrementTick+0x158>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d348      	bcc.n	800264e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025bc:	4b35      	ldr	r3, [pc, #212]	; (8002694 <xTaskIncrementTick+0x14c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <xTaskIncrementTick+0x158>)
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	601a      	str	r2, [r3, #0]
					break;
 80025ce:	e03e      	b.n	800264e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <xTaskIncrementTick+0x14c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d203      	bcs.n	80025f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80025e8:	4a2d      	ldr	r2, [pc, #180]	; (80026a0 <xTaskIncrementTick+0x158>)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80025ee:	e02e      	b.n	800264e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff7d 	bl	80024f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3318      	adds	r3, #24
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff74 	bl	80024f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <xTaskIncrementTick+0x15c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <xTaskIncrementTick+0x15c>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <xTaskIncrementTick+0x160>)
 800262c:	441a      	add	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3304      	adds	r3, #4
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f7ff ff39 	bl	80024ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <xTaskIncrementTick+0x164>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	429a      	cmp	r2, r3
 8002646:	d3b9      	bcc.n	80025bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800264c:	e7b6      	b.n	80025bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <xTaskIncrementTick+0x164>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	4914      	ldr	r1, [pc, #80]	; (80026a8 <xTaskIncrementTick+0x160>)
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d901      	bls.n	800266a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002666:	2301      	movs	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <xTaskIncrementTick+0x168>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002672:	2301      	movs	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e004      	b.n	8002682 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <xTaskIncrementTick+0x16c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <xTaskIncrementTick+0x16c>)
 8002680:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002682:	697b      	ldr	r3, [r7, #20]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000288 	.word	0x20000288
 8002690:	2000026c 	.word	0x2000026c
 8002694:	20000264 	.word	0x20000264
 8002698:	20000268 	.word	0x20000268
 800269c:	20000280 	.word	0x20000280
 80026a0:	20000284 	.word	0x20000284
 80026a4:	20000270 	.word	0x20000270
 80026a8:	200001d8 	.word	0x200001d8
 80026ac:	200001d4 	.word	0x200001d4
 80026b0:	2000027c 	.word	0x2000027c
 80026b4:	20000278 	.word	0x20000278

080026b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <vTaskSwitchContext+0xa4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <vTaskSwitchContext+0xa8>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80026cc:	e03f      	b.n	800274e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <vTaskSwitchContext+0xa8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <vTaskSwitchContext+0xac>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	f1c3 031f 	rsb	r3, r3, #31
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	491f      	ldr	r1, [pc, #124]	; (8002768 <vTaskSwitchContext+0xb0>)
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <vTaskSwitchContext+0x5c>
	__asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	607b      	str	r3, [r7, #4]
}
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <vTaskSwitchContext+0x5a>
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <vTaskSwitchContext+0xb0>)
 8002720:	4413      	add	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	3308      	adds	r3, #8
 8002736:	429a      	cmp	r2, r3
 8002738:	d104      	bne.n	8002744 <vTaskSwitchContext+0x8c>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <vTaskSwitchContext+0xb4>)
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000288 	.word	0x20000288
 8002760:	2000027c 	.word	0x2000027c
 8002764:	20000270 	.word	0x20000270
 8002768:	200001d8 	.word	0x200001d8
 800276c:	200001d4 	.word	0x200001d4

08002770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <prvResetNextTaskUnblockTime+0x38>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <prvResetNextTaskUnblockTime+0x3c>)
 8002782:	f04f 32ff 	mov.w	r2, #4294967295
 8002786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002788:	e008      	b.n	800279c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <prvResetNextTaskUnblockTime+0x38>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <prvResetNextTaskUnblockTime+0x3c>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	20000264 	.word	0x20000264
 80027ac:	20000284 	.word	0x20000284

080027b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <xTaskGetSchedulerState+0x34>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80027be:	2301      	movs	r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	e008      	b.n	80027d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <xTaskGetSchedulerState+0x38>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80027cc:	2302      	movs	r3, #2
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	e001      	b.n	80027d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80027d6:	687b      	ldr	r3, [r7, #4]
	}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	20000274 	.word	0x20000274
 80027e8:	20000288 	.word	0x20000288
 80027ec:	00000000 	.word	0x00000000

080027f0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <pxCurrentTCBConst2>)
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	6808      	ldr	r0, [r1, #0]
 80027f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fa:	f380 8809 	msr	PSP, r0
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f04f 0000 	mov.w	r0, #0
 8002806:	f380 8811 	msr	BASEPRI, r0
 800280a:	4770      	bx	lr
 800280c:	f3af 8000 	nop.w

08002810 <pxCurrentTCBConst2>:
 8002810:	200001d4 	.word	0x200001d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
	...

08002820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002820:	f3ef 8009 	mrs	r0, PSP
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <pxCurrentTCBConst>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f01e 0f10 	tst.w	lr, #16
 8002830:	bf08      	it	eq
 8002832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283a:	6010      	str	r0, [r2, #0]
 800283c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002844:	f380 8811 	msr	BASEPRI, r0
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f7ff ff32 	bl	80026b8 <vTaskSwitchContext>
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f380 8811 	msr	BASEPRI, r0
 800285c:	bc09      	pop	{r0, r3}
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	6808      	ldr	r0, [r1, #0]
 8002862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002866:	f01e 0f10 	tst.w	lr, #16
 800286a:	bf08      	it	eq
 800286c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002870:	f380 8809 	msr	PSP, r0
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	f3af 8000 	nop.w

08002880 <pxCurrentTCBConst>:
 8002880:	200001d4 	.word	0x200001d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop

08002888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	__asm volatile
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	607b      	str	r3, [r7, #4]
}
 80028a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80028a2:	f7ff fe51 	bl	8002548 <xTaskIncrementTick>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <xPortSysTickHandler+0x40>)
 80028ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	2300      	movs	r3, #0
 80028b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <__errno>:
 80028cc:	4b01      	ldr	r3, [pc, #4]	; (80028d4 <__errno+0x8>)
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	2000000c 	.word	0x2000000c

080028d8 <__libc_init_array>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	4d0d      	ldr	r5, [pc, #52]	; (8002910 <__libc_init_array+0x38>)
 80028dc:	4c0d      	ldr	r4, [pc, #52]	; (8002914 <__libc_init_array+0x3c>)
 80028de:	1b64      	subs	r4, r4, r5
 80028e0:	10a4      	asrs	r4, r4, #2
 80028e2:	2600      	movs	r6, #0
 80028e4:	42a6      	cmp	r6, r4
 80028e6:	d109      	bne.n	80028fc <__libc_init_array+0x24>
 80028e8:	4d0b      	ldr	r5, [pc, #44]	; (8002918 <__libc_init_array+0x40>)
 80028ea:	4c0c      	ldr	r4, [pc, #48]	; (800291c <__libc_init_array+0x44>)
 80028ec:	f001 fa50 	bl	8003d90 <_init>
 80028f0:	1b64      	subs	r4, r4, r5
 80028f2:	10a4      	asrs	r4, r4, #2
 80028f4:	2600      	movs	r6, #0
 80028f6:	42a6      	cmp	r6, r4
 80028f8:	d105      	bne.n	8002906 <__libc_init_array+0x2e>
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
 80028fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002900:	4798      	blx	r3
 8002902:	3601      	adds	r6, #1
 8002904:	e7ee      	b.n	80028e4 <__libc_init_array+0xc>
 8002906:	f855 3b04 	ldr.w	r3, [r5], #4
 800290a:	4798      	blx	r3
 800290c:	3601      	adds	r6, #1
 800290e:	e7f2      	b.n	80028f6 <__libc_init_array+0x1e>
 8002910:	08003e78 	.word	0x08003e78
 8002914:	08003e78 	.word	0x08003e78
 8002918:	08003e78 	.word	0x08003e78
 800291c:	08003e7c 	.word	0x08003e7c

08002920 <memset>:
 8002920:	4402      	add	r2, r0
 8002922:	4603      	mov	r3, r0
 8002924:	4293      	cmp	r3, r2
 8002926:	d100      	bne.n	800292a <memset+0xa>
 8002928:	4770      	bx	lr
 800292a:	f803 1b01 	strb.w	r1, [r3], #1
 800292e:	e7f9      	b.n	8002924 <memset+0x4>

08002930 <iprintf>:
 8002930:	b40f      	push	{r0, r1, r2, r3}
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <iprintf+0x2c>)
 8002934:	b513      	push	{r0, r1, r4, lr}
 8002936:	681c      	ldr	r4, [r3, #0]
 8002938:	b124      	cbz	r4, 8002944 <iprintf+0x14>
 800293a:	69a3      	ldr	r3, [r4, #24]
 800293c:	b913      	cbnz	r3, 8002944 <iprintf+0x14>
 800293e:	4620      	mov	r0, r4
 8002940:	f000 f866 	bl	8002a10 <__sinit>
 8002944:	ab05      	add	r3, sp, #20
 8002946:	9a04      	ldr	r2, [sp, #16]
 8002948:	68a1      	ldr	r1, [r4, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	4620      	mov	r0, r4
 800294e:	f000 f9bd 	bl	8002ccc <_vfiprintf_r>
 8002952:	b002      	add	sp, #8
 8002954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002958:	b004      	add	sp, #16
 800295a:	4770      	bx	lr
 800295c:	2000000c 	.word	0x2000000c

08002960 <std>:
 8002960:	2300      	movs	r3, #0
 8002962:	b510      	push	{r4, lr}
 8002964:	4604      	mov	r4, r0
 8002966:	e9c0 3300 	strd	r3, r3, [r0]
 800296a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800296e:	6083      	str	r3, [r0, #8]
 8002970:	8181      	strh	r1, [r0, #12]
 8002972:	6643      	str	r3, [r0, #100]	; 0x64
 8002974:	81c2      	strh	r2, [r0, #14]
 8002976:	6183      	str	r3, [r0, #24]
 8002978:	4619      	mov	r1, r3
 800297a:	2208      	movs	r2, #8
 800297c:	305c      	adds	r0, #92	; 0x5c
 800297e:	f7ff ffcf 	bl	8002920 <memset>
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <std+0x38>)
 8002984:	6263      	str	r3, [r4, #36]	; 0x24
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <std+0x3c>)
 8002988:	62a3      	str	r3, [r4, #40]	; 0x28
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <std+0x40>)
 800298c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <std+0x44>)
 8002990:	6224      	str	r4, [r4, #32]
 8002992:	6323      	str	r3, [r4, #48]	; 0x30
 8002994:	bd10      	pop	{r4, pc}
 8002996:	bf00      	nop
 8002998:	08003275 	.word	0x08003275
 800299c:	08003297 	.word	0x08003297
 80029a0:	080032cf 	.word	0x080032cf
 80029a4:	080032f3 	.word	0x080032f3

080029a8 <_cleanup_r>:
 80029a8:	4901      	ldr	r1, [pc, #4]	; (80029b0 <_cleanup_r+0x8>)
 80029aa:	f000 b8af 	b.w	8002b0c <_fwalk_reent>
 80029ae:	bf00      	nop
 80029b0:	080035cd 	.word	0x080035cd

080029b4 <__sfmoreglue>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	2268      	movs	r2, #104	; 0x68
 80029b8:	1e4d      	subs	r5, r1, #1
 80029ba:	4355      	muls	r5, r2
 80029bc:	460e      	mov	r6, r1
 80029be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029c2:	f000 f8e5 	bl	8002b90 <_malloc_r>
 80029c6:	4604      	mov	r4, r0
 80029c8:	b140      	cbz	r0, 80029dc <__sfmoreglue+0x28>
 80029ca:	2100      	movs	r1, #0
 80029cc:	e9c0 1600 	strd	r1, r6, [r0]
 80029d0:	300c      	adds	r0, #12
 80029d2:	60a0      	str	r0, [r4, #8]
 80029d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029d8:	f7ff ffa2 	bl	8002920 <memset>
 80029dc:	4620      	mov	r0, r4
 80029de:	bd70      	pop	{r4, r5, r6, pc}

080029e0 <__sfp_lock_acquire>:
 80029e0:	4801      	ldr	r0, [pc, #4]	; (80029e8 <__sfp_lock_acquire+0x8>)
 80029e2:	f000 b8b3 	b.w	8002b4c <__retarget_lock_acquire_recursive>
 80029e6:	bf00      	nop
 80029e8:	2000028d 	.word	0x2000028d

080029ec <__sfp_lock_release>:
 80029ec:	4801      	ldr	r0, [pc, #4]	; (80029f4 <__sfp_lock_release+0x8>)
 80029ee:	f000 b8ae 	b.w	8002b4e <__retarget_lock_release_recursive>
 80029f2:	bf00      	nop
 80029f4:	2000028d 	.word	0x2000028d

080029f8 <__sinit_lock_acquire>:
 80029f8:	4801      	ldr	r0, [pc, #4]	; (8002a00 <__sinit_lock_acquire+0x8>)
 80029fa:	f000 b8a7 	b.w	8002b4c <__retarget_lock_acquire_recursive>
 80029fe:	bf00      	nop
 8002a00:	2000028e 	.word	0x2000028e

08002a04 <__sinit_lock_release>:
 8002a04:	4801      	ldr	r0, [pc, #4]	; (8002a0c <__sinit_lock_release+0x8>)
 8002a06:	f000 b8a2 	b.w	8002b4e <__retarget_lock_release_recursive>
 8002a0a:	bf00      	nop
 8002a0c:	2000028e 	.word	0x2000028e

08002a10 <__sinit>:
 8002a10:	b510      	push	{r4, lr}
 8002a12:	4604      	mov	r4, r0
 8002a14:	f7ff fff0 	bl	80029f8 <__sinit_lock_acquire>
 8002a18:	69a3      	ldr	r3, [r4, #24]
 8002a1a:	b11b      	cbz	r3, 8002a24 <__sinit+0x14>
 8002a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a20:	f7ff bff0 	b.w	8002a04 <__sinit_lock_release>
 8002a24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a28:	6523      	str	r3, [r4, #80]	; 0x50
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <__sinit+0x68>)
 8002a2c:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <__sinit+0x6c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a32:	42a3      	cmp	r3, r4
 8002a34:	bf04      	itt	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	61a3      	streq	r3, [r4, #24]
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f000 f820 	bl	8002a80 <__sfp>
 8002a40:	6060      	str	r0, [r4, #4]
 8002a42:	4620      	mov	r0, r4
 8002a44:	f000 f81c 	bl	8002a80 <__sfp>
 8002a48:	60a0      	str	r0, [r4, #8]
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f000 f818 	bl	8002a80 <__sfp>
 8002a50:	2200      	movs	r2, #0
 8002a52:	60e0      	str	r0, [r4, #12]
 8002a54:	2104      	movs	r1, #4
 8002a56:	6860      	ldr	r0, [r4, #4]
 8002a58:	f7ff ff82 	bl	8002960 <std>
 8002a5c:	68a0      	ldr	r0, [r4, #8]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	2109      	movs	r1, #9
 8002a62:	f7ff ff7d 	bl	8002960 <std>
 8002a66:	68e0      	ldr	r0, [r4, #12]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	2112      	movs	r1, #18
 8002a6c:	f7ff ff78 	bl	8002960 <std>
 8002a70:	2301      	movs	r3, #1
 8002a72:	61a3      	str	r3, [r4, #24]
 8002a74:	e7d2      	b.n	8002a1c <__sinit+0xc>
 8002a76:	bf00      	nop
 8002a78:	08003dc4 	.word	0x08003dc4
 8002a7c:	080029a9 	.word	0x080029a9

08002a80 <__sfp>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	4607      	mov	r7, r0
 8002a84:	f7ff ffac 	bl	80029e0 <__sfp_lock_acquire>
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <__sfp+0x84>)
 8002a8a:	681e      	ldr	r6, [r3, #0]
 8002a8c:	69b3      	ldr	r3, [r6, #24]
 8002a8e:	b913      	cbnz	r3, 8002a96 <__sfp+0x16>
 8002a90:	4630      	mov	r0, r6
 8002a92:	f7ff ffbd 	bl	8002a10 <__sinit>
 8002a96:	3648      	adds	r6, #72	; 0x48
 8002a98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	d503      	bpl.n	8002aa8 <__sfp+0x28>
 8002aa0:	6833      	ldr	r3, [r6, #0]
 8002aa2:	b30b      	cbz	r3, 8002ae8 <__sfp+0x68>
 8002aa4:	6836      	ldr	r6, [r6, #0]
 8002aa6:	e7f7      	b.n	8002a98 <__sfp+0x18>
 8002aa8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002aac:	b9d5      	cbnz	r5, 8002ae4 <__sfp+0x64>
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <__sfp+0x88>)
 8002ab0:	60e3      	str	r3, [r4, #12]
 8002ab2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ab6:	6665      	str	r5, [r4, #100]	; 0x64
 8002ab8:	f000 f847 	bl	8002b4a <__retarget_lock_init_recursive>
 8002abc:	f7ff ff96 	bl	80029ec <__sfp_lock_release>
 8002ac0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ac4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ac8:	6025      	str	r5, [r4, #0]
 8002aca:	61a5      	str	r5, [r4, #24]
 8002acc:	2208      	movs	r2, #8
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ad4:	f7ff ff24 	bl	8002920 <memset>
 8002ad8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002adc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ae4:	3468      	adds	r4, #104	; 0x68
 8002ae6:	e7d9      	b.n	8002a9c <__sfp+0x1c>
 8002ae8:	2104      	movs	r1, #4
 8002aea:	4638      	mov	r0, r7
 8002aec:	f7ff ff62 	bl	80029b4 <__sfmoreglue>
 8002af0:	4604      	mov	r4, r0
 8002af2:	6030      	str	r0, [r6, #0]
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d1d5      	bne.n	8002aa4 <__sfp+0x24>
 8002af8:	f7ff ff78 	bl	80029ec <__sfp_lock_release>
 8002afc:	230c      	movs	r3, #12
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	e7ee      	b.n	8002ae0 <__sfp+0x60>
 8002b02:	bf00      	nop
 8002b04:	08003dc4 	.word	0x08003dc4
 8002b08:	ffff0001 	.word	0xffff0001

08002b0c <_fwalk_reent>:
 8002b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b10:	4606      	mov	r6, r0
 8002b12:	4688      	mov	r8, r1
 8002b14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b18:	2700      	movs	r7, #0
 8002b1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b1e:	f1b9 0901 	subs.w	r9, r9, #1
 8002b22:	d505      	bpl.n	8002b30 <_fwalk_reent+0x24>
 8002b24:	6824      	ldr	r4, [r4, #0]
 8002b26:	2c00      	cmp	r4, #0
 8002b28:	d1f7      	bne.n	8002b1a <_fwalk_reent+0xe>
 8002b2a:	4638      	mov	r0, r7
 8002b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b30:	89ab      	ldrh	r3, [r5, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d907      	bls.n	8002b46 <_fwalk_reent+0x3a>
 8002b36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	d003      	beq.n	8002b46 <_fwalk_reent+0x3a>
 8002b3e:	4629      	mov	r1, r5
 8002b40:	4630      	mov	r0, r6
 8002b42:	47c0      	blx	r8
 8002b44:	4307      	orrs	r7, r0
 8002b46:	3568      	adds	r5, #104	; 0x68
 8002b48:	e7e9      	b.n	8002b1e <_fwalk_reent+0x12>

08002b4a <__retarget_lock_init_recursive>:
 8002b4a:	4770      	bx	lr

08002b4c <__retarget_lock_acquire_recursive>:
 8002b4c:	4770      	bx	lr

08002b4e <__retarget_lock_release_recursive>:
 8002b4e:	4770      	bx	lr

08002b50 <sbrk_aligned>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	4e0e      	ldr	r6, [pc, #56]	; (8002b8c <sbrk_aligned+0x3c>)
 8002b54:	460c      	mov	r4, r1
 8002b56:	6831      	ldr	r1, [r6, #0]
 8002b58:	4605      	mov	r5, r0
 8002b5a:	b911      	cbnz	r1, 8002b62 <sbrk_aligned+0x12>
 8002b5c:	f000 fb7a 	bl	8003254 <_sbrk_r>
 8002b60:	6030      	str	r0, [r6, #0]
 8002b62:	4621      	mov	r1, r4
 8002b64:	4628      	mov	r0, r5
 8002b66:	f000 fb75 	bl	8003254 <_sbrk_r>
 8002b6a:	1c43      	adds	r3, r0, #1
 8002b6c:	d00a      	beq.n	8002b84 <sbrk_aligned+0x34>
 8002b6e:	1cc4      	adds	r4, r0, #3
 8002b70:	f024 0403 	bic.w	r4, r4, #3
 8002b74:	42a0      	cmp	r0, r4
 8002b76:	d007      	beq.n	8002b88 <sbrk_aligned+0x38>
 8002b78:	1a21      	subs	r1, r4, r0
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	f000 fb6a 	bl	8003254 <_sbrk_r>
 8002b80:	3001      	adds	r0, #1
 8002b82:	d101      	bne.n	8002b88 <sbrk_aligned+0x38>
 8002b84:	f04f 34ff 	mov.w	r4, #4294967295
 8002b88:	4620      	mov	r0, r4
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
 8002b8c:	20000294 	.word	0x20000294

08002b90 <_malloc_r>:
 8002b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b94:	1ccd      	adds	r5, r1, #3
 8002b96:	f025 0503 	bic.w	r5, r5, #3
 8002b9a:	3508      	adds	r5, #8
 8002b9c:	2d0c      	cmp	r5, #12
 8002b9e:	bf38      	it	cc
 8002ba0:	250c      	movcc	r5, #12
 8002ba2:	2d00      	cmp	r5, #0
 8002ba4:	4607      	mov	r7, r0
 8002ba6:	db01      	blt.n	8002bac <_malloc_r+0x1c>
 8002ba8:	42a9      	cmp	r1, r5
 8002baa:	d905      	bls.n	8002bb8 <_malloc_r+0x28>
 8002bac:	230c      	movs	r3, #12
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	2600      	movs	r6, #0
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bb8:	4e2e      	ldr	r6, [pc, #184]	; (8002c74 <_malloc_r+0xe4>)
 8002bba:	f000 fdbb 	bl	8003734 <__malloc_lock>
 8002bbe:	6833      	ldr	r3, [r6, #0]
 8002bc0:	461c      	mov	r4, r3
 8002bc2:	bb34      	cbnz	r4, 8002c12 <_malloc_r+0x82>
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	f7ff ffc2 	bl	8002b50 <sbrk_aligned>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	4604      	mov	r4, r0
 8002bd0:	d14d      	bne.n	8002c6e <_malloc_r+0xde>
 8002bd2:	6834      	ldr	r4, [r6, #0]
 8002bd4:	4626      	mov	r6, r4
 8002bd6:	2e00      	cmp	r6, #0
 8002bd8:	d140      	bne.n	8002c5c <_malloc_r+0xcc>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	4631      	mov	r1, r6
 8002bde:	4638      	mov	r0, r7
 8002be0:	eb04 0803 	add.w	r8, r4, r3
 8002be4:	f000 fb36 	bl	8003254 <_sbrk_r>
 8002be8:	4580      	cmp	r8, r0
 8002bea:	d13a      	bne.n	8002c62 <_malloc_r+0xd2>
 8002bec:	6821      	ldr	r1, [r4, #0]
 8002bee:	3503      	adds	r5, #3
 8002bf0:	1a6d      	subs	r5, r5, r1
 8002bf2:	f025 0503 	bic.w	r5, r5, #3
 8002bf6:	3508      	adds	r5, #8
 8002bf8:	2d0c      	cmp	r5, #12
 8002bfa:	bf38      	it	cc
 8002bfc:	250c      	movcc	r5, #12
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4638      	mov	r0, r7
 8002c02:	f7ff ffa5 	bl	8002b50 <sbrk_aligned>
 8002c06:	3001      	adds	r0, #1
 8002c08:	d02b      	beq.n	8002c62 <_malloc_r+0xd2>
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	442b      	add	r3, r5
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	e00e      	b.n	8002c30 <_malloc_r+0xa0>
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	1b52      	subs	r2, r2, r5
 8002c16:	d41e      	bmi.n	8002c56 <_malloc_r+0xc6>
 8002c18:	2a0b      	cmp	r2, #11
 8002c1a:	d916      	bls.n	8002c4a <_malloc_r+0xba>
 8002c1c:	1961      	adds	r1, r4, r5
 8002c1e:	42a3      	cmp	r3, r4
 8002c20:	6025      	str	r5, [r4, #0]
 8002c22:	bf18      	it	ne
 8002c24:	6059      	strne	r1, [r3, #4]
 8002c26:	6863      	ldr	r3, [r4, #4]
 8002c28:	bf08      	it	eq
 8002c2a:	6031      	streq	r1, [r6, #0]
 8002c2c:	5162      	str	r2, [r4, r5]
 8002c2e:	604b      	str	r3, [r1, #4]
 8002c30:	4638      	mov	r0, r7
 8002c32:	f104 060b 	add.w	r6, r4, #11
 8002c36:	f000 fd83 	bl	8003740 <__malloc_unlock>
 8002c3a:	f026 0607 	bic.w	r6, r6, #7
 8002c3e:	1d23      	adds	r3, r4, #4
 8002c40:	1af2      	subs	r2, r6, r3
 8002c42:	d0b6      	beq.n	8002bb2 <_malloc_r+0x22>
 8002c44:	1b9b      	subs	r3, r3, r6
 8002c46:	50a3      	str	r3, [r4, r2]
 8002c48:	e7b3      	b.n	8002bb2 <_malloc_r+0x22>
 8002c4a:	6862      	ldr	r2, [r4, #4]
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	bf0c      	ite	eq
 8002c50:	6032      	streq	r2, [r6, #0]
 8002c52:	605a      	strne	r2, [r3, #4]
 8002c54:	e7ec      	b.n	8002c30 <_malloc_r+0xa0>
 8002c56:	4623      	mov	r3, r4
 8002c58:	6864      	ldr	r4, [r4, #4]
 8002c5a:	e7b2      	b.n	8002bc2 <_malloc_r+0x32>
 8002c5c:	4634      	mov	r4, r6
 8002c5e:	6876      	ldr	r6, [r6, #4]
 8002c60:	e7b9      	b.n	8002bd6 <_malloc_r+0x46>
 8002c62:	230c      	movs	r3, #12
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	4638      	mov	r0, r7
 8002c68:	f000 fd6a 	bl	8003740 <__malloc_unlock>
 8002c6c:	e7a1      	b.n	8002bb2 <_malloc_r+0x22>
 8002c6e:	6025      	str	r5, [r4, #0]
 8002c70:	e7de      	b.n	8002c30 <_malloc_r+0xa0>
 8002c72:	bf00      	nop
 8002c74:	20000290 	.word	0x20000290

08002c78 <__sfputc_r>:
 8002c78:	6893      	ldr	r3, [r2, #8]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	b410      	push	{r4}
 8002c80:	6093      	str	r3, [r2, #8]
 8002c82:	da08      	bge.n	8002c96 <__sfputc_r+0x1e>
 8002c84:	6994      	ldr	r4, [r2, #24]
 8002c86:	42a3      	cmp	r3, r4
 8002c88:	db01      	blt.n	8002c8e <__sfputc_r+0x16>
 8002c8a:	290a      	cmp	r1, #10
 8002c8c:	d103      	bne.n	8002c96 <__sfputc_r+0x1e>
 8002c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c92:	f000 bb33 	b.w	80032fc <__swbuf_r>
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	1c58      	adds	r0, r3, #1
 8002c9a:	6010      	str	r0, [r2, #0]
 8002c9c:	7019      	strb	r1, [r3, #0]
 8002c9e:	4608      	mov	r0, r1
 8002ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <__sfputs_r>:
 8002ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca8:	4606      	mov	r6, r0
 8002caa:	460f      	mov	r7, r1
 8002cac:	4614      	mov	r4, r2
 8002cae:	18d5      	adds	r5, r2, r3
 8002cb0:	42ac      	cmp	r4, r5
 8002cb2:	d101      	bne.n	8002cb8 <__sfputs_r+0x12>
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	e007      	b.n	8002cc8 <__sfputs_r+0x22>
 8002cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cbc:	463a      	mov	r2, r7
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f7ff ffda 	bl	8002c78 <__sfputc_r>
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d1f3      	bne.n	8002cb0 <__sfputs_r+0xa>
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ccc <_vfiprintf_r>:
 8002ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd0:	460d      	mov	r5, r1
 8002cd2:	b09d      	sub	sp, #116	; 0x74
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	4698      	mov	r8, r3
 8002cd8:	4606      	mov	r6, r0
 8002cda:	b118      	cbz	r0, 8002ce4 <_vfiprintf_r+0x18>
 8002cdc:	6983      	ldr	r3, [r0, #24]
 8002cde:	b90b      	cbnz	r3, 8002ce4 <_vfiprintf_r+0x18>
 8002ce0:	f7ff fe96 	bl	8002a10 <__sinit>
 8002ce4:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <_vfiprintf_r+0x240>)
 8002ce6:	429d      	cmp	r5, r3
 8002ce8:	d11b      	bne.n	8002d22 <_vfiprintf_r+0x56>
 8002cea:	6875      	ldr	r5, [r6, #4]
 8002cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cee:	07d9      	lsls	r1, r3, #31
 8002cf0:	d405      	bmi.n	8002cfe <_vfiprintf_r+0x32>
 8002cf2:	89ab      	ldrh	r3, [r5, #12]
 8002cf4:	059a      	lsls	r2, r3, #22
 8002cf6:	d402      	bmi.n	8002cfe <_vfiprintf_r+0x32>
 8002cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cfa:	f7ff ff27 	bl	8002b4c <__retarget_lock_acquire_recursive>
 8002cfe:	89ab      	ldrh	r3, [r5, #12]
 8002d00:	071b      	lsls	r3, r3, #28
 8002d02:	d501      	bpl.n	8002d08 <_vfiprintf_r+0x3c>
 8002d04:	692b      	ldr	r3, [r5, #16]
 8002d06:	b9eb      	cbnz	r3, 8002d44 <_vfiprintf_r+0x78>
 8002d08:	4629      	mov	r1, r5
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	f000 fb5a 	bl	80033c4 <__swsetup_r>
 8002d10:	b1c0      	cbz	r0, 8002d44 <_vfiprintf_r+0x78>
 8002d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d14:	07dc      	lsls	r4, r3, #31
 8002d16:	d50e      	bpl.n	8002d36 <_vfiprintf_r+0x6a>
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	b01d      	add	sp, #116	; 0x74
 8002d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d22:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <_vfiprintf_r+0x244>)
 8002d24:	429d      	cmp	r5, r3
 8002d26:	d101      	bne.n	8002d2c <_vfiprintf_r+0x60>
 8002d28:	68b5      	ldr	r5, [r6, #8]
 8002d2a:	e7df      	b.n	8002cec <_vfiprintf_r+0x20>
 8002d2c:	4b79      	ldr	r3, [pc, #484]	; (8002f14 <_vfiprintf_r+0x248>)
 8002d2e:	429d      	cmp	r5, r3
 8002d30:	bf08      	it	eq
 8002d32:	68f5      	ldreq	r5, [r6, #12]
 8002d34:	e7da      	b.n	8002cec <_vfiprintf_r+0x20>
 8002d36:	89ab      	ldrh	r3, [r5, #12]
 8002d38:	0598      	lsls	r0, r3, #22
 8002d3a:	d4ed      	bmi.n	8002d18 <_vfiprintf_r+0x4c>
 8002d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d3e:	f7ff ff06 	bl	8002b4e <__retarget_lock_release_recursive>
 8002d42:	e7e9      	b.n	8002d18 <_vfiprintf_r+0x4c>
 8002d44:	2300      	movs	r3, #0
 8002d46:	9309      	str	r3, [sp, #36]	; 0x24
 8002d48:	2320      	movs	r3, #32
 8002d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d52:	2330      	movs	r3, #48	; 0x30
 8002d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002f18 <_vfiprintf_r+0x24c>
 8002d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d5c:	f04f 0901 	mov.w	r9, #1
 8002d60:	4623      	mov	r3, r4
 8002d62:	469a      	mov	sl, r3
 8002d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d68:	b10a      	cbz	r2, 8002d6e <_vfiprintf_r+0xa2>
 8002d6a:	2a25      	cmp	r2, #37	; 0x25
 8002d6c:	d1f9      	bne.n	8002d62 <_vfiprintf_r+0x96>
 8002d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8002d72:	d00b      	beq.n	8002d8c <_vfiprintf_r+0xc0>
 8002d74:	465b      	mov	r3, fp
 8002d76:	4622      	mov	r2, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7ff ff93 	bl	8002ca6 <__sfputs_r>
 8002d80:	3001      	adds	r0, #1
 8002d82:	f000 80aa 	beq.w	8002eda <_vfiprintf_r+0x20e>
 8002d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d88:	445a      	add	r2, fp
 8002d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8002d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a2 	beq.w	8002eda <_vfiprintf_r+0x20e>
 8002d96:	2300      	movs	r3, #0
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002da0:	f10a 0a01 	add.w	sl, sl, #1
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	9307      	str	r3, [sp, #28]
 8002da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dac:	931a      	str	r3, [sp, #104]	; 0x68
 8002dae:	4654      	mov	r4, sl
 8002db0:	2205      	movs	r2, #5
 8002db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db6:	4858      	ldr	r0, [pc, #352]	; (8002f18 <_vfiprintf_r+0x24c>)
 8002db8:	f7fd fa12 	bl	80001e0 <memchr>
 8002dbc:	9a04      	ldr	r2, [sp, #16]
 8002dbe:	b9d8      	cbnz	r0, 8002df8 <_vfiprintf_r+0x12c>
 8002dc0:	06d1      	lsls	r1, r2, #27
 8002dc2:	bf44      	itt	mi
 8002dc4:	2320      	movmi	r3, #32
 8002dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dca:	0713      	lsls	r3, r2, #28
 8002dcc:	bf44      	itt	mi
 8002dce:	232b      	movmi	r3, #43	; 0x2b
 8002dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002dda:	d015      	beq.n	8002e08 <_vfiprintf_r+0x13c>
 8002ddc:	9a07      	ldr	r2, [sp, #28]
 8002dde:	4654      	mov	r4, sl
 8002de0:	2000      	movs	r0, #0
 8002de2:	f04f 0c0a 	mov.w	ip, #10
 8002de6:	4621      	mov	r1, r4
 8002de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dec:	3b30      	subs	r3, #48	; 0x30
 8002dee:	2b09      	cmp	r3, #9
 8002df0:	d94e      	bls.n	8002e90 <_vfiprintf_r+0x1c4>
 8002df2:	b1b0      	cbz	r0, 8002e22 <_vfiprintf_r+0x156>
 8002df4:	9207      	str	r2, [sp, #28]
 8002df6:	e014      	b.n	8002e22 <_vfiprintf_r+0x156>
 8002df8:	eba0 0308 	sub.w	r3, r0, r8
 8002dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	46a2      	mov	sl, r4
 8002e06:	e7d2      	b.n	8002dae <_vfiprintf_r+0xe2>
 8002e08:	9b03      	ldr	r3, [sp, #12]
 8002e0a:	1d19      	adds	r1, r3, #4
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	9103      	str	r1, [sp, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bfbb      	ittet	lt
 8002e14:	425b      	neglt	r3, r3
 8002e16:	f042 0202 	orrlt.w	r2, r2, #2
 8002e1a:	9307      	strge	r3, [sp, #28]
 8002e1c:	9307      	strlt	r3, [sp, #28]
 8002e1e:	bfb8      	it	lt
 8002e20:	9204      	strlt	r2, [sp, #16]
 8002e22:	7823      	ldrb	r3, [r4, #0]
 8002e24:	2b2e      	cmp	r3, #46	; 0x2e
 8002e26:	d10c      	bne.n	8002e42 <_vfiprintf_r+0x176>
 8002e28:	7863      	ldrb	r3, [r4, #1]
 8002e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2c:	d135      	bne.n	8002e9a <_vfiprintf_r+0x1ce>
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	1d1a      	adds	r2, r3, #4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9203      	str	r2, [sp, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bfb8      	it	lt
 8002e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e3e:	3402      	adds	r4, #2
 8002e40:	9305      	str	r3, [sp, #20]
 8002e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002f28 <_vfiprintf_r+0x25c>
 8002e46:	7821      	ldrb	r1, [r4, #0]
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4650      	mov	r0, sl
 8002e4c:	f7fd f9c8 	bl	80001e0 <memchr>
 8002e50:	b140      	cbz	r0, 8002e64 <_vfiprintf_r+0x198>
 8002e52:	2340      	movs	r3, #64	; 0x40
 8002e54:	eba0 000a 	sub.w	r0, r0, sl
 8002e58:	fa03 f000 	lsl.w	r0, r3, r0
 8002e5c:	9b04      	ldr	r3, [sp, #16]
 8002e5e:	4303      	orrs	r3, r0
 8002e60:	3401      	adds	r4, #1
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e68:	482c      	ldr	r0, [pc, #176]	; (8002f1c <_vfiprintf_r+0x250>)
 8002e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e6e:	2206      	movs	r2, #6
 8002e70:	f7fd f9b6 	bl	80001e0 <memchr>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d03f      	beq.n	8002ef8 <_vfiprintf_r+0x22c>
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <_vfiprintf_r+0x254>)
 8002e7a:	bb1b      	cbnz	r3, 8002ec4 <_vfiprintf_r+0x1f8>
 8002e7c:	9b03      	ldr	r3, [sp, #12]
 8002e7e:	3307      	adds	r3, #7
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	3308      	adds	r3, #8
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8a:	443b      	add	r3, r7
 8002e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e8e:	e767      	b.n	8002d60 <_vfiprintf_r+0x94>
 8002e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e94:	460c      	mov	r4, r1
 8002e96:	2001      	movs	r0, #1
 8002e98:	e7a5      	b.n	8002de6 <_vfiprintf_r+0x11a>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	3401      	adds	r4, #1
 8002e9e:	9305      	str	r3, [sp, #20]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f04f 0c0a 	mov.w	ip, #10
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eac:	3a30      	subs	r2, #48	; 0x30
 8002eae:	2a09      	cmp	r2, #9
 8002eb0:	d903      	bls.n	8002eba <_vfiprintf_r+0x1ee>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0c5      	beq.n	8002e42 <_vfiprintf_r+0x176>
 8002eb6:	9105      	str	r1, [sp, #20]
 8002eb8:	e7c3      	b.n	8002e42 <_vfiprintf_r+0x176>
 8002eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e7f0      	b.n	8002ea6 <_vfiprintf_r+0x1da>
 8002ec4:	ab03      	add	r3, sp, #12
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	462a      	mov	r2, r5
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <_vfiprintf_r+0x258>)
 8002ecc:	a904      	add	r1, sp, #16
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f3af 8000 	nop.w
 8002ed4:	4607      	mov	r7, r0
 8002ed6:	1c78      	adds	r0, r7, #1
 8002ed8:	d1d6      	bne.n	8002e88 <_vfiprintf_r+0x1bc>
 8002eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002edc:	07d9      	lsls	r1, r3, #31
 8002ede:	d405      	bmi.n	8002eec <_vfiprintf_r+0x220>
 8002ee0:	89ab      	ldrh	r3, [r5, #12]
 8002ee2:	059a      	lsls	r2, r3, #22
 8002ee4:	d402      	bmi.n	8002eec <_vfiprintf_r+0x220>
 8002ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ee8:	f7ff fe31 	bl	8002b4e <__retarget_lock_release_recursive>
 8002eec:	89ab      	ldrh	r3, [r5, #12]
 8002eee:	065b      	lsls	r3, r3, #25
 8002ef0:	f53f af12 	bmi.w	8002d18 <_vfiprintf_r+0x4c>
 8002ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ef6:	e711      	b.n	8002d1c <_vfiprintf_r+0x50>
 8002ef8:	ab03      	add	r3, sp, #12
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	462a      	mov	r2, r5
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <_vfiprintf_r+0x258>)
 8002f00:	a904      	add	r1, sp, #16
 8002f02:	4630      	mov	r0, r6
 8002f04:	f000 f880 	bl	8003008 <_printf_i>
 8002f08:	e7e4      	b.n	8002ed4 <_vfiprintf_r+0x208>
 8002f0a:	bf00      	nop
 8002f0c:	08003de8 	.word	0x08003de8
 8002f10:	08003e08 	.word	0x08003e08
 8002f14:	08003dc8 	.word	0x08003dc8
 8002f18:	08003e28 	.word	0x08003e28
 8002f1c:	08003e32 	.word	0x08003e32
 8002f20:	00000000 	.word	0x00000000
 8002f24:	08002ca7 	.word	0x08002ca7
 8002f28:	08003e2e 	.word	0x08003e2e

08002f2c <_printf_common>:
 8002f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f30:	4616      	mov	r6, r2
 8002f32:	4699      	mov	r9, r3
 8002f34:	688a      	ldr	r2, [r1, #8]
 8002f36:	690b      	ldr	r3, [r1, #16]
 8002f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bfb8      	it	lt
 8002f40:	4613      	movlt	r3, r2
 8002f42:	6033      	str	r3, [r6, #0]
 8002f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f48:	4607      	mov	r7, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	b10a      	cbz	r2, 8002f52 <_printf_common+0x26>
 8002f4e:	3301      	adds	r3, #1
 8002f50:	6033      	str	r3, [r6, #0]
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	0699      	lsls	r1, r3, #26
 8002f56:	bf42      	ittt	mi
 8002f58:	6833      	ldrmi	r3, [r6, #0]
 8002f5a:	3302      	addmi	r3, #2
 8002f5c:	6033      	strmi	r3, [r6, #0]
 8002f5e:	6825      	ldr	r5, [r4, #0]
 8002f60:	f015 0506 	ands.w	r5, r5, #6
 8002f64:	d106      	bne.n	8002f74 <_printf_common+0x48>
 8002f66:	f104 0a19 	add.w	sl, r4, #25
 8002f6a:	68e3      	ldr	r3, [r4, #12]
 8002f6c:	6832      	ldr	r2, [r6, #0]
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	42ab      	cmp	r3, r5
 8002f72:	dc26      	bgt.n	8002fc2 <_printf_common+0x96>
 8002f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f78:	1e13      	subs	r3, r2, #0
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	bf18      	it	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	0692      	lsls	r2, r2, #26
 8002f82:	d42b      	bmi.n	8002fdc <_printf_common+0xb0>
 8002f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f88:	4649      	mov	r1, r9
 8002f8a:	4638      	mov	r0, r7
 8002f8c:	47c0      	blx	r8
 8002f8e:	3001      	adds	r0, #1
 8002f90:	d01e      	beq.n	8002fd0 <_printf_common+0xa4>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	68e5      	ldr	r5, [r4, #12]
 8002f96:	6832      	ldr	r2, [r6, #0]
 8002f98:	f003 0306 	and.w	r3, r3, #6
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	bf08      	it	eq
 8002fa0:	1aad      	subeq	r5, r5, r2
 8002fa2:	68a3      	ldr	r3, [r4, #8]
 8002fa4:	6922      	ldr	r2, [r4, #16]
 8002fa6:	bf0c      	ite	eq
 8002fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fac:	2500      	movne	r5, #0
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bfc4      	itt	gt
 8002fb2:	1a9b      	subgt	r3, r3, r2
 8002fb4:	18ed      	addgt	r5, r5, r3
 8002fb6:	2600      	movs	r6, #0
 8002fb8:	341a      	adds	r4, #26
 8002fba:	42b5      	cmp	r5, r6
 8002fbc:	d11a      	bne.n	8002ff4 <_printf_common+0xc8>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e008      	b.n	8002fd4 <_printf_common+0xa8>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	4638      	mov	r0, r7
 8002fca:	47c0      	blx	r8
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d103      	bne.n	8002fd8 <_printf_common+0xac>
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	3501      	adds	r5, #1
 8002fda:	e7c6      	b.n	8002f6a <_printf_common+0x3e>
 8002fdc:	18e1      	adds	r1, r4, r3
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	2030      	movs	r0, #48	; 0x30
 8002fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fe6:	4422      	add	r2, r4
 8002fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	e7c7      	b.n	8002f84 <_printf_common+0x58>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d0e6      	beq.n	8002fd0 <_printf_common+0xa4>
 8003002:	3601      	adds	r6, #1
 8003004:	e7d9      	b.n	8002fba <_printf_common+0x8e>
	...

08003008 <_printf_i>:
 8003008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800300c:	7e0f      	ldrb	r7, [r1, #24]
 800300e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003010:	2f78      	cmp	r7, #120	; 0x78
 8003012:	4691      	mov	r9, r2
 8003014:	4680      	mov	r8, r0
 8003016:	460c      	mov	r4, r1
 8003018:	469a      	mov	sl, r3
 800301a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800301e:	d807      	bhi.n	8003030 <_printf_i+0x28>
 8003020:	2f62      	cmp	r7, #98	; 0x62
 8003022:	d80a      	bhi.n	800303a <_printf_i+0x32>
 8003024:	2f00      	cmp	r7, #0
 8003026:	f000 80d8 	beq.w	80031da <_printf_i+0x1d2>
 800302a:	2f58      	cmp	r7, #88	; 0x58
 800302c:	f000 80a3 	beq.w	8003176 <_printf_i+0x16e>
 8003030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003038:	e03a      	b.n	80030b0 <_printf_i+0xa8>
 800303a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800303e:	2b15      	cmp	r3, #21
 8003040:	d8f6      	bhi.n	8003030 <_printf_i+0x28>
 8003042:	a101      	add	r1, pc, #4	; (adr r1, 8003048 <_printf_i+0x40>)
 8003044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030b5 	.word	0x080030b5
 8003050:	08003031 	.word	0x08003031
 8003054:	08003031 	.word	0x08003031
 8003058:	08003031 	.word	0x08003031
 800305c:	08003031 	.word	0x08003031
 8003060:	080030b5 	.word	0x080030b5
 8003064:	08003031 	.word	0x08003031
 8003068:	08003031 	.word	0x08003031
 800306c:	08003031 	.word	0x08003031
 8003070:	08003031 	.word	0x08003031
 8003074:	080031c1 	.word	0x080031c1
 8003078:	080030e5 	.word	0x080030e5
 800307c:	080031a3 	.word	0x080031a3
 8003080:	08003031 	.word	0x08003031
 8003084:	08003031 	.word	0x08003031
 8003088:	080031e3 	.word	0x080031e3
 800308c:	08003031 	.word	0x08003031
 8003090:	080030e5 	.word	0x080030e5
 8003094:	08003031 	.word	0x08003031
 8003098:	08003031 	.word	0x08003031
 800309c:	080031ab 	.word	0x080031ab
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	1d1a      	adds	r2, r3, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	602a      	str	r2, [r5, #0]
 80030a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0a3      	b.n	80031fc <_printf_i+0x1f4>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	6829      	ldr	r1, [r5, #0]
 80030b8:	0606      	lsls	r6, r0, #24
 80030ba:	f101 0304 	add.w	r3, r1, #4
 80030be:	d50a      	bpl.n	80030d6 <_printf_i+0xce>
 80030c0:	680e      	ldr	r6, [r1, #0]
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	2e00      	cmp	r6, #0
 80030c6:	da03      	bge.n	80030d0 <_printf_i+0xc8>
 80030c8:	232d      	movs	r3, #45	; 0x2d
 80030ca:	4276      	negs	r6, r6
 80030cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030d0:	485e      	ldr	r0, [pc, #376]	; (800324c <_printf_i+0x244>)
 80030d2:	230a      	movs	r3, #10
 80030d4:	e019      	b.n	800310a <_printf_i+0x102>
 80030d6:	680e      	ldr	r6, [r1, #0]
 80030d8:	602b      	str	r3, [r5, #0]
 80030da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030de:	bf18      	it	ne
 80030e0:	b236      	sxthne	r6, r6
 80030e2:	e7ef      	b.n	80030c4 <_printf_i+0xbc>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	1d19      	adds	r1, r3, #4
 80030ea:	6029      	str	r1, [r5, #0]
 80030ec:	0601      	lsls	r1, r0, #24
 80030ee:	d501      	bpl.n	80030f4 <_printf_i+0xec>
 80030f0:	681e      	ldr	r6, [r3, #0]
 80030f2:	e002      	b.n	80030fa <_printf_i+0xf2>
 80030f4:	0646      	lsls	r6, r0, #25
 80030f6:	d5fb      	bpl.n	80030f0 <_printf_i+0xe8>
 80030f8:	881e      	ldrh	r6, [r3, #0]
 80030fa:	4854      	ldr	r0, [pc, #336]	; (800324c <_printf_i+0x244>)
 80030fc:	2f6f      	cmp	r7, #111	; 0x6f
 80030fe:	bf0c      	ite	eq
 8003100:	2308      	moveq	r3, #8
 8003102:	230a      	movne	r3, #10
 8003104:	2100      	movs	r1, #0
 8003106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800310a:	6865      	ldr	r5, [r4, #4]
 800310c:	60a5      	str	r5, [r4, #8]
 800310e:	2d00      	cmp	r5, #0
 8003110:	bfa2      	ittt	ge
 8003112:	6821      	ldrge	r1, [r4, #0]
 8003114:	f021 0104 	bicge.w	r1, r1, #4
 8003118:	6021      	strge	r1, [r4, #0]
 800311a:	b90e      	cbnz	r6, 8003120 <_printf_i+0x118>
 800311c:	2d00      	cmp	r5, #0
 800311e:	d04d      	beq.n	80031bc <_printf_i+0x1b4>
 8003120:	4615      	mov	r5, r2
 8003122:	fbb6 f1f3 	udiv	r1, r6, r3
 8003126:	fb03 6711 	mls	r7, r3, r1, r6
 800312a:	5dc7      	ldrb	r7, [r0, r7]
 800312c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003130:	4637      	mov	r7, r6
 8003132:	42bb      	cmp	r3, r7
 8003134:	460e      	mov	r6, r1
 8003136:	d9f4      	bls.n	8003122 <_printf_i+0x11a>
 8003138:	2b08      	cmp	r3, #8
 800313a:	d10b      	bne.n	8003154 <_printf_i+0x14c>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	07de      	lsls	r6, r3, #31
 8003140:	d508      	bpl.n	8003154 <_printf_i+0x14c>
 8003142:	6923      	ldr	r3, [r4, #16]
 8003144:	6861      	ldr	r1, [r4, #4]
 8003146:	4299      	cmp	r1, r3
 8003148:	bfde      	ittt	le
 800314a:	2330      	movle	r3, #48	; 0x30
 800314c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003150:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003154:	1b52      	subs	r2, r2, r5
 8003156:	6122      	str	r2, [r4, #16]
 8003158:	f8cd a000 	str.w	sl, [sp]
 800315c:	464b      	mov	r3, r9
 800315e:	aa03      	add	r2, sp, #12
 8003160:	4621      	mov	r1, r4
 8003162:	4640      	mov	r0, r8
 8003164:	f7ff fee2 	bl	8002f2c <_printf_common>
 8003168:	3001      	adds	r0, #1
 800316a:	d14c      	bne.n	8003206 <_printf_i+0x1fe>
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	b004      	add	sp, #16
 8003172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003176:	4835      	ldr	r0, [pc, #212]	; (800324c <_printf_i+0x244>)
 8003178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800317c:	6829      	ldr	r1, [r5, #0]
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f851 6b04 	ldr.w	r6, [r1], #4
 8003184:	6029      	str	r1, [r5, #0]
 8003186:	061d      	lsls	r5, r3, #24
 8003188:	d514      	bpl.n	80031b4 <_printf_i+0x1ac>
 800318a:	07df      	lsls	r7, r3, #31
 800318c:	bf44      	itt	mi
 800318e:	f043 0320 	orrmi.w	r3, r3, #32
 8003192:	6023      	strmi	r3, [r4, #0]
 8003194:	b91e      	cbnz	r6, 800319e <_printf_i+0x196>
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f023 0320 	bic.w	r3, r3, #32
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	2310      	movs	r3, #16
 80031a0:	e7b0      	b.n	8003104 <_printf_i+0xfc>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	2378      	movs	r3, #120	; 0x78
 80031ac:	4828      	ldr	r0, [pc, #160]	; (8003250 <_printf_i+0x248>)
 80031ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031b2:	e7e3      	b.n	800317c <_printf_i+0x174>
 80031b4:	0659      	lsls	r1, r3, #25
 80031b6:	bf48      	it	mi
 80031b8:	b2b6      	uxthmi	r6, r6
 80031ba:	e7e6      	b.n	800318a <_printf_i+0x182>
 80031bc:	4615      	mov	r5, r2
 80031be:	e7bb      	b.n	8003138 <_printf_i+0x130>
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	6826      	ldr	r6, [r4, #0]
 80031c4:	6961      	ldr	r1, [r4, #20]
 80031c6:	1d18      	adds	r0, r3, #4
 80031c8:	6028      	str	r0, [r5, #0]
 80031ca:	0635      	lsls	r5, r6, #24
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	d501      	bpl.n	80031d4 <_printf_i+0x1cc>
 80031d0:	6019      	str	r1, [r3, #0]
 80031d2:	e002      	b.n	80031da <_printf_i+0x1d2>
 80031d4:	0670      	lsls	r0, r6, #25
 80031d6:	d5fb      	bpl.n	80031d0 <_printf_i+0x1c8>
 80031d8:	8019      	strh	r1, [r3, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	6123      	str	r3, [r4, #16]
 80031de:	4615      	mov	r5, r2
 80031e0:	e7ba      	b.n	8003158 <_printf_i+0x150>
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	602a      	str	r2, [r5, #0]
 80031e8:	681d      	ldr	r5, [r3, #0]
 80031ea:	6862      	ldr	r2, [r4, #4]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7fc fff6 	bl	80001e0 <memchr>
 80031f4:	b108      	cbz	r0, 80031fa <_printf_i+0x1f2>
 80031f6:	1b40      	subs	r0, r0, r5
 80031f8:	6060      	str	r0, [r4, #4]
 80031fa:	6863      	ldr	r3, [r4, #4]
 80031fc:	6123      	str	r3, [r4, #16]
 80031fe:	2300      	movs	r3, #0
 8003200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003204:	e7a8      	b.n	8003158 <_printf_i+0x150>
 8003206:	6923      	ldr	r3, [r4, #16]
 8003208:	462a      	mov	r2, r5
 800320a:	4649      	mov	r1, r9
 800320c:	4640      	mov	r0, r8
 800320e:	47d0      	blx	sl
 8003210:	3001      	adds	r0, #1
 8003212:	d0ab      	beq.n	800316c <_printf_i+0x164>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	079b      	lsls	r3, r3, #30
 8003218:	d413      	bmi.n	8003242 <_printf_i+0x23a>
 800321a:	68e0      	ldr	r0, [r4, #12]
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	4298      	cmp	r0, r3
 8003220:	bfb8      	it	lt
 8003222:	4618      	movlt	r0, r3
 8003224:	e7a4      	b.n	8003170 <_printf_i+0x168>
 8003226:	2301      	movs	r3, #1
 8003228:	4632      	mov	r2, r6
 800322a:	4649      	mov	r1, r9
 800322c:	4640      	mov	r0, r8
 800322e:	47d0      	blx	sl
 8003230:	3001      	adds	r0, #1
 8003232:	d09b      	beq.n	800316c <_printf_i+0x164>
 8003234:	3501      	adds	r5, #1
 8003236:	68e3      	ldr	r3, [r4, #12]
 8003238:	9903      	ldr	r1, [sp, #12]
 800323a:	1a5b      	subs	r3, r3, r1
 800323c:	42ab      	cmp	r3, r5
 800323e:	dcf2      	bgt.n	8003226 <_printf_i+0x21e>
 8003240:	e7eb      	b.n	800321a <_printf_i+0x212>
 8003242:	2500      	movs	r5, #0
 8003244:	f104 0619 	add.w	r6, r4, #25
 8003248:	e7f5      	b.n	8003236 <_printf_i+0x22e>
 800324a:	bf00      	nop
 800324c:	08003e39 	.word	0x08003e39
 8003250:	08003e4a 	.word	0x08003e4a

08003254 <_sbrk_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4d06      	ldr	r5, [pc, #24]	; (8003270 <_sbrk_r+0x1c>)
 8003258:	2300      	movs	r3, #0
 800325a:	4604      	mov	r4, r0
 800325c:	4608      	mov	r0, r1
 800325e:	602b      	str	r3, [r5, #0]
 8003260:	f7fd fca6 	bl	8000bb0 <_sbrk>
 8003264:	1c43      	adds	r3, r0, #1
 8003266:	d102      	bne.n	800326e <_sbrk_r+0x1a>
 8003268:	682b      	ldr	r3, [r5, #0]
 800326a:	b103      	cbz	r3, 800326e <_sbrk_r+0x1a>
 800326c:	6023      	str	r3, [r4, #0]
 800326e:	bd38      	pop	{r3, r4, r5, pc}
 8003270:	20000298 	.word	0x20000298

08003274 <__sread>:
 8003274:	b510      	push	{r4, lr}
 8003276:	460c      	mov	r4, r1
 8003278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800327c:	f000 fab2 	bl	80037e4 <_read_r>
 8003280:	2800      	cmp	r0, #0
 8003282:	bfab      	itete	ge
 8003284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003286:	89a3      	ldrhlt	r3, [r4, #12]
 8003288:	181b      	addge	r3, r3, r0
 800328a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800328e:	bfac      	ite	ge
 8003290:	6563      	strge	r3, [r4, #84]	; 0x54
 8003292:	81a3      	strhlt	r3, [r4, #12]
 8003294:	bd10      	pop	{r4, pc}

08003296 <__swrite>:
 8003296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800329a:	461f      	mov	r7, r3
 800329c:	898b      	ldrh	r3, [r1, #12]
 800329e:	05db      	lsls	r3, r3, #23
 80032a0:	4605      	mov	r5, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	4616      	mov	r6, r2
 80032a6:	d505      	bpl.n	80032b4 <__swrite+0x1e>
 80032a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ac:	2302      	movs	r3, #2
 80032ae:	2200      	movs	r2, #0
 80032b0:	f000 f9c8 	bl	8003644 <_lseek_r>
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032be:	81a3      	strh	r3, [r4, #12]
 80032c0:	4632      	mov	r2, r6
 80032c2:	463b      	mov	r3, r7
 80032c4:	4628      	mov	r0, r5
 80032c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032ca:	f000 b869 	b.w	80033a0 <_write_r>

080032ce <__sseek>:
 80032ce:	b510      	push	{r4, lr}
 80032d0:	460c      	mov	r4, r1
 80032d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032d6:	f000 f9b5 	bl	8003644 <_lseek_r>
 80032da:	1c43      	adds	r3, r0, #1
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	bf15      	itete	ne
 80032e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80032e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032ea:	81a3      	strheq	r3, [r4, #12]
 80032ec:	bf18      	it	ne
 80032ee:	81a3      	strhne	r3, [r4, #12]
 80032f0:	bd10      	pop	{r4, pc}

080032f2 <__sclose>:
 80032f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f6:	f000 b8d3 	b.w	80034a0 <_close_r>
	...

080032fc <__swbuf_r>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	460e      	mov	r6, r1
 8003300:	4614      	mov	r4, r2
 8003302:	4605      	mov	r5, r0
 8003304:	b118      	cbz	r0, 800330e <__swbuf_r+0x12>
 8003306:	6983      	ldr	r3, [r0, #24]
 8003308:	b90b      	cbnz	r3, 800330e <__swbuf_r+0x12>
 800330a:	f7ff fb81 	bl	8002a10 <__sinit>
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <__swbuf_r+0x98>)
 8003310:	429c      	cmp	r4, r3
 8003312:	d12b      	bne.n	800336c <__swbuf_r+0x70>
 8003314:	686c      	ldr	r4, [r5, #4]
 8003316:	69a3      	ldr	r3, [r4, #24]
 8003318:	60a3      	str	r3, [r4, #8]
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	071a      	lsls	r2, r3, #28
 800331e:	d52f      	bpl.n	8003380 <__swbuf_r+0x84>
 8003320:	6923      	ldr	r3, [r4, #16]
 8003322:	b36b      	cbz	r3, 8003380 <__swbuf_r+0x84>
 8003324:	6923      	ldr	r3, [r4, #16]
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	1ac0      	subs	r0, r0, r3
 800332a:	6963      	ldr	r3, [r4, #20]
 800332c:	b2f6      	uxtb	r6, r6
 800332e:	4283      	cmp	r3, r0
 8003330:	4637      	mov	r7, r6
 8003332:	dc04      	bgt.n	800333e <__swbuf_r+0x42>
 8003334:	4621      	mov	r1, r4
 8003336:	4628      	mov	r0, r5
 8003338:	f000 f948 	bl	80035cc <_fflush_r>
 800333c:	bb30      	cbnz	r0, 800338c <__swbuf_r+0x90>
 800333e:	68a3      	ldr	r3, [r4, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60a3      	str	r3, [r4, #8]
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	6022      	str	r2, [r4, #0]
 800334a:	701e      	strb	r6, [r3, #0]
 800334c:	6963      	ldr	r3, [r4, #20]
 800334e:	3001      	adds	r0, #1
 8003350:	4283      	cmp	r3, r0
 8003352:	d004      	beq.n	800335e <__swbuf_r+0x62>
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	07db      	lsls	r3, r3, #31
 8003358:	d506      	bpl.n	8003368 <__swbuf_r+0x6c>
 800335a:	2e0a      	cmp	r6, #10
 800335c:	d104      	bne.n	8003368 <__swbuf_r+0x6c>
 800335e:	4621      	mov	r1, r4
 8003360:	4628      	mov	r0, r5
 8003362:	f000 f933 	bl	80035cc <_fflush_r>
 8003366:	b988      	cbnz	r0, 800338c <__swbuf_r+0x90>
 8003368:	4638      	mov	r0, r7
 800336a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <__swbuf_r+0x9c>)
 800336e:	429c      	cmp	r4, r3
 8003370:	d101      	bne.n	8003376 <__swbuf_r+0x7a>
 8003372:	68ac      	ldr	r4, [r5, #8]
 8003374:	e7cf      	b.n	8003316 <__swbuf_r+0x1a>
 8003376:	4b09      	ldr	r3, [pc, #36]	; (800339c <__swbuf_r+0xa0>)
 8003378:	429c      	cmp	r4, r3
 800337a:	bf08      	it	eq
 800337c:	68ec      	ldreq	r4, [r5, #12]
 800337e:	e7ca      	b.n	8003316 <__swbuf_r+0x1a>
 8003380:	4621      	mov	r1, r4
 8003382:	4628      	mov	r0, r5
 8003384:	f000 f81e 	bl	80033c4 <__swsetup_r>
 8003388:	2800      	cmp	r0, #0
 800338a:	d0cb      	beq.n	8003324 <__swbuf_r+0x28>
 800338c:	f04f 37ff 	mov.w	r7, #4294967295
 8003390:	e7ea      	b.n	8003368 <__swbuf_r+0x6c>
 8003392:	bf00      	nop
 8003394:	08003de8 	.word	0x08003de8
 8003398:	08003e08 	.word	0x08003e08
 800339c:	08003dc8 	.word	0x08003dc8

080033a0 <_write_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4d07      	ldr	r5, [pc, #28]	; (80033c0 <_write_r+0x20>)
 80033a4:	4604      	mov	r4, r0
 80033a6:	4608      	mov	r0, r1
 80033a8:	4611      	mov	r1, r2
 80033aa:	2200      	movs	r2, #0
 80033ac:	602a      	str	r2, [r5, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 faf3 	bl	800399a <_write>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_write_r+0x1e>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b103      	cbz	r3, 80033be <_write_r+0x1e>
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000298 	.word	0x20000298

080033c4 <__swsetup_r>:
 80033c4:	4b32      	ldr	r3, [pc, #200]	; (8003490 <__swsetup_r+0xcc>)
 80033c6:	b570      	push	{r4, r5, r6, lr}
 80033c8:	681d      	ldr	r5, [r3, #0]
 80033ca:	4606      	mov	r6, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	b125      	cbz	r5, 80033da <__swsetup_r+0x16>
 80033d0:	69ab      	ldr	r3, [r5, #24]
 80033d2:	b913      	cbnz	r3, 80033da <__swsetup_r+0x16>
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7ff fb1b 	bl	8002a10 <__sinit>
 80033da:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <__swsetup_r+0xd0>)
 80033dc:	429c      	cmp	r4, r3
 80033de:	d10f      	bne.n	8003400 <__swsetup_r+0x3c>
 80033e0:	686c      	ldr	r4, [r5, #4]
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033e8:	0719      	lsls	r1, r3, #28
 80033ea:	d42c      	bmi.n	8003446 <__swsetup_r+0x82>
 80033ec:	06dd      	lsls	r5, r3, #27
 80033ee:	d411      	bmi.n	8003414 <__swsetup_r+0x50>
 80033f0:	2309      	movs	r3, #9
 80033f2:	6033      	str	r3, [r6, #0]
 80033f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	f04f 30ff 	mov.w	r0, #4294967295
 80033fe:	e03e      	b.n	800347e <__swsetup_r+0xba>
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <__swsetup_r+0xd4>)
 8003402:	429c      	cmp	r4, r3
 8003404:	d101      	bne.n	800340a <__swsetup_r+0x46>
 8003406:	68ac      	ldr	r4, [r5, #8]
 8003408:	e7eb      	b.n	80033e2 <__swsetup_r+0x1e>
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <__swsetup_r+0xd8>)
 800340c:	429c      	cmp	r4, r3
 800340e:	bf08      	it	eq
 8003410:	68ec      	ldreq	r4, [r5, #12]
 8003412:	e7e6      	b.n	80033e2 <__swsetup_r+0x1e>
 8003414:	0758      	lsls	r0, r3, #29
 8003416:	d512      	bpl.n	800343e <__swsetup_r+0x7a>
 8003418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800341a:	b141      	cbz	r1, 800342e <__swsetup_r+0x6a>
 800341c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003420:	4299      	cmp	r1, r3
 8003422:	d002      	beq.n	800342a <__swsetup_r+0x66>
 8003424:	4630      	mov	r0, r6
 8003426:	f000 f991 	bl	800374c <_free_r>
 800342a:	2300      	movs	r3, #0
 800342c:	6363      	str	r3, [r4, #52]	; 0x34
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	2300      	movs	r3, #0
 8003438:	6063      	str	r3, [r4, #4]
 800343a:	6923      	ldr	r3, [r4, #16]
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	89a3      	ldrh	r3, [r4, #12]
 8003440:	f043 0308 	orr.w	r3, r3, #8
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	6923      	ldr	r3, [r4, #16]
 8003448:	b94b      	cbnz	r3, 800345e <__swsetup_r+0x9a>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003454:	d003      	beq.n	800345e <__swsetup_r+0x9a>
 8003456:	4621      	mov	r1, r4
 8003458:	4630      	mov	r0, r6
 800345a:	f000 f92b 	bl	80036b4 <__smakebuf_r>
 800345e:	89a0      	ldrh	r0, [r4, #12]
 8003460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003464:	f010 0301 	ands.w	r3, r0, #1
 8003468:	d00a      	beq.n	8003480 <__swsetup_r+0xbc>
 800346a:	2300      	movs	r3, #0
 800346c:	60a3      	str	r3, [r4, #8]
 800346e:	6963      	ldr	r3, [r4, #20]
 8003470:	425b      	negs	r3, r3
 8003472:	61a3      	str	r3, [r4, #24]
 8003474:	6923      	ldr	r3, [r4, #16]
 8003476:	b943      	cbnz	r3, 800348a <__swsetup_r+0xc6>
 8003478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800347c:	d1ba      	bne.n	80033f4 <__swsetup_r+0x30>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	0781      	lsls	r1, r0, #30
 8003482:	bf58      	it	pl
 8003484:	6963      	ldrpl	r3, [r4, #20]
 8003486:	60a3      	str	r3, [r4, #8]
 8003488:	e7f4      	b.n	8003474 <__swsetup_r+0xb0>
 800348a:	2000      	movs	r0, #0
 800348c:	e7f7      	b.n	800347e <__swsetup_r+0xba>
 800348e:	bf00      	nop
 8003490:	2000000c 	.word	0x2000000c
 8003494:	08003de8 	.word	0x08003de8
 8003498:	08003e08 	.word	0x08003e08
 800349c:	08003dc8 	.word	0x08003dc8

080034a0 <_close_r>:
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4d06      	ldr	r5, [pc, #24]	; (80034bc <_close_r+0x1c>)
 80034a4:	2300      	movs	r3, #0
 80034a6:	4604      	mov	r4, r0
 80034a8:	4608      	mov	r0, r1
 80034aa:	602b      	str	r3, [r5, #0]
 80034ac:	f000 faa6 	bl	80039fc <_close>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d102      	bne.n	80034ba <_close_r+0x1a>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	b103      	cbz	r3, 80034ba <_close_r+0x1a>
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	20000298 	.word	0x20000298

080034c0 <__sflush_r>:
 80034c0:	898a      	ldrh	r2, [r1, #12]
 80034c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c6:	4605      	mov	r5, r0
 80034c8:	0710      	lsls	r0, r2, #28
 80034ca:	460c      	mov	r4, r1
 80034cc:	d458      	bmi.n	8003580 <__sflush_r+0xc0>
 80034ce:	684b      	ldr	r3, [r1, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	dc05      	bgt.n	80034e0 <__sflush_r+0x20>
 80034d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	dc02      	bgt.n	80034e0 <__sflush_r+0x20>
 80034da:	2000      	movs	r0, #0
 80034dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034e2:	2e00      	cmp	r6, #0
 80034e4:	d0f9      	beq.n	80034da <__sflush_r+0x1a>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80034ec:	682f      	ldr	r7, [r5, #0]
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	d032      	beq.n	8003558 <__sflush_r+0x98>
 80034f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	075a      	lsls	r2, r3, #29
 80034f8:	d505      	bpl.n	8003506 <__sflush_r+0x46>
 80034fa:	6863      	ldr	r3, [r4, #4]
 80034fc:	1ac0      	subs	r0, r0, r3
 80034fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003500:	b10b      	cbz	r3, 8003506 <__sflush_r+0x46>
 8003502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003504:	1ac0      	subs	r0, r0, r3
 8003506:	2300      	movs	r3, #0
 8003508:	4602      	mov	r2, r0
 800350a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800350c:	6a21      	ldr	r1, [r4, #32]
 800350e:	4628      	mov	r0, r5
 8003510:	47b0      	blx	r6
 8003512:	1c43      	adds	r3, r0, #1
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	d106      	bne.n	8003526 <__sflush_r+0x66>
 8003518:	6829      	ldr	r1, [r5, #0]
 800351a:	291d      	cmp	r1, #29
 800351c:	d82c      	bhi.n	8003578 <__sflush_r+0xb8>
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <__sflush_r+0x108>)
 8003520:	40ca      	lsrs	r2, r1
 8003522:	07d6      	lsls	r6, r2, #31
 8003524:	d528      	bpl.n	8003578 <__sflush_r+0xb8>
 8003526:	2200      	movs	r2, #0
 8003528:	6062      	str	r2, [r4, #4]
 800352a:	04d9      	lsls	r1, r3, #19
 800352c:	6922      	ldr	r2, [r4, #16]
 800352e:	6022      	str	r2, [r4, #0]
 8003530:	d504      	bpl.n	800353c <__sflush_r+0x7c>
 8003532:	1c42      	adds	r2, r0, #1
 8003534:	d101      	bne.n	800353a <__sflush_r+0x7a>
 8003536:	682b      	ldr	r3, [r5, #0]
 8003538:	b903      	cbnz	r3, 800353c <__sflush_r+0x7c>
 800353a:	6560      	str	r0, [r4, #84]	; 0x54
 800353c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800353e:	602f      	str	r7, [r5, #0]
 8003540:	2900      	cmp	r1, #0
 8003542:	d0ca      	beq.n	80034da <__sflush_r+0x1a>
 8003544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003548:	4299      	cmp	r1, r3
 800354a:	d002      	beq.n	8003552 <__sflush_r+0x92>
 800354c:	4628      	mov	r0, r5
 800354e:	f000 f8fd 	bl	800374c <_free_r>
 8003552:	2000      	movs	r0, #0
 8003554:	6360      	str	r0, [r4, #52]	; 0x34
 8003556:	e7c1      	b.n	80034dc <__sflush_r+0x1c>
 8003558:	6a21      	ldr	r1, [r4, #32]
 800355a:	2301      	movs	r3, #1
 800355c:	4628      	mov	r0, r5
 800355e:	47b0      	blx	r6
 8003560:	1c41      	adds	r1, r0, #1
 8003562:	d1c7      	bne.n	80034f4 <__sflush_r+0x34>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0c4      	beq.n	80034f4 <__sflush_r+0x34>
 800356a:	2b1d      	cmp	r3, #29
 800356c:	d001      	beq.n	8003572 <__sflush_r+0xb2>
 800356e:	2b16      	cmp	r3, #22
 8003570:	d101      	bne.n	8003576 <__sflush_r+0xb6>
 8003572:	602f      	str	r7, [r5, #0]
 8003574:	e7b1      	b.n	80034da <__sflush_r+0x1a>
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	e7ad      	b.n	80034dc <__sflush_r+0x1c>
 8003580:	690f      	ldr	r7, [r1, #16]
 8003582:	2f00      	cmp	r7, #0
 8003584:	d0a9      	beq.n	80034da <__sflush_r+0x1a>
 8003586:	0793      	lsls	r3, r2, #30
 8003588:	680e      	ldr	r6, [r1, #0]
 800358a:	bf08      	it	eq
 800358c:	694b      	ldreq	r3, [r1, #20]
 800358e:	600f      	str	r7, [r1, #0]
 8003590:	bf18      	it	ne
 8003592:	2300      	movne	r3, #0
 8003594:	eba6 0807 	sub.w	r8, r6, r7
 8003598:	608b      	str	r3, [r1, #8]
 800359a:	f1b8 0f00 	cmp.w	r8, #0
 800359e:	dd9c      	ble.n	80034da <__sflush_r+0x1a>
 80035a0:	6a21      	ldr	r1, [r4, #32]
 80035a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035a4:	4643      	mov	r3, r8
 80035a6:	463a      	mov	r2, r7
 80035a8:	4628      	mov	r0, r5
 80035aa:	47b0      	blx	r6
 80035ac:	2800      	cmp	r0, #0
 80035ae:	dc06      	bgt.n	80035be <__sflush_r+0xfe>
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	e78e      	b.n	80034dc <__sflush_r+0x1c>
 80035be:	4407      	add	r7, r0
 80035c0:	eba8 0800 	sub.w	r8, r8, r0
 80035c4:	e7e9      	b.n	800359a <__sflush_r+0xda>
 80035c6:	bf00      	nop
 80035c8:	20400001 	.word	0x20400001

080035cc <_fflush_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	690b      	ldr	r3, [r1, #16]
 80035d0:	4605      	mov	r5, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	b913      	cbnz	r3, 80035dc <_fflush_r+0x10>
 80035d6:	2500      	movs	r5, #0
 80035d8:	4628      	mov	r0, r5
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	b118      	cbz	r0, 80035e6 <_fflush_r+0x1a>
 80035de:	6983      	ldr	r3, [r0, #24]
 80035e0:	b90b      	cbnz	r3, 80035e6 <_fflush_r+0x1a>
 80035e2:	f7ff fa15 	bl	8002a10 <__sinit>
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <_fflush_r+0x6c>)
 80035e8:	429c      	cmp	r4, r3
 80035ea:	d11b      	bne.n	8003624 <_fflush_r+0x58>
 80035ec:	686c      	ldr	r4, [r5, #4]
 80035ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ef      	beq.n	80035d6 <_fflush_r+0xa>
 80035f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035f8:	07d0      	lsls	r0, r2, #31
 80035fa:	d404      	bmi.n	8003606 <_fflush_r+0x3a>
 80035fc:	0599      	lsls	r1, r3, #22
 80035fe:	d402      	bmi.n	8003606 <_fflush_r+0x3a>
 8003600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003602:	f7ff faa3 	bl	8002b4c <__retarget_lock_acquire_recursive>
 8003606:	4628      	mov	r0, r5
 8003608:	4621      	mov	r1, r4
 800360a:	f7ff ff59 	bl	80034c0 <__sflush_r>
 800360e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003610:	07da      	lsls	r2, r3, #31
 8003612:	4605      	mov	r5, r0
 8003614:	d4e0      	bmi.n	80035d8 <_fflush_r+0xc>
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	059b      	lsls	r3, r3, #22
 800361a:	d4dd      	bmi.n	80035d8 <_fflush_r+0xc>
 800361c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800361e:	f7ff fa96 	bl	8002b4e <__retarget_lock_release_recursive>
 8003622:	e7d9      	b.n	80035d8 <_fflush_r+0xc>
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <_fflush_r+0x70>)
 8003626:	429c      	cmp	r4, r3
 8003628:	d101      	bne.n	800362e <_fflush_r+0x62>
 800362a:	68ac      	ldr	r4, [r5, #8]
 800362c:	e7df      	b.n	80035ee <_fflush_r+0x22>
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <_fflush_r+0x74>)
 8003630:	429c      	cmp	r4, r3
 8003632:	bf08      	it	eq
 8003634:	68ec      	ldreq	r4, [r5, #12]
 8003636:	e7da      	b.n	80035ee <_fflush_r+0x22>
 8003638:	08003de8 	.word	0x08003de8
 800363c:	08003e08 	.word	0x08003e08
 8003640:	08003dc8 	.word	0x08003dc8

08003644 <_lseek_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4d07      	ldr	r5, [pc, #28]	; (8003664 <_lseek_r+0x20>)
 8003648:	4604      	mov	r4, r0
 800364a:	4608      	mov	r0, r1
 800364c:	4611      	mov	r1, r2
 800364e:	2200      	movs	r2, #0
 8003650:	602a      	str	r2, [r5, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	f000 f98f 	bl	8003976 <_lseek>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	d102      	bne.n	8003662 <_lseek_r+0x1e>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b103      	cbz	r3, 8003662 <_lseek_r+0x1e>
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	bd38      	pop	{r3, r4, r5, pc}
 8003664:	20000298 	.word	0x20000298

08003668 <__swhatbuf_r>:
 8003668:	b570      	push	{r4, r5, r6, lr}
 800366a:	460e      	mov	r6, r1
 800366c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003670:	2900      	cmp	r1, #0
 8003672:	b096      	sub	sp, #88	; 0x58
 8003674:	4614      	mov	r4, r2
 8003676:	461d      	mov	r5, r3
 8003678:	da08      	bge.n	800368c <__swhatbuf_r+0x24>
 800367a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	602a      	str	r2, [r5, #0]
 8003682:	061a      	lsls	r2, r3, #24
 8003684:	d410      	bmi.n	80036a8 <__swhatbuf_r+0x40>
 8003686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800368a:	e00e      	b.n	80036aa <__swhatbuf_r+0x42>
 800368c:	466a      	mov	r2, sp
 800368e:	f000 f8bb 	bl	8003808 <_fstat_r>
 8003692:	2800      	cmp	r0, #0
 8003694:	dbf1      	blt.n	800367a <__swhatbuf_r+0x12>
 8003696:	9a01      	ldr	r2, [sp, #4]
 8003698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800369c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036a0:	425a      	negs	r2, r3
 80036a2:	415a      	adcs	r2, r3
 80036a4:	602a      	str	r2, [r5, #0]
 80036a6:	e7ee      	b.n	8003686 <__swhatbuf_r+0x1e>
 80036a8:	2340      	movs	r3, #64	; 0x40
 80036aa:	2000      	movs	r0, #0
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	b016      	add	sp, #88	; 0x58
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080036b4 <__smakebuf_r>:
 80036b4:	898b      	ldrh	r3, [r1, #12]
 80036b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036b8:	079d      	lsls	r5, r3, #30
 80036ba:	4606      	mov	r6, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	d507      	bpl.n	80036d0 <__smakebuf_r+0x1c>
 80036c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	6123      	str	r3, [r4, #16]
 80036c8:	2301      	movs	r3, #1
 80036ca:	6163      	str	r3, [r4, #20]
 80036cc:	b002      	add	sp, #8
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	ab01      	add	r3, sp, #4
 80036d2:	466a      	mov	r2, sp
 80036d4:	f7ff ffc8 	bl	8003668 <__swhatbuf_r>
 80036d8:	9900      	ldr	r1, [sp, #0]
 80036da:	4605      	mov	r5, r0
 80036dc:	4630      	mov	r0, r6
 80036de:	f7ff fa57 	bl	8002b90 <_malloc_r>
 80036e2:	b948      	cbnz	r0, 80036f8 <__smakebuf_r+0x44>
 80036e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e8:	059a      	lsls	r2, r3, #22
 80036ea:	d4ef      	bmi.n	80036cc <__smakebuf_r+0x18>
 80036ec:	f023 0303 	bic.w	r3, r3, #3
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	e7e3      	b.n	80036c0 <__smakebuf_r+0xc>
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <__smakebuf_r+0x7c>)
 80036fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	6020      	str	r0, [r4, #0]
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	9b00      	ldr	r3, [sp, #0]
 8003708:	6163      	str	r3, [r4, #20]
 800370a:	9b01      	ldr	r3, [sp, #4]
 800370c:	6120      	str	r0, [r4, #16]
 800370e:	b15b      	cbz	r3, 8003728 <__smakebuf_r+0x74>
 8003710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003714:	4630      	mov	r0, r6
 8003716:	f000 f889 	bl	800382c <_isatty_r>
 800371a:	b128      	cbz	r0, 8003728 <__smakebuf_r+0x74>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	89a0      	ldrh	r0, [r4, #12]
 800372a:	4305      	orrs	r5, r0
 800372c:	81a5      	strh	r5, [r4, #12]
 800372e:	e7cd      	b.n	80036cc <__smakebuf_r+0x18>
 8003730:	080029a9 	.word	0x080029a9

08003734 <__malloc_lock>:
 8003734:	4801      	ldr	r0, [pc, #4]	; (800373c <__malloc_lock+0x8>)
 8003736:	f7ff ba09 	b.w	8002b4c <__retarget_lock_acquire_recursive>
 800373a:	bf00      	nop
 800373c:	2000028c 	.word	0x2000028c

08003740 <__malloc_unlock>:
 8003740:	4801      	ldr	r0, [pc, #4]	; (8003748 <__malloc_unlock+0x8>)
 8003742:	f7ff ba04 	b.w	8002b4e <__retarget_lock_release_recursive>
 8003746:	bf00      	nop
 8003748:	2000028c 	.word	0x2000028c

0800374c <_free_r>:
 800374c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800374e:	2900      	cmp	r1, #0
 8003750:	d044      	beq.n	80037dc <_free_r+0x90>
 8003752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003756:	9001      	str	r0, [sp, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f1a1 0404 	sub.w	r4, r1, #4
 800375e:	bfb8      	it	lt
 8003760:	18e4      	addlt	r4, r4, r3
 8003762:	f7ff ffe7 	bl	8003734 <__malloc_lock>
 8003766:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <_free_r+0x94>)
 8003768:	9801      	ldr	r0, [sp, #4]
 800376a:	6813      	ldr	r3, [r2, #0]
 800376c:	b933      	cbnz	r3, 800377c <_free_r+0x30>
 800376e:	6063      	str	r3, [r4, #4]
 8003770:	6014      	str	r4, [r2, #0]
 8003772:	b003      	add	sp, #12
 8003774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003778:	f7ff bfe2 	b.w	8003740 <__malloc_unlock>
 800377c:	42a3      	cmp	r3, r4
 800377e:	d908      	bls.n	8003792 <_free_r+0x46>
 8003780:	6825      	ldr	r5, [r4, #0]
 8003782:	1961      	adds	r1, r4, r5
 8003784:	428b      	cmp	r3, r1
 8003786:	bf01      	itttt	eq
 8003788:	6819      	ldreq	r1, [r3, #0]
 800378a:	685b      	ldreq	r3, [r3, #4]
 800378c:	1949      	addeq	r1, r1, r5
 800378e:	6021      	streq	r1, [r4, #0]
 8003790:	e7ed      	b.n	800376e <_free_r+0x22>
 8003792:	461a      	mov	r2, r3
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	b10b      	cbz	r3, 800379c <_free_r+0x50>
 8003798:	42a3      	cmp	r3, r4
 800379a:	d9fa      	bls.n	8003792 <_free_r+0x46>
 800379c:	6811      	ldr	r1, [r2, #0]
 800379e:	1855      	adds	r5, r2, r1
 80037a0:	42a5      	cmp	r5, r4
 80037a2:	d10b      	bne.n	80037bc <_free_r+0x70>
 80037a4:	6824      	ldr	r4, [r4, #0]
 80037a6:	4421      	add	r1, r4
 80037a8:	1854      	adds	r4, r2, r1
 80037aa:	42a3      	cmp	r3, r4
 80037ac:	6011      	str	r1, [r2, #0]
 80037ae:	d1e0      	bne.n	8003772 <_free_r+0x26>
 80037b0:	681c      	ldr	r4, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	6053      	str	r3, [r2, #4]
 80037b6:	4421      	add	r1, r4
 80037b8:	6011      	str	r1, [r2, #0]
 80037ba:	e7da      	b.n	8003772 <_free_r+0x26>
 80037bc:	d902      	bls.n	80037c4 <_free_r+0x78>
 80037be:	230c      	movs	r3, #12
 80037c0:	6003      	str	r3, [r0, #0]
 80037c2:	e7d6      	b.n	8003772 <_free_r+0x26>
 80037c4:	6825      	ldr	r5, [r4, #0]
 80037c6:	1961      	adds	r1, r4, r5
 80037c8:	428b      	cmp	r3, r1
 80037ca:	bf04      	itt	eq
 80037cc:	6819      	ldreq	r1, [r3, #0]
 80037ce:	685b      	ldreq	r3, [r3, #4]
 80037d0:	6063      	str	r3, [r4, #4]
 80037d2:	bf04      	itt	eq
 80037d4:	1949      	addeq	r1, r1, r5
 80037d6:	6021      	streq	r1, [r4, #0]
 80037d8:	6054      	str	r4, [r2, #4]
 80037da:	e7ca      	b.n	8003772 <_free_r+0x26>
 80037dc:	b003      	add	sp, #12
 80037de:	bd30      	pop	{r4, r5, pc}
 80037e0:	20000290 	.word	0x20000290

080037e4 <_read_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d07      	ldr	r5, [pc, #28]	; (8003804 <_read_r+0x20>)
 80037e8:	4604      	mov	r4, r0
 80037ea:	4608      	mov	r0, r1
 80037ec:	4611      	mov	r1, r2
 80037ee:	2200      	movs	r2, #0
 80037f0:	602a      	str	r2, [r5, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f000 f867 	bl	80038c6 <_read>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_read_r+0x1e>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_read_r+0x1e>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	20000298 	.word	0x20000298

08003808 <_fstat_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4d07      	ldr	r5, [pc, #28]	; (8003828 <_fstat_r+0x20>)
 800380c:	2300      	movs	r3, #0
 800380e:	4604      	mov	r4, r0
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	602b      	str	r3, [r5, #0]
 8003816:	f000 f938 	bl	8003a8a <_fstat>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d102      	bne.n	8003824 <_fstat_r+0x1c>
 800381e:	682b      	ldr	r3, [r5, #0]
 8003820:	b103      	cbz	r3, 8003824 <_fstat_r+0x1c>
 8003822:	6023      	str	r3, [r4, #0]
 8003824:	bd38      	pop	{r3, r4, r5, pc}
 8003826:	bf00      	nop
 8003828:	20000298 	.word	0x20000298

0800382c <_isatty_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4d06      	ldr	r5, [pc, #24]	; (8003848 <_isatty_r+0x1c>)
 8003830:	2300      	movs	r3, #0
 8003832:	4604      	mov	r4, r0
 8003834:	4608      	mov	r0, r1
 8003836:	602b      	str	r3, [r5, #0]
 8003838:	f000 fa8e 	bl	8003d58 <_isatty>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d102      	bne.n	8003846 <_isatty_r+0x1a>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	b103      	cbz	r3, 8003846 <_isatty_r+0x1a>
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	20000298 	.word	0x20000298

0800384c <findslot>:
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <findslot+0x2c>)
 800384e:	b510      	push	{r4, lr}
 8003850:	4604      	mov	r4, r0
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	b118      	cbz	r0, 800385e <findslot+0x12>
 8003856:	6983      	ldr	r3, [r0, #24]
 8003858:	b90b      	cbnz	r3, 800385e <findslot+0x12>
 800385a:	f7ff f8d9 	bl	8002a10 <__sinit>
 800385e:	2c13      	cmp	r4, #19
 8003860:	d807      	bhi.n	8003872 <findslot+0x26>
 8003862:	4806      	ldr	r0, [pc, #24]	; (800387c <findslot+0x30>)
 8003864:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003868:	3201      	adds	r2, #1
 800386a:	d002      	beq.n	8003872 <findslot+0x26>
 800386c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003870:	bd10      	pop	{r4, pc}
 8003872:	2000      	movs	r0, #0
 8003874:	e7fc      	b.n	8003870 <findslot+0x24>
 8003876:	bf00      	nop
 8003878:	2000000c 	.word	0x2000000c
 800387c:	200002a8 	.word	0x200002a8

08003880 <error>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	4604      	mov	r4, r0
 8003884:	f7ff f822 	bl	80028cc <__errno>
 8003888:	2613      	movs	r6, #19
 800388a:	4605      	mov	r5, r0
 800388c:	2700      	movs	r7, #0
 800388e:	4630      	mov	r0, r6
 8003890:	4639      	mov	r1, r7
 8003892:	beab      	bkpt	0x00ab
 8003894:	4606      	mov	r6, r0
 8003896:	602e      	str	r6, [r5, #0]
 8003898:	4620      	mov	r0, r4
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800389c <checkerror>:
 800389c:	1c43      	adds	r3, r0, #1
 800389e:	d101      	bne.n	80038a4 <checkerror+0x8>
 80038a0:	f7ff bfee 	b.w	8003880 <error>
 80038a4:	4770      	bx	lr

080038a6 <_swiread>:
 80038a6:	b530      	push	{r4, r5, lr}
 80038a8:	b085      	sub	sp, #20
 80038aa:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80038ae:	9203      	str	r2, [sp, #12]
 80038b0:	2406      	movs	r4, #6
 80038b2:	ad01      	add	r5, sp, #4
 80038b4:	4620      	mov	r0, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	beab      	bkpt	0x00ab
 80038ba:	4604      	mov	r4, r0
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff ffed 	bl	800389c <checkerror>
 80038c2:	b005      	add	sp, #20
 80038c4:	bd30      	pop	{r4, r5, pc}

080038c6 <_read>:
 80038c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038c8:	4615      	mov	r5, r2
 80038ca:	9101      	str	r1, [sp, #4]
 80038cc:	f7ff ffbe 	bl	800384c <findslot>
 80038d0:	9901      	ldr	r1, [sp, #4]
 80038d2:	4604      	mov	r4, r0
 80038d4:	b938      	cbnz	r0, 80038e6 <_read+0x20>
 80038d6:	f7fe fff9 	bl	80028cc <__errno>
 80038da:	2309      	movs	r3, #9
 80038dc:	6003      	str	r3, [r0, #0]
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	b003      	add	sp, #12
 80038e4:	bd30      	pop	{r4, r5, pc}
 80038e6:	6800      	ldr	r0, [r0, #0]
 80038e8:	462a      	mov	r2, r5
 80038ea:	f7ff ffdc 	bl	80038a6 <_swiread>
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	d0f7      	beq.n	80038e2 <_read+0x1c>
 80038f2:	6863      	ldr	r3, [r4, #4]
 80038f4:	1a2a      	subs	r2, r5, r0
 80038f6:	4413      	add	r3, r2
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	4610      	mov	r0, r2
 80038fc:	e7f1      	b.n	80038e2 <_read+0x1c>

080038fe <_swilseek>:
 80038fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003900:	460c      	mov	r4, r1
 8003902:	4616      	mov	r6, r2
 8003904:	f7ff ffa2 	bl	800384c <findslot>
 8003908:	4605      	mov	r5, r0
 800390a:	b940      	cbnz	r0, 800391e <_swilseek+0x20>
 800390c:	f7fe ffde 	bl	80028cc <__errno>
 8003910:	2309      	movs	r3, #9
 8003912:	6003      	str	r3, [r0, #0]
 8003914:	f04f 34ff 	mov.w	r4, #4294967295
 8003918:	4620      	mov	r0, r4
 800391a:	b003      	add	sp, #12
 800391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391e:	2e02      	cmp	r6, #2
 8003920:	d903      	bls.n	800392a <_swilseek+0x2c>
 8003922:	f7fe ffd3 	bl	80028cc <__errno>
 8003926:	2316      	movs	r3, #22
 8003928:	e7f3      	b.n	8003912 <_swilseek+0x14>
 800392a:	2e01      	cmp	r6, #1
 800392c:	d112      	bne.n	8003954 <_swilseek+0x56>
 800392e:	6843      	ldr	r3, [r0, #4]
 8003930:	18e4      	adds	r4, r4, r3
 8003932:	d4f6      	bmi.n	8003922 <_swilseek+0x24>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	260a      	movs	r6, #10
 8003938:	e9cd 3400 	strd	r3, r4, [sp]
 800393c:	466f      	mov	r7, sp
 800393e:	4630      	mov	r0, r6
 8003940:	4639      	mov	r1, r7
 8003942:	beab      	bkpt	0x00ab
 8003944:	4606      	mov	r6, r0
 8003946:	4630      	mov	r0, r6
 8003948:	f7ff ffa8 	bl	800389c <checkerror>
 800394c:	2800      	cmp	r0, #0
 800394e:	dbe1      	blt.n	8003914 <_swilseek+0x16>
 8003950:	606c      	str	r4, [r5, #4]
 8003952:	e7e1      	b.n	8003918 <_swilseek+0x1a>
 8003954:	2e02      	cmp	r6, #2
 8003956:	d1ed      	bne.n	8003934 <_swilseek+0x36>
 8003958:	6803      	ldr	r3, [r0, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	260c      	movs	r6, #12
 800395e:	466f      	mov	r7, sp
 8003960:	4630      	mov	r0, r6
 8003962:	4639      	mov	r1, r7
 8003964:	beab      	bkpt	0x00ab
 8003966:	4606      	mov	r6, r0
 8003968:	4630      	mov	r0, r6
 800396a:	f7ff ff97 	bl	800389c <checkerror>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d0d0      	beq.n	8003914 <_swilseek+0x16>
 8003972:	4404      	add	r4, r0
 8003974:	e7de      	b.n	8003934 <_swilseek+0x36>

08003976 <_lseek>:
 8003976:	f7ff bfc2 	b.w	80038fe <_swilseek>

0800397a <_swiwrite>:
 800397a:	b530      	push	{r4, r5, lr}
 800397c:	b085      	sub	sp, #20
 800397e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003982:	9203      	str	r2, [sp, #12]
 8003984:	2405      	movs	r4, #5
 8003986:	ad01      	add	r5, sp, #4
 8003988:	4620      	mov	r0, r4
 800398a:	4629      	mov	r1, r5
 800398c:	beab      	bkpt	0x00ab
 800398e:	4604      	mov	r4, r0
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff ff83 	bl	800389c <checkerror>
 8003996:	b005      	add	sp, #20
 8003998:	bd30      	pop	{r4, r5, pc}

0800399a <_write>:
 800399a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800399c:	4615      	mov	r5, r2
 800399e:	9101      	str	r1, [sp, #4]
 80039a0:	f7ff ff54 	bl	800384c <findslot>
 80039a4:	9901      	ldr	r1, [sp, #4]
 80039a6:	4604      	mov	r4, r0
 80039a8:	b930      	cbnz	r0, 80039b8 <_write+0x1e>
 80039aa:	f7fe ff8f 	bl	80028cc <__errno>
 80039ae:	2309      	movs	r3, #9
 80039b0:	6003      	str	r3, [r0, #0]
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	e012      	b.n	80039de <_write+0x44>
 80039b8:	6800      	ldr	r0, [r0, #0]
 80039ba:	462a      	mov	r2, r5
 80039bc:	f7ff ffdd 	bl	800397a <_swiwrite>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	dbf6      	blt.n	80039b2 <_write+0x18>
 80039c4:	6862      	ldr	r2, [r4, #4]
 80039c6:	1a2b      	subs	r3, r5, r0
 80039c8:	441a      	add	r2, r3
 80039ca:	42a8      	cmp	r0, r5
 80039cc:	6062      	str	r2, [r4, #4]
 80039ce:	d105      	bne.n	80039dc <_write+0x42>
 80039d0:	2000      	movs	r0, #0
 80039d2:	b003      	add	sp, #12
 80039d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039d8:	f7ff bf52 	b.w	8003880 <error>
 80039dc:	4618      	mov	r0, r3
 80039de:	b003      	add	sp, #12
 80039e0:	bd30      	pop	{r4, r5, pc}

080039e2 <_swiclose>:
 80039e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039e4:	2402      	movs	r4, #2
 80039e6:	9001      	str	r0, [sp, #4]
 80039e8:	ad01      	add	r5, sp, #4
 80039ea:	4620      	mov	r0, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	beab      	bkpt	0x00ab
 80039f0:	4604      	mov	r4, r0
 80039f2:	4620      	mov	r0, r4
 80039f4:	f7ff ff52 	bl	800389c <checkerror>
 80039f8:	b003      	add	sp, #12
 80039fa:	bd30      	pop	{r4, r5, pc}

080039fc <_close>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4605      	mov	r5, r0
 8003a00:	f7ff ff24 	bl	800384c <findslot>
 8003a04:	4604      	mov	r4, r0
 8003a06:	b930      	cbnz	r0, 8003a16 <_close+0x1a>
 8003a08:	f7fe ff60 	bl	80028cc <__errno>
 8003a0c:	2309      	movs	r3, #9
 8003a0e:	6003      	str	r3, [r0, #0]
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	bd38      	pop	{r3, r4, r5, pc}
 8003a16:	3d01      	subs	r5, #1
 8003a18:	2d01      	cmp	r5, #1
 8003a1a:	d809      	bhi.n	8003a30 <_close+0x34>
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <_close+0x48>)
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d104      	bne.n	8003a30 <_close+0x34>
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	6003      	str	r3, [r0, #0]
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e7f1      	b.n	8003a14 <_close+0x18>
 8003a30:	6820      	ldr	r0, [r4, #0]
 8003a32:	f7ff ffd6 	bl	80039e2 <_swiclose>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d1ec      	bne.n	8003a14 <_close+0x18>
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	e7e8      	b.n	8003a14 <_close+0x18>
 8003a42:	bf00      	nop
 8003a44:	200002a8 	.word	0x200002a8

08003a48 <_swistat>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	f7ff fefe 	bl	800384c <findslot>
 8003a50:	4605      	mov	r5, r0
 8003a52:	b930      	cbnz	r0, 8003a62 <_swistat+0x1a>
 8003a54:	f7fe ff3a 	bl	80028cc <__errno>
 8003a58:	2309      	movs	r3, #9
 8003a5a:	6003      	str	r3, [r0, #0]
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a68:	6063      	str	r3, [r4, #4]
 8003a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a6e:	64a3      	str	r3, [r4, #72]	; 0x48
 8003a70:	260c      	movs	r6, #12
 8003a72:	4630      	mov	r0, r6
 8003a74:	4629      	mov	r1, r5
 8003a76:	beab      	bkpt	0x00ab
 8003a78:	4605      	mov	r5, r0
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7ff ff0e 	bl	800389c <checkerror>
 8003a80:	1c43      	adds	r3, r0, #1
 8003a82:	bf1c      	itt	ne
 8003a84:	6120      	strne	r0, [r4, #16]
 8003a86:	2000      	movne	r0, #0
 8003a88:	e7ea      	b.n	8003a60 <_swistat+0x18>

08003a8a <_fstat>:
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4604      	mov	r4, r0
 8003a92:	2258      	movs	r2, #88	; 0x58
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe ff43 	bl	8002920 <memset>
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa2:	f7ff bfd1 	b.w	8003a48 <_swistat>

08003aa6 <_stat>:
 8003aa6:	b538      	push	{r3, r4, r5, lr}
 8003aa8:	460d      	mov	r5, r1
 8003aaa:	4604      	mov	r4, r0
 8003aac:	2258      	movs	r2, #88	; 0x58
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	f7fe ff35 	bl	8002920 <memset>
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f000 f811 	bl	8003ae0 <_swiopen>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	d00b      	beq.n	8003adc <_stat+0x36>
 8003ac4:	686b      	ldr	r3, [r5, #4]
 8003ac6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003aca:	606b      	str	r3, [r5, #4]
 8003acc:	4629      	mov	r1, r5
 8003ace:	f7ff ffbb 	bl	8003a48 <_swistat>
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff ff91 	bl	80039fc <_close>
 8003ada:	462c      	mov	r4, r5
 8003adc:	4620      	mov	r0, r4
 8003ade:	bd38      	pop	{r3, r4, r5, pc}

08003ae0 <_swiopen>:
 8003ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ae4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003b90 <_swiopen+0xb0>
 8003ae8:	b097      	sub	sp, #92	; 0x5c
 8003aea:	4607      	mov	r7, r0
 8003aec:	460e      	mov	r6, r1
 8003aee:	2500      	movs	r5, #0
 8003af0:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003af4:	1c61      	adds	r1, r4, #1
 8003af6:	d037      	beq.n	8003b68 <_swiopen+0x88>
 8003af8:	3501      	adds	r5, #1
 8003afa:	2d14      	cmp	r5, #20
 8003afc:	d1f8      	bne.n	8003af0 <_swiopen+0x10>
 8003afe:	f7fe fee5 	bl	80028cc <__errno>
 8003b02:	2318      	movs	r3, #24
 8003b04:	6003      	str	r3, [r0, #0]
 8003b06:	f04f 34ff 	mov.w	r4, #4294967295
 8003b0a:	e03d      	b.n	8003b88 <_swiopen+0xa8>
 8003b0c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003b10:	f240 6301 	movw	r3, #1537	; 0x601
 8003b14:	07b2      	lsls	r2, r6, #30
 8003b16:	bf48      	it	mi
 8003b18:	f044 0402 	orrmi.w	r4, r4, #2
 8003b1c:	421e      	tst	r6, r3
 8003b1e:	bf18      	it	ne
 8003b20:	f044 0404 	orrne.w	r4, r4, #4
 8003b24:	0733      	lsls	r3, r6, #28
 8003b26:	bf48      	it	mi
 8003b28:	f024 0404 	bicmi.w	r4, r4, #4
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	bf48      	it	mi
 8003b30:	f044 0408 	orrmi.w	r4, r4, #8
 8003b34:	9700      	str	r7, [sp, #0]
 8003b36:	f7fc fba3 	bl	8000280 <strlen>
 8003b3a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003b3e:	2401      	movs	r4, #1
 8003b40:	4620      	mov	r0, r4
 8003b42:	4649      	mov	r1, r9
 8003b44:	beab      	bkpt	0x00ab
 8003b46:	4604      	mov	r4, r0
 8003b48:	2c00      	cmp	r4, #0
 8003b4a:	db08      	blt.n	8003b5e <_swiopen+0x7e>
 8003b4c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003b50:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c8 3004 	str.w	r3, [r8, #4]
 8003b5a:	462c      	mov	r4, r5
 8003b5c:	e014      	b.n	8003b88 <_swiopen+0xa8>
 8003b5e:	4620      	mov	r0, r4
 8003b60:	f7ff fe8e 	bl	8003880 <error>
 8003b64:	4604      	mov	r4, r0
 8003b66:	e00f      	b.n	8003b88 <_swiopen+0xa8>
 8003b68:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003b6c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003b70:	46e9      	mov	r9, sp
 8003b72:	d1cb      	bne.n	8003b0c <_swiopen+0x2c>
 8003b74:	4649      	mov	r1, r9
 8003b76:	4638      	mov	r0, r7
 8003b78:	f7ff ff95 	bl	8003aa6 <_stat>
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0c5      	beq.n	8003b0c <_swiopen+0x2c>
 8003b80:	f7fe fea4 	bl	80028cc <__errno>
 8003b84:	2311      	movs	r3, #17
 8003b86:	6003      	str	r3, [r0, #0]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	b017      	add	sp, #92	; 0x5c
 8003b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b90:	200002a8 	.word	0x200002a8

08003b94 <_get_semihosting_exts>:
 8003b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b98:	4606      	mov	r6, r0
 8003b9a:	460f      	mov	r7, r1
 8003b9c:	482a      	ldr	r0, [pc, #168]	; (8003c48 <_get_semihosting_exts+0xb4>)
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4615      	mov	r5, r2
 8003ba2:	f7ff ff9d 	bl	8003ae0 <_swiopen>
 8003ba6:	462a      	mov	r2, r5
 8003ba8:	4604      	mov	r4, r0
 8003baa:	2100      	movs	r1, #0
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7fe feb7 	bl	8002920 <memset>
 8003bb2:	1c63      	adds	r3, r4, #1
 8003bb4:	d016      	beq.n	8003be4 <_get_semihosting_exts+0x50>
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff fe48 	bl	800384c <findslot>
 8003bbc:	f04f 090c 	mov.w	r9, #12
 8003bc0:	4680      	mov	r8, r0
 8003bc2:	4648      	mov	r0, r9
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	beab      	bkpt	0x00ab
 8003bc8:	4680      	mov	r8, r0
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7ff fe66 	bl	800389c <checkerror>
 8003bd0:	2803      	cmp	r0, #3
 8003bd2:	dd02      	ble.n	8003bda <_get_semihosting_exts+0x46>
 8003bd4:	1ec3      	subs	r3, r0, #3
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	dc08      	bgt.n	8003bec <_get_semihosting_exts+0x58>
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7ff ff0e 	bl	80039fc <_close>
 8003be0:	f04f 34ff 	mov.w	r4, #4294967295
 8003be4:	4620      	mov	r0, r4
 8003be6:	b003      	add	sp, #12
 8003be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bec:	2204      	movs	r2, #4
 8003bee:	eb0d 0102 	add.w	r1, sp, r2
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff fe67 	bl	80038c6 <_read>
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	ddee      	ble.n	8003bda <_get_semihosting_exts+0x46>
 8003bfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c00:	2b53      	cmp	r3, #83	; 0x53
 8003c02:	d1ea      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003c08:	2b48      	cmp	r3, #72	; 0x48
 8003c0a:	d1e6      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003c10:	2b46      	cmp	r3, #70	; 0x46
 8003c12:	d1e2      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c18:	2b42      	cmp	r3, #66	; 0x42
 8003c1a:	d1de      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4639      	mov	r1, r7
 8003c20:	4620      	mov	r0, r4
 8003c22:	f7ff fe6c 	bl	80038fe <_swilseek>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	dbd7      	blt.n	8003bda <_get_semihosting_exts+0x46>
 8003c2a:	462a      	mov	r2, r5
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff fe49 	bl	80038c6 <_read>
 8003c34:	4605      	mov	r5, r0
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7ff fee0 	bl	80039fc <_close>
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f7ff fe2d 	bl	800389c <checkerror>
 8003c42:	4604      	mov	r4, r0
 8003c44:	e7ce      	b.n	8003be4 <_get_semihosting_exts+0x50>
 8003c46:	bf00      	nop
 8003c48:	08003e5b 	.word	0x08003e5b

08003c4c <initialise_semihosting_exts>:
 8003c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c4e:	4d0a      	ldr	r5, [pc, #40]	; (8003c78 <initialise_semihosting_exts+0x2c>)
 8003c50:	4c0a      	ldr	r4, [pc, #40]	; (8003c7c <initialise_semihosting_exts+0x30>)
 8003c52:	2100      	movs	r1, #0
 8003c54:	2201      	movs	r2, #1
 8003c56:	a801      	add	r0, sp, #4
 8003c58:	6029      	str	r1, [r5, #0]
 8003c5a:	6022      	str	r2, [r4, #0]
 8003c5c:	f7ff ff9a 	bl	8003b94 <_get_semihosting_exts>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	dd07      	ble.n	8003c74 <initialise_semihosting_exts+0x28>
 8003c64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c68:	f003 0201 	and.w	r2, r3, #1
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	602a      	str	r2, [r5, #0]
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	b003      	add	sp, #12
 8003c76:	bd30      	pop	{r4, r5, pc}
 8003c78:	20000070 	.word	0x20000070
 8003c7c:	20000074 	.word	0x20000074

08003c80 <_has_ext_stdout_stderr>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	4c04      	ldr	r4, [pc, #16]	; (8003c94 <_has_ext_stdout_stderr+0x14>)
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da01      	bge.n	8003c8e <_has_ext_stdout_stderr+0xe>
 8003c8a:	f7ff ffdf 	bl	8003c4c <initialise_semihosting_exts>
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	20000074 	.word	0x20000074

08003c98 <initialise_monitor_handles>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003d50 <initialise_monitor_handles+0xb8>
 8003ca2:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	2400      	movs	r4, #0
 8003caa:	9303      	str	r3, [sp, #12]
 8003cac:	af01      	add	r7, sp, #4
 8003cae:	9402      	str	r4, [sp, #8]
 8003cb0:	2501      	movs	r5, #1
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	4639      	mov	r1, r7
 8003cb6:	beab      	bkpt	0x00ab
 8003cb8:	4605      	mov	r5, r0
 8003cba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003d54 <initialise_monitor_handles+0xbc>
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	4c20      	ldr	r4, [pc, #128]	; (8003d44 <initialise_monitor_handles+0xac>)
 8003cc2:	f8c8 5000 	str.w	r5, [r8]
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cca:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	2b14      	cmp	r3, #20
 8003cd2:	d1fa      	bne.n	8003cca <initialise_monitor_handles+0x32>
 8003cd4:	f7ff ffd4 	bl	8003c80 <_has_ext_stdout_stderr>
 8003cd8:	4d1b      	ldr	r5, [pc, #108]	; (8003d48 <initialise_monitor_handles+0xb0>)
 8003cda:	b1d0      	cbz	r0, 8003d12 <initialise_monitor_handles+0x7a>
 8003cdc:	f04f 0a03 	mov.w	sl, #3
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ce6:	2601      	movs	r6, #1
 8003ce8:	f8cd a00c 	str.w	sl, [sp, #12]
 8003cec:	9302      	str	r3, [sp, #8]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	4639      	mov	r1, r7
 8003cf2:	beab      	bkpt	0x00ab
 8003cf4:	4683      	mov	fp, r0
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <initialise_monitor_handles+0xb4>)
 8003cf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003cfc:	f8c3 b000 	str.w	fp, [r3]
 8003d00:	2308      	movs	r3, #8
 8003d02:	f8cd a00c 	str.w	sl, [sp, #12]
 8003d06:	9302      	str	r3, [sp, #8]
 8003d08:	4630      	mov	r0, r6
 8003d0a:	4639      	mov	r1, r7
 8003d0c:	beab      	bkpt	0x00ab
 8003d0e:	4606      	mov	r6, r0
 8003d10:	602e      	str	r6, [r5, #0]
 8003d12:	682b      	ldr	r3, [r5, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	bf02      	ittt	eq
 8003d18:	4b0c      	ldreq	r3, [pc, #48]	; (8003d4c <initialise_monitor_handles+0xb4>)
 8003d1a:	681b      	ldreq	r3, [r3, #0]
 8003d1c:	602b      	streq	r3, [r5, #0]
 8003d1e:	2600      	movs	r6, #0
 8003d20:	f8d8 3000 	ldr.w	r3, [r8]
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	6066      	str	r6, [r4, #4]
 8003d28:	f7ff ffaa 	bl	8003c80 <_has_ext_stdout_stderr>
 8003d2c:	b130      	cbz	r0, 8003d3c <initialise_monitor_handles+0xa4>
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <initialise_monitor_handles+0xb4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003d3c:	b005      	add	sp, #20
 8003d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d42:	bf00      	nop
 8003d44:	200002a8 	.word	0x200002a8
 8003d48:	2000029c 	.word	0x2000029c
 8003d4c:	200002a4 	.word	0x200002a4
 8003d50:	08003e71 	.word	0x08003e71
 8003d54:	200002a0 	.word	0x200002a0

08003d58 <_isatty>:
 8003d58:	b570      	push	{r4, r5, r6, lr}
 8003d5a:	f7ff fd77 	bl	800384c <findslot>
 8003d5e:	2509      	movs	r5, #9
 8003d60:	4604      	mov	r4, r0
 8003d62:	b920      	cbnz	r0, 8003d6e <_isatty+0x16>
 8003d64:	f7fe fdb2 	bl	80028cc <__errno>
 8003d68:	6005      	str	r5, [r0, #0]
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
 8003d6e:	4628      	mov	r0, r5
 8003d70:	4621      	mov	r1, r4
 8003d72:	beab      	bkpt	0x00ab
 8003d74:	4604      	mov	r4, r0
 8003d76:	2c01      	cmp	r4, #1
 8003d78:	d0f7      	beq.n	8003d6a <_isatty+0x12>
 8003d7a:	f7fe fda7 	bl	80028cc <__errno>
 8003d7e:	2400      	movs	r4, #0
 8003d80:	4605      	mov	r5, r0
 8003d82:	2613      	movs	r6, #19
 8003d84:	4630      	mov	r0, r6
 8003d86:	4621      	mov	r1, r4
 8003d88:	beab      	bkpt	0x00ab
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	602e      	str	r6, [r5, #0]
 8003d8e:	e7ec      	b.n	8003d6a <_isatty+0x12>

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
