
STM32_SPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000329c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003514  08003514  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800351c  0800351c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000078  0800359c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800359c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005de4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001287  00000000  00000000  00025e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00027118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000550  00000000  00000000  00027710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157cb  00000000  00000000  00027c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d7c  00000000  00000000  0003d42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084fc8  00000000  00000000  000441a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c916f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e0  00000000  00000000  000c91c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003424 	.word	0x08003424

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003424 	.word	0x08003424

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

extern void initialise_monitor_handles(void);


int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af02      	add	r7, sp, #8
  initialise_monitor_handles();
 800059a:	f002 fec7 	bl	800332c <initialise_monitor_handles>

  HAL_Init();
 800059e:	f000 fa4d 	bl	8000a3c <HAL_Init>
  SystemClock_Config();
 80005a2:	f000 f863 	bl	800066c <SystemClock_Config>

  uint8_t tx_data[2];
  uint8_t rx_data[2];


  MX_GPIO_Init();
 80005a6:	f000 f8f5 	bl	8000794 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005aa:	f000 f8bd 	bl	8000728 <MX_SPI1_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2108      	movs	r1, #8
 80005b2:	482b      	ldr	r0, [pc, #172]	; (8000660 <main+0xcc>)
 80005b4:	f000 fd42 	bl	800103c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80005b8:	2064      	movs	r0, #100	; 0x64
 80005ba:	f000 fab1 	bl	8000b20 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //-----------------------------
 80005be:	2200      	movs	r2, #0
 80005c0:	2108      	movs	r1, #8
 80005c2:	4827      	ldr	r0, [pc, #156]	; (8000660 <main+0xcc>)
 80005c4:	f000 fd3a 	bl	800103c <HAL_GPIO_WritePin>
  tx_data[0] = 0x20;
 80005c8:	2320      	movs	r3, #32
 80005ca:	713b      	strb	r3, [r7, #4]
  tx_data[1] = 0x27;
 80005cc:	2327      	movs	r3, #39	; 0x27
 80005ce:	717b      	strb	r3, [r7, #5]
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1000);
 80005d0:	463a      	mov	r2, r7
 80005d2:	1d39      	adds	r1, r7, #4
 80005d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2302      	movs	r3, #2
 80005dc:	4821      	ldr	r0, [pc, #132]	; (8000664 <main+0xd0>)
 80005de:	f001 f9f4 	bl	80019ca <HAL_SPI_TransmitReceive>
  printf("\n data checked: %x", rx_data[0]);
 80005e2:	783b      	ldrb	r3, [r7, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4820      	ldr	r0, [pc, #128]	; (8000668 <main+0xd4>)
 80005e8:	f001 fc8e 	bl	8001f08 <iprintf>
  printf("\n data checked: %x", rx_data[1]);
 80005ec:	787b      	ldrb	r3, [r7, #1]
 80005ee:	4619      	mov	r1, r3
 80005f0:	481d      	ldr	r0, [pc, #116]	; (8000668 <main+0xd4>)
 80005f2:	f001 fc89 	bl	8001f08 <iprintf>
  printf("\n");
 80005f6:	200a      	movs	r0, #10
 80005f8:	f001 fc9e 	bl	8001f38 <putchar>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); //-------------------------------
 80005fc:	2201      	movs	r2, #1
 80005fe:	2108      	movs	r1, #8
 8000600:	4817      	ldr	r0, [pc, #92]	; (8000660 <main+0xcc>)
 8000602:	f000 fd1b 	bl	800103c <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 fa8a 	bl	8000b20 <HAL_Delay>

  uint8_t addr = 0x20;
 800060c:	2320      	movs	r3, #32
 800060e:	71fb      	strb	r3, [r7, #7]
  tx_data[0] = addr | 0x80;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000616:	b2db      	uxtb	r3, r3
 8000618:	713b      	strb	r3, [r7, #4]
  tx_data[1] = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	717b      	strb	r3, [r7, #5]

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET); //-----------------------------
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <main+0xcc>)
 8000624:	f000 fd0a 	bl	800103c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 1000);
 8000628:	463a      	mov	r2, r7
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <main+0xd0>)
 8000636:	f001 f9c8 	bl	80019ca <HAL_SPI_TransmitReceive>
  printf("\n data checked: %x", rx_data[0]);
 800063a:	783b      	ldrb	r3, [r7, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0xd4>)
 8000640:	f001 fc62 	bl	8001f08 <iprintf>
  printf("\n data checked: %x", rx_data[1]);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	4619      	mov	r1, r3
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <main+0xd4>)
 800064a:	f001 fc5d 	bl	8001f08 <iprintf>
  printf("\n");
 800064e:	200a      	movs	r0, #10
 8000650:	f001 fc72 	bl	8001f38 <putchar>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET); //-------------------------------
 8000654:	2201      	movs	r2, #1
 8000656:	2108      	movs	r1, #8
 8000658:	4801      	ldr	r0, [pc, #4]	; (8000660 <main+0xcc>)
 800065a:	f000 fcef 	bl	800103c <HAL_GPIO_WritePin>

  while (1)
 800065e:	e7fe      	b.n	800065e <main+0xca>
 8000660:	40021000 	.word	0x40021000
 8000664:	20000094 	.word	0x20000094
 8000668:	0800343c 	.word	0x0800343c

0800066c <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	; 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	; 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fc3c 	bl	8001ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xb4>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xb4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <SystemClock_Config+0xb8>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemClock_Config+0xb8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2310      	movs	r3, #16
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fcc7 	bl	8001070 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e8:	f000 f896 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ff2a 	bl	8001560 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000712:	f000 f881 	bl	8000818 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x64>)
 800077a:	f001 f89d 	bl	80018b8 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f848 	bl	8000818 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000094 	.word	0x20000094
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_GPIO_Init+0x7c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_GPIO_Init+0x7c>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_GPIO_Init+0x7c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_GPIO_Init+0x7c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <MX_GPIO_Init+0x7c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_GPIO_Init+0x7c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <MX_GPIO_Init+0x80>)
 80007e8:	f000 fc28 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ec:	2308      	movs	r3, #8
 80007ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	4619      	mov	r1, r3
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_GPIO_Init+0x80>)
 8000804:	f000 fa96 	bl	8000d34 <HAL_GPIO_Init>
}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40021000 	.word	0x40021000

08000818 <Error_Handler>:

void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a19      	ldr	r2, [pc, #100]	; (80008f8 <HAL_SPI_MspInit+0x84>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d12b      	bne.n	80008ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_SPI_MspInit+0x88>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a10      	ldr	r2, [pc, #64]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <HAL_SPI_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008ce:	23e0      	movs	r3, #224	; 0xe0
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008de:	2305      	movs	r3, #5
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_SPI_MspInit+0x8c>)
 80008ea:	f000 fa23 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40013000 	.word	0x40013000
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f8c6 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <_sbrk+0x5c>)
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <_sbrk+0x60>)
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d102      	bne.n	800097a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <_sbrk+0x64>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <_sbrk+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	429a      	cmp	r2, r3
 8000986:	d207      	bcs.n	8000998 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000988:	f001 fa8c 	bl	8001ea4 <__errno>
 800098c:	4603      	mov	r3, r0
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	e009      	b.n	80009ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <_sbrk+0x64>)
 80009a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20020000 	.word	0x20020000
 80009b8:	00000400 	.word	0x00000400
 80009bc:	200000ec 	.word	0x200000ec
 80009c0:	200001b0 	.word	0x200001b0

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a12:	f7ff ffd7 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f001 fa4b 	bl	8001eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fdbb 	bl	8000594 <main>
  bx  lr    
 8000a1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000a2c:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 8000a30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000a34:	200001b0 	.word	0x200001b0

08000a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_Init+0x40>)
 8000a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_Init+0x40>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <HAL_Init+0x40>)
 8000a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 f931 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6a:	200f      	movs	r0, #15
 8000a6c:	f000 f808 	bl	8000a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a70:	f7ff fed8 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023c00 	.word	0x40023c00

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x54>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_InitTick+0x58>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f93b 	bl	8000d1a <HAL_SYSTICK_Config>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00e      	b.n	8000acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b0f      	cmp	r3, #15
 8000ab2:	d80a      	bhi.n	8000aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f000 f911 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_InitTick+0x5c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	200000f0 	.word	0x200000f0

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200000f0 	.word	0x200000f0

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffde 	bl	8000b08 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff47 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff5c 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffb0 	bl	8000c88 <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	e159      	b.n	8001004 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8148 	bne.w	8000ffe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d005      	beq.n	8000d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d130      	bne.n	8000de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	f003 0201 	and.w	r2, r3, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0303 	and.w	r3, r3, #3
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d017      	beq.n	8000e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d123      	bne.n	8000e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	08da      	lsrs	r2, r3, #3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3208      	adds	r2, #8
 8000e72:	69b9      	ldr	r1, [r7, #24]
 8000e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0203 	and.w	r2, r3, #3
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80a2 	beq.w	8000ffe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b57      	ldr	r3, [pc, #348]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a56      	ldr	r2, [pc, #344]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b54      	ldr	r3, [pc, #336]	; (800101c <HAL_GPIO_Init+0x2e8>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed6:	4a52      	ldr	r2, [pc, #328]	; (8001020 <HAL_GPIO_Init+0x2ec>)
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_GPIO_Init+0x2f0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d019      	beq.n	8000f36 <HAL_GPIO_Init+0x202>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a48      	ldr	r2, [pc, #288]	; (8001028 <HAL_GPIO_Init+0x2f4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d013      	beq.n	8000f32 <HAL_GPIO_Init+0x1fe>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a47      	ldr	r2, [pc, #284]	; (800102c <HAL_GPIO_Init+0x2f8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00d      	beq.n	8000f2e <HAL_GPIO_Init+0x1fa>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a46      	ldr	r2, [pc, #280]	; (8001030 <HAL_GPIO_Init+0x2fc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x1f6>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a45      	ldr	r2, [pc, #276]	; (8001034 <HAL_GPIO_Init+0x300>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_GPIO_Init+0x1f2>
 8000f22:	2304      	movs	r3, #4
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f26:	2307      	movs	r3, #7
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f36:	2300      	movs	r3, #0
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	4935      	ldr	r1, [pc, #212]	; (8001020 <HAL_GPIO_Init+0x2ec>)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b38      	ldr	r3, [pc, #224]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ff8:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <HAL_GPIO_Init+0x304>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	f67f aea2 	bls.w	8000d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
 8001048:	4613      	mov	r3, r2
 800104a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800104c:	787b      	ldrb	r3, [r7, #1]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001052:	887a      	ldrh	r2, [r7, #2]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001058:	e003      	b.n	8001062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e267      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d075      	beq.n	800117a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b04      	cmp	r3, #4
 8001098:	d00c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d112      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b2:	d10b      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d05b      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d157      	bne.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e242      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d106      	bne.n	80010e4 <HAL_RCC_OscConfig+0x74>
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x98>
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fcee 	bl	8000b08 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fcea 	bl	8000b08 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e207      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xc0>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fcda 	bl	8000b08 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fcd6 	bl	8000b08 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1f3      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0xe8>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1c7      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc8f 	bl	8000b08 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fc8b 	bl	8000b08 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1a8      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc6e 	bl	8000b08 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc6a 	bl	8000b08 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e187      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d036      	beq.n	80012c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d016      	beq.n	8001290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fc4e 	bl	8000b08 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fc4a 	bl	8000b08 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e167      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x200>
 800128e:	e01b      	b.n	80012c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fc37 	bl	8000b08 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	e00e      	b.n	80012bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129e:	f7ff fc33 	bl	8000b08 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d907      	bls.n	80012bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e150      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	42470000 	.word	0x42470000
 80012b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ea      	bne.n	800129e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8097 	beq.w	8001404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a7c      	ldr	r2, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fbf3 	bl	8000b08 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fbef 	bl	8000b08 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e10c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x2ea>
 800134c:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	e01c      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x30c>
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800137c:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138e:	f023 0304 	bic.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d015      	beq.n	80013c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fbb4 	bl	8000b08 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbb0 	bl	8000b08 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e0cb      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0ee      	beq.n	80013a4 <HAL_RCC_OscConfig+0x334>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fb9e 	bl	8000b08 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fb9a 	bl	8000b08 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0b5      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ee      	bne.n	80013d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a1 	beq.w	8001550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d05c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d141      	bne.n	80014a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb6e 	bl	8000b08 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb6a 	bl	8000b08 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e087      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69da      	ldr	r2, [r3, #28]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	491b      	ldr	r1, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb43 	bl	8000b08 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb3f 	bl	8000b08 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e05c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x416>
 80014a4:	e054      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb2c 	bl	8000b08 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb28 	bl	8000b08 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e045      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x444>
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d107      	bne.n	80014ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e038      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000
 80014e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x4ec>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d028      	beq.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d121      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800151c:	4013      	ands	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	3b01      	subs	r3, #1
 8001536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0cc      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d90c      	bls.n	800159c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d044      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d119      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	2b03      	cmp	r3, #3
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e067      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fa5a 	bl	8000b08 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff fa56 	bl	8000b08 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e04f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d20c      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f9ba 	bl	8000a80 <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00
 800171c:	40023800 	.word	0x40023800
 8001720:	08003450 	.word	0x08003450
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001730:	b090      	sub	sp, #64	; 0x40
 8001732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
 8001738:	2300      	movs	r3, #0
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d00d      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x40>
 8001750:	2b08      	cmp	r3, #8
 8001752:	f200 80a1 	bhi.w	8001898 <HAL_RCC_GetSysClockFreq+0x16c>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x34>
 800175a:	2b04      	cmp	r3, #4
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x3a>
 800175e:	e09b      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001764:	e09b      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800176a:	e098      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176c:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d028      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	2200      	movs	r2, #0
 800178a:	623b      	str	r3, [r7, #32]
 800178c:	627a      	str	r2, [r7, #36]	; 0x24
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001794:	2100      	movs	r1, #0
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001798:	fb03 f201 	mul.w	r2, r3, r1
 800179c:	2300      	movs	r3, #0
 800179e:	fb00 f303 	mul.w	r3, r0, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	4a43      	ldr	r2, [pc, #268]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a6:	fba0 1202 	umull	r1, r2, r0, r2
 80017aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017ac:	460a      	mov	r2, r1
 80017ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80017b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b2:	4413      	add	r3, r2
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	2200      	movs	r2, #0
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	61fa      	str	r2, [r7, #28]
 80017be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017c6:	f7fe fd63 	bl	8000290 <__aeabi_uldivmod>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4613      	mov	r3, r2
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d2:	e053      	b.n	800187c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	2200      	movs	r2, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	617a      	str	r2, [r7, #20]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017e6:	f04f 0b00 	mov.w	fp, #0
 80017ea:	4652      	mov	r2, sl
 80017ec:	465b      	mov	r3, fp
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	0159      	lsls	r1, r3, #5
 80017f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017fc:	0150      	lsls	r0, r2, #5
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	ebb2 080a 	subs.w	r8, r2, sl
 8001806:	eb63 090b 	sbc.w	r9, r3, fp
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001816:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800181a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800181e:	ebb2 0408 	subs.w	r4, r2, r8
 8001822:	eb63 0509 	sbc.w	r5, r3, r9
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	00eb      	lsls	r3, r5, #3
 8001830:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001834:	00e2      	lsls	r2, r4, #3
 8001836:	4614      	mov	r4, r2
 8001838:	461d      	mov	r5, r3
 800183a:	eb14 030a 	adds.w	r3, r4, sl
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	eb45 030b 	adc.w	r3, r5, fp
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001852:	4629      	mov	r1, r5
 8001854:	028b      	lsls	r3, r1, #10
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800185c:	4621      	mov	r1, r4
 800185e:	028a      	lsls	r2, r1, #10
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001866:	2200      	movs	r2, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	60fa      	str	r2, [r7, #12]
 800186c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001870:	f7fe fd0e 	bl	8000290 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_RCC_GetSysClockFreq+0x180>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	0c1b      	lsrs	r3, r3, #16
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	3301      	adds	r3, #1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800188c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001896:	e002      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800189c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3740      	adds	r7, #64	; 0x40
 80018a4:	46bd      	mov	sp, r7
 80018a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	017d7840 	.word	0x017d7840

080018b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07b      	b.n	80019c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d108      	bne.n	80018e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80018da:	d009      	beq.n	80018f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
 80018e2:	e005      	b.n	80018f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe ffb2 	bl	8000874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001974:	ea42 0103 	orr.w	r1, r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	f003 0104 	and.w	r1, r3, #4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f003 0210 	and.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b08c      	sub	sp, #48	; 0x30
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019d8:	2301      	movs	r3, #1
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_SPI_TransmitReceive+0x26>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e18a      	b.n	8001d06 <HAL_SPI_TransmitReceive+0x33c>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019f8:	f7ff f886 	bl	8000b08 <HAL_GetTick>
 80019fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d00f      	beq.n	8001a3a <HAL_SPI_TransmitReceive+0x70>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a20:	d107      	bne.n	8001a32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <HAL_SPI_TransmitReceive+0x68>
 8001a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d003      	beq.n	8001a3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a32:	2302      	movs	r3, #2
 8001a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a38:	e15b      	b.n	8001cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_SPI_TransmitReceive+0x82>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_SPI_TransmitReceive+0x82>
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a52:	e14e      	b.n	8001cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d003      	beq.n	8001a68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2205      	movs	r2, #5
 8001a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	887a      	ldrh	r2, [r7, #2]
 8001a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b40      	cmp	r3, #64	; 0x40
 8001aaa:	d007      	beq.n	8001abc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac4:	d178      	bne.n	8001bb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_SPI_TransmitReceive+0x10a>
 8001ace:	8b7b      	ldrh	r3, [r7, #26]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d166      	bne.n	8001ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	881a      	ldrh	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	1c9a      	adds	r2, r3, #2
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001af8:	e053      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d11b      	bne.n	8001b40 <HAL_SPI_TransmitReceive+0x176>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d016      	beq.n	8001b40 <HAL_SPI_TransmitReceive+0x176>
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d113      	bne.n	8001b40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	1c9a      	adds	r2, r3, #2
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d119      	bne.n	8001b82 <HAL_SPI_TransmitReceive+0x1b8>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d014      	beq.n	8001b82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	b292      	uxth	r2, r2
 8001b64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	1c9a      	adds	r2, r3, #2
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b82:	f7fe ffc1 	bl	8000b08 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d807      	bhi.n	8001ba2 <HAL_SPI_TransmitReceive+0x1d8>
 8001b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d003      	beq.n	8001ba2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ba0:	e0a7      	b.n	8001cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1a6      	bne.n	8001afa <HAL_SPI_TransmitReceive+0x130>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1a1      	bne.n	8001afa <HAL_SPI_TransmitReceive+0x130>
 8001bb6:	e07c      	b.n	8001cb2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_SPI_TransmitReceive+0x1fc>
 8001bc0:	8b7b      	ldrh	r3, [r7, #26]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d16b      	bne.n	8001c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	330c      	adds	r3, #12
 8001bd0:	7812      	ldrb	r2, [r2, #0]
 8001bd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bec:	e057      	b.n	8001c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11c      	bne.n	8001c36 <HAL_SPI_TransmitReceive+0x26c>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d017      	beq.n	8001c36 <HAL_SPI_TransmitReceive+0x26c>
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d114      	bne.n	8001c36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	330c      	adds	r3, #12
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d119      	bne.n	8001c78 <HAL_SPI_TransmitReceive+0x2ae>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d014      	beq.n	8001c78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c78:	f7fe ff46 	bl	8000b08 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d803      	bhi.n	8001c90 <HAL_SPI_TransmitReceive+0x2c6>
 8001c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8e:	d102      	bne.n	8001c96 <HAL_SPI_TransmitReceive+0x2cc>
 8001c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c9c:	e029      	b.n	8001cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1a2      	bne.n	8001bee <HAL_SPI_TransmitReceive+0x224>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d19d      	bne.n	8001bee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f8b2 	bl	8001e20 <SPI_EndRxTxTransaction>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001cce:	e010      	b.n	8001cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	e000      	b.n	8001cf2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3730      	adds	r7, #48	; 0x30
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d20:	f7fe fef2 	bl	8000b08 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d30:	f7fe feea 	bl	8000b08 <HAL_GetTick>
 8001d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d36:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	015b      	lsls	r3, r3, #5
 8001d3c:	0d1b      	lsrs	r3, r3, #20
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d46:	e054      	b.n	8001df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4e:	d050      	beq.n	8001df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d50:	f7fe feda 	bl	8000b08 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d902      	bls.n	8001d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13d      	bne.n	8001de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d7e:	d111      	bne.n	8001da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d88:	d004      	beq.n	8001d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	d107      	bne.n	8001da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dac:	d10f      	bne.n	8001dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e017      	b.n	8001e12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d19b      	bne.n	8001d48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000

08001e20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <SPI_EndRxTxTransaction+0x7c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <SPI_EndRxTxTransaction+0x80>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0d5b      	lsrs	r3, r3, #21
 8001e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e4a:	d112      	bne.n	8001e72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2200      	movs	r2, #0
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff ff5a 	bl	8001d10 <SPI_WaitFlagStateUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d016      	beq.n	8001e90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f043 0220 	orr.w	r2, r3, #32
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e00f      	b.n	8001e92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b80      	cmp	r3, #128	; 0x80
 8001e8a:	d0f2      	beq.n	8001e72 <SPI_EndRxTxTransaction+0x52>
 8001e8c:	e000      	b.n	8001e90 <SPI_EndRxTxTransaction+0x70>
        break;
 8001e8e:	bf00      	nop
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	165e9f81 	.word	0x165e9f81

08001ea4 <__errno>:
 8001ea4:	4b01      	ldr	r3, [pc, #4]	; (8001eac <__errno+0x8>)
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c

08001eb0 <__libc_init_array>:
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4d0d      	ldr	r5, [pc, #52]	; (8001ee8 <__libc_init_array+0x38>)
 8001eb4:	4c0d      	ldr	r4, [pc, #52]	; (8001eec <__libc_init_array+0x3c>)
 8001eb6:	1b64      	subs	r4, r4, r5
 8001eb8:	10a4      	asrs	r4, r4, #2
 8001eba:	2600      	movs	r6, #0
 8001ebc:	42a6      	cmp	r6, r4
 8001ebe:	d109      	bne.n	8001ed4 <__libc_init_array+0x24>
 8001ec0:	4d0b      	ldr	r5, [pc, #44]	; (8001ef0 <__libc_init_array+0x40>)
 8001ec2:	4c0c      	ldr	r4, [pc, #48]	; (8001ef4 <__libc_init_array+0x44>)
 8001ec4:	f001 faae 	bl	8003424 <_init>
 8001ec8:	1b64      	subs	r4, r4, r5
 8001eca:	10a4      	asrs	r4, r4, #2
 8001ecc:	2600      	movs	r6, #0
 8001ece:	42a6      	cmp	r6, r4
 8001ed0:	d105      	bne.n	8001ede <__libc_init_array+0x2e>
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
 8001ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed8:	4798      	blx	r3
 8001eda:	3601      	adds	r6, #1
 8001edc:	e7ee      	b.n	8001ebc <__libc_init_array+0xc>
 8001ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ee2:	4798      	blx	r3
 8001ee4:	3601      	adds	r6, #1
 8001ee6:	e7f2      	b.n	8001ece <__libc_init_array+0x1e>
 8001ee8:	0800351c 	.word	0x0800351c
 8001eec:	0800351c 	.word	0x0800351c
 8001ef0:	0800351c 	.word	0x0800351c
 8001ef4:	08003520 	.word	0x08003520

08001ef8 <memset>:
 8001ef8:	4402      	add	r2, r0
 8001efa:	4603      	mov	r3, r0
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d100      	bne.n	8001f02 <memset+0xa>
 8001f00:	4770      	bx	lr
 8001f02:	f803 1b01 	strb.w	r1, [r3], #1
 8001f06:	e7f9      	b.n	8001efc <memset+0x4>

08001f08 <iprintf>:
 8001f08:	b40f      	push	{r0, r1, r2, r3}
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <iprintf+0x2c>)
 8001f0c:	b513      	push	{r0, r1, r4, lr}
 8001f0e:	681c      	ldr	r4, [r3, #0]
 8001f10:	b124      	cbz	r4, 8001f1c <iprintf+0x14>
 8001f12:	69a3      	ldr	r3, [r4, #24]
 8001f14:	b913      	cbnz	r3, 8001f1c <iprintf+0x14>
 8001f16:	4620      	mov	r0, r4
 8001f18:	f000 f87c 	bl	8002014 <__sinit>
 8001f1c:	ab05      	add	r3, sp, #20
 8001f1e:	9a04      	ldr	r2, [sp, #16]
 8001f20:	68a1      	ldr	r1, [r4, #8]
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	4620      	mov	r0, r4
 8001f26:	f000 f9d3 	bl	80022d0 <_vfiprintf_r>
 8001f2a:	b002      	add	sp, #8
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f30:	b004      	add	sp, #16
 8001f32:	4770      	bx	lr
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <putchar>:
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <putchar+0x28>)
 8001f3a:	b513      	push	{r0, r1, r4, lr}
 8001f3c:	681c      	ldr	r4, [r3, #0]
 8001f3e:	4601      	mov	r1, r0
 8001f40:	b134      	cbz	r4, 8001f50 <putchar+0x18>
 8001f42:	69a3      	ldr	r3, [r4, #24]
 8001f44:	b923      	cbnz	r3, 8001f50 <putchar+0x18>
 8001f46:	9001      	str	r0, [sp, #4]
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f000 f863 	bl	8002014 <__sinit>
 8001f4e:	9901      	ldr	r1, [sp, #4]
 8001f50:	68a2      	ldr	r2, [r4, #8]
 8001f52:	4620      	mov	r0, r4
 8001f54:	b002      	add	sp, #8
 8001f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f5a:	f000 bc7d 	b.w	8002858 <_putc_r>
 8001f5e:	bf00      	nop
 8001f60:	2000000c 	.word	0x2000000c

08001f64 <std>:
 8001f64:	2300      	movs	r3, #0
 8001f66:	b510      	push	{r4, lr}
 8001f68:	4604      	mov	r4, r0
 8001f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8001f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f72:	6083      	str	r3, [r0, #8]
 8001f74:	8181      	strh	r1, [r0, #12]
 8001f76:	6643      	str	r3, [r0, #100]	; 0x64
 8001f78:	81c2      	strh	r2, [r0, #14]
 8001f7a:	6183      	str	r3, [r0, #24]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2208      	movs	r2, #8
 8001f80:	305c      	adds	r0, #92	; 0x5c
 8001f82:	f7ff ffb9 	bl	8001ef8 <memset>
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <std+0x38>)
 8001f88:	6263      	str	r3, [r4, #36]	; 0x24
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <std+0x3c>)
 8001f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <std+0x40>)
 8001f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <std+0x44>)
 8001f94:	6224      	str	r4, [r4, #32]
 8001f96:	6323      	str	r3, [r4, #48]	; 0x30
 8001f98:	bd10      	pop	{r4, pc}
 8001f9a:	bf00      	nop
 8001f9c:	08002909 	.word	0x08002909
 8001fa0:	0800292b 	.word	0x0800292b
 8001fa4:	08002963 	.word	0x08002963
 8001fa8:	08002987 	.word	0x08002987

08001fac <_cleanup_r>:
 8001fac:	4901      	ldr	r1, [pc, #4]	; (8001fb4 <_cleanup_r+0x8>)
 8001fae:	f000 b8af 	b.w	8002110 <_fwalk_reent>
 8001fb2:	bf00      	nop
 8001fb4:	08002c61 	.word	0x08002c61

08001fb8 <__sfmoreglue>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	2268      	movs	r2, #104	; 0x68
 8001fbc:	1e4d      	subs	r5, r1, #1
 8001fbe:	4355      	muls	r5, r2
 8001fc0:	460e      	mov	r6, r1
 8001fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fc6:	f000 f8e5 	bl	8002194 <_malloc_r>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	b140      	cbz	r0, 8001fe0 <__sfmoreglue+0x28>
 8001fce:	2100      	movs	r1, #0
 8001fd0:	e9c0 1600 	strd	r1, r6, [r0]
 8001fd4:	300c      	adds	r0, #12
 8001fd6:	60a0      	str	r0, [r4, #8]
 8001fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fdc:	f7ff ff8c 	bl	8001ef8 <memset>
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}

08001fe4 <__sfp_lock_acquire>:
 8001fe4:	4801      	ldr	r0, [pc, #4]	; (8001fec <__sfp_lock_acquire+0x8>)
 8001fe6:	f000 b8b3 	b.w	8002150 <__retarget_lock_acquire_recursive>
 8001fea:	bf00      	nop
 8001fec:	200000f5 	.word	0x200000f5

08001ff0 <__sfp_lock_release>:
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <__sfp_lock_release+0x8>)
 8001ff2:	f000 b8ae 	b.w	8002152 <__retarget_lock_release_recursive>
 8001ff6:	bf00      	nop
 8001ff8:	200000f5 	.word	0x200000f5

08001ffc <__sinit_lock_acquire>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <__sinit_lock_acquire+0x8>)
 8001ffe:	f000 b8a7 	b.w	8002150 <__retarget_lock_acquire_recursive>
 8002002:	bf00      	nop
 8002004:	200000f6 	.word	0x200000f6

08002008 <__sinit_lock_release>:
 8002008:	4801      	ldr	r0, [pc, #4]	; (8002010 <__sinit_lock_release+0x8>)
 800200a:	f000 b8a2 	b.w	8002152 <__retarget_lock_release_recursive>
 800200e:	bf00      	nop
 8002010:	200000f6 	.word	0x200000f6

08002014 <__sinit>:
 8002014:	b510      	push	{r4, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	f7ff fff0 	bl	8001ffc <__sinit_lock_acquire>
 800201c:	69a3      	ldr	r3, [r4, #24]
 800201e:	b11b      	cbz	r3, 8002028 <__sinit+0x14>
 8002020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002024:	f7ff bff0 	b.w	8002008 <__sinit_lock_release>
 8002028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800202c:	6523      	str	r3, [r4, #80]	; 0x50
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <__sinit+0x68>)
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <__sinit+0x6c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	62a2      	str	r2, [r4, #40]	; 0x28
 8002036:	42a3      	cmp	r3, r4
 8002038:	bf04      	itt	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	61a3      	streq	r3, [r4, #24]
 800203e:	4620      	mov	r0, r4
 8002040:	f000 f820 	bl	8002084 <__sfp>
 8002044:	6060      	str	r0, [r4, #4]
 8002046:	4620      	mov	r0, r4
 8002048:	f000 f81c 	bl	8002084 <__sfp>
 800204c:	60a0      	str	r0, [r4, #8]
 800204e:	4620      	mov	r0, r4
 8002050:	f000 f818 	bl	8002084 <__sfp>
 8002054:	2200      	movs	r2, #0
 8002056:	60e0      	str	r0, [r4, #12]
 8002058:	2104      	movs	r1, #4
 800205a:	6860      	ldr	r0, [r4, #4]
 800205c:	f7ff ff82 	bl	8001f64 <std>
 8002060:	68a0      	ldr	r0, [r4, #8]
 8002062:	2201      	movs	r2, #1
 8002064:	2109      	movs	r1, #9
 8002066:	f7ff ff7d 	bl	8001f64 <std>
 800206a:	68e0      	ldr	r0, [r4, #12]
 800206c:	2202      	movs	r2, #2
 800206e:	2112      	movs	r1, #18
 8002070:	f7ff ff78 	bl	8001f64 <std>
 8002074:	2301      	movs	r3, #1
 8002076:	61a3      	str	r3, [r4, #24]
 8002078:	e7d2      	b.n	8002020 <__sinit+0xc>
 800207a:	bf00      	nop
 800207c:	08003460 	.word	0x08003460
 8002080:	08001fad 	.word	0x08001fad

08002084 <__sfp>:
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	4607      	mov	r7, r0
 8002088:	f7ff ffac 	bl	8001fe4 <__sfp_lock_acquire>
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <__sfp+0x84>)
 800208e:	681e      	ldr	r6, [r3, #0]
 8002090:	69b3      	ldr	r3, [r6, #24]
 8002092:	b913      	cbnz	r3, 800209a <__sfp+0x16>
 8002094:	4630      	mov	r0, r6
 8002096:	f7ff ffbd 	bl	8002014 <__sinit>
 800209a:	3648      	adds	r6, #72	; 0x48
 800209c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	d503      	bpl.n	80020ac <__sfp+0x28>
 80020a4:	6833      	ldr	r3, [r6, #0]
 80020a6:	b30b      	cbz	r3, 80020ec <__sfp+0x68>
 80020a8:	6836      	ldr	r6, [r6, #0]
 80020aa:	e7f7      	b.n	800209c <__sfp+0x18>
 80020ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020b0:	b9d5      	cbnz	r5, 80020e8 <__sfp+0x64>
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <__sfp+0x88>)
 80020b4:	60e3      	str	r3, [r4, #12]
 80020b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020ba:	6665      	str	r5, [r4, #100]	; 0x64
 80020bc:	f000 f847 	bl	800214e <__retarget_lock_init_recursive>
 80020c0:	f7ff ff96 	bl	8001ff0 <__sfp_lock_release>
 80020c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020cc:	6025      	str	r5, [r4, #0]
 80020ce:	61a5      	str	r5, [r4, #24]
 80020d0:	2208      	movs	r2, #8
 80020d2:	4629      	mov	r1, r5
 80020d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020d8:	f7ff ff0e 	bl	8001ef8 <memset>
 80020dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020e4:	4620      	mov	r0, r4
 80020e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e8:	3468      	adds	r4, #104	; 0x68
 80020ea:	e7d9      	b.n	80020a0 <__sfp+0x1c>
 80020ec:	2104      	movs	r1, #4
 80020ee:	4638      	mov	r0, r7
 80020f0:	f7ff ff62 	bl	8001fb8 <__sfmoreglue>
 80020f4:	4604      	mov	r4, r0
 80020f6:	6030      	str	r0, [r6, #0]
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d1d5      	bne.n	80020a8 <__sfp+0x24>
 80020fc:	f7ff ff78 	bl	8001ff0 <__sfp_lock_release>
 8002100:	230c      	movs	r3, #12
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	e7ee      	b.n	80020e4 <__sfp+0x60>
 8002106:	bf00      	nop
 8002108:	08003460 	.word	0x08003460
 800210c:	ffff0001 	.word	0xffff0001

08002110 <_fwalk_reent>:
 8002110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002114:	4606      	mov	r6, r0
 8002116:	4688      	mov	r8, r1
 8002118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800211c:	2700      	movs	r7, #0
 800211e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002122:	f1b9 0901 	subs.w	r9, r9, #1
 8002126:	d505      	bpl.n	8002134 <_fwalk_reent+0x24>
 8002128:	6824      	ldr	r4, [r4, #0]
 800212a:	2c00      	cmp	r4, #0
 800212c:	d1f7      	bne.n	800211e <_fwalk_reent+0xe>
 800212e:	4638      	mov	r0, r7
 8002130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002134:	89ab      	ldrh	r3, [r5, #12]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d907      	bls.n	800214a <_fwalk_reent+0x3a>
 800213a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800213e:	3301      	adds	r3, #1
 8002140:	d003      	beq.n	800214a <_fwalk_reent+0x3a>
 8002142:	4629      	mov	r1, r5
 8002144:	4630      	mov	r0, r6
 8002146:	47c0      	blx	r8
 8002148:	4307      	orrs	r7, r0
 800214a:	3568      	adds	r5, #104	; 0x68
 800214c:	e7e9      	b.n	8002122 <_fwalk_reent+0x12>

0800214e <__retarget_lock_init_recursive>:
 800214e:	4770      	bx	lr

08002150 <__retarget_lock_acquire_recursive>:
 8002150:	4770      	bx	lr

08002152 <__retarget_lock_release_recursive>:
 8002152:	4770      	bx	lr

08002154 <sbrk_aligned>:
 8002154:	b570      	push	{r4, r5, r6, lr}
 8002156:	4e0e      	ldr	r6, [pc, #56]	; (8002190 <sbrk_aligned+0x3c>)
 8002158:	460c      	mov	r4, r1
 800215a:	6831      	ldr	r1, [r6, #0]
 800215c:	4605      	mov	r5, r0
 800215e:	b911      	cbnz	r1, 8002166 <sbrk_aligned+0x12>
 8002160:	f000 fbc2 	bl	80028e8 <_sbrk_r>
 8002164:	6030      	str	r0, [r6, #0]
 8002166:	4621      	mov	r1, r4
 8002168:	4628      	mov	r0, r5
 800216a:	f000 fbbd 	bl	80028e8 <_sbrk_r>
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	d00a      	beq.n	8002188 <sbrk_aligned+0x34>
 8002172:	1cc4      	adds	r4, r0, #3
 8002174:	f024 0403 	bic.w	r4, r4, #3
 8002178:	42a0      	cmp	r0, r4
 800217a:	d007      	beq.n	800218c <sbrk_aligned+0x38>
 800217c:	1a21      	subs	r1, r4, r0
 800217e:	4628      	mov	r0, r5
 8002180:	f000 fbb2 	bl	80028e8 <_sbrk_r>
 8002184:	3001      	adds	r0, #1
 8002186:	d101      	bne.n	800218c <sbrk_aligned+0x38>
 8002188:	f04f 34ff 	mov.w	r4, #4294967295
 800218c:	4620      	mov	r0, r4
 800218e:	bd70      	pop	{r4, r5, r6, pc}
 8002190:	200000fc 	.word	0x200000fc

08002194 <_malloc_r>:
 8002194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002198:	1ccd      	adds	r5, r1, #3
 800219a:	f025 0503 	bic.w	r5, r5, #3
 800219e:	3508      	adds	r5, #8
 80021a0:	2d0c      	cmp	r5, #12
 80021a2:	bf38      	it	cc
 80021a4:	250c      	movcc	r5, #12
 80021a6:	2d00      	cmp	r5, #0
 80021a8:	4607      	mov	r7, r0
 80021aa:	db01      	blt.n	80021b0 <_malloc_r+0x1c>
 80021ac:	42a9      	cmp	r1, r5
 80021ae:	d905      	bls.n	80021bc <_malloc_r+0x28>
 80021b0:	230c      	movs	r3, #12
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	2600      	movs	r6, #0
 80021b6:	4630      	mov	r0, r6
 80021b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021bc:	4e2e      	ldr	r6, [pc, #184]	; (8002278 <_malloc_r+0xe4>)
 80021be:	f000 fe03 	bl	8002dc8 <__malloc_lock>
 80021c2:	6833      	ldr	r3, [r6, #0]
 80021c4:	461c      	mov	r4, r3
 80021c6:	bb34      	cbnz	r4, 8002216 <_malloc_r+0x82>
 80021c8:	4629      	mov	r1, r5
 80021ca:	4638      	mov	r0, r7
 80021cc:	f7ff ffc2 	bl	8002154 <sbrk_aligned>
 80021d0:	1c43      	adds	r3, r0, #1
 80021d2:	4604      	mov	r4, r0
 80021d4:	d14d      	bne.n	8002272 <_malloc_r+0xde>
 80021d6:	6834      	ldr	r4, [r6, #0]
 80021d8:	4626      	mov	r6, r4
 80021da:	2e00      	cmp	r6, #0
 80021dc:	d140      	bne.n	8002260 <_malloc_r+0xcc>
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	4631      	mov	r1, r6
 80021e2:	4638      	mov	r0, r7
 80021e4:	eb04 0803 	add.w	r8, r4, r3
 80021e8:	f000 fb7e 	bl	80028e8 <_sbrk_r>
 80021ec:	4580      	cmp	r8, r0
 80021ee:	d13a      	bne.n	8002266 <_malloc_r+0xd2>
 80021f0:	6821      	ldr	r1, [r4, #0]
 80021f2:	3503      	adds	r5, #3
 80021f4:	1a6d      	subs	r5, r5, r1
 80021f6:	f025 0503 	bic.w	r5, r5, #3
 80021fa:	3508      	adds	r5, #8
 80021fc:	2d0c      	cmp	r5, #12
 80021fe:	bf38      	it	cc
 8002200:	250c      	movcc	r5, #12
 8002202:	4629      	mov	r1, r5
 8002204:	4638      	mov	r0, r7
 8002206:	f7ff ffa5 	bl	8002154 <sbrk_aligned>
 800220a:	3001      	adds	r0, #1
 800220c:	d02b      	beq.n	8002266 <_malloc_r+0xd2>
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	442b      	add	r3, r5
 8002212:	6023      	str	r3, [r4, #0]
 8002214:	e00e      	b.n	8002234 <_malloc_r+0xa0>
 8002216:	6822      	ldr	r2, [r4, #0]
 8002218:	1b52      	subs	r2, r2, r5
 800221a:	d41e      	bmi.n	800225a <_malloc_r+0xc6>
 800221c:	2a0b      	cmp	r2, #11
 800221e:	d916      	bls.n	800224e <_malloc_r+0xba>
 8002220:	1961      	adds	r1, r4, r5
 8002222:	42a3      	cmp	r3, r4
 8002224:	6025      	str	r5, [r4, #0]
 8002226:	bf18      	it	ne
 8002228:	6059      	strne	r1, [r3, #4]
 800222a:	6863      	ldr	r3, [r4, #4]
 800222c:	bf08      	it	eq
 800222e:	6031      	streq	r1, [r6, #0]
 8002230:	5162      	str	r2, [r4, r5]
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	4638      	mov	r0, r7
 8002236:	f104 060b 	add.w	r6, r4, #11
 800223a:	f000 fdcb 	bl	8002dd4 <__malloc_unlock>
 800223e:	f026 0607 	bic.w	r6, r6, #7
 8002242:	1d23      	adds	r3, r4, #4
 8002244:	1af2      	subs	r2, r6, r3
 8002246:	d0b6      	beq.n	80021b6 <_malloc_r+0x22>
 8002248:	1b9b      	subs	r3, r3, r6
 800224a:	50a3      	str	r3, [r4, r2]
 800224c:	e7b3      	b.n	80021b6 <_malloc_r+0x22>
 800224e:	6862      	ldr	r2, [r4, #4]
 8002250:	42a3      	cmp	r3, r4
 8002252:	bf0c      	ite	eq
 8002254:	6032      	streq	r2, [r6, #0]
 8002256:	605a      	strne	r2, [r3, #4]
 8002258:	e7ec      	b.n	8002234 <_malloc_r+0xa0>
 800225a:	4623      	mov	r3, r4
 800225c:	6864      	ldr	r4, [r4, #4]
 800225e:	e7b2      	b.n	80021c6 <_malloc_r+0x32>
 8002260:	4634      	mov	r4, r6
 8002262:	6876      	ldr	r6, [r6, #4]
 8002264:	e7b9      	b.n	80021da <_malloc_r+0x46>
 8002266:	230c      	movs	r3, #12
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4638      	mov	r0, r7
 800226c:	f000 fdb2 	bl	8002dd4 <__malloc_unlock>
 8002270:	e7a1      	b.n	80021b6 <_malloc_r+0x22>
 8002272:	6025      	str	r5, [r4, #0]
 8002274:	e7de      	b.n	8002234 <_malloc_r+0xa0>
 8002276:	bf00      	nop
 8002278:	200000f8 	.word	0x200000f8

0800227c <__sfputc_r>:
 800227c:	6893      	ldr	r3, [r2, #8]
 800227e:	3b01      	subs	r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	b410      	push	{r4}
 8002284:	6093      	str	r3, [r2, #8]
 8002286:	da08      	bge.n	800229a <__sfputc_r+0x1e>
 8002288:	6994      	ldr	r4, [r2, #24]
 800228a:	42a3      	cmp	r3, r4
 800228c:	db01      	blt.n	8002292 <__sfputc_r+0x16>
 800228e:	290a      	cmp	r1, #10
 8002290:	d103      	bne.n	800229a <__sfputc_r+0x1e>
 8002292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002296:	f000 bb7b 	b.w	8002990 <__swbuf_r>
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	1c58      	adds	r0, r3, #1
 800229e:	6010      	str	r0, [r2, #0]
 80022a0:	7019      	strb	r1, [r3, #0]
 80022a2:	4608      	mov	r0, r1
 80022a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <__sfputs_r>:
 80022aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ac:	4606      	mov	r6, r0
 80022ae:	460f      	mov	r7, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	18d5      	adds	r5, r2, r3
 80022b4:	42ac      	cmp	r4, r5
 80022b6:	d101      	bne.n	80022bc <__sfputs_r+0x12>
 80022b8:	2000      	movs	r0, #0
 80022ba:	e007      	b.n	80022cc <__sfputs_r+0x22>
 80022bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022c0:	463a      	mov	r2, r7
 80022c2:	4630      	mov	r0, r6
 80022c4:	f7ff ffda 	bl	800227c <__sfputc_r>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d1f3      	bne.n	80022b4 <__sfputs_r+0xa>
 80022cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022d0 <_vfiprintf_r>:
 80022d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d4:	460d      	mov	r5, r1
 80022d6:	b09d      	sub	sp, #116	; 0x74
 80022d8:	4614      	mov	r4, r2
 80022da:	4698      	mov	r8, r3
 80022dc:	4606      	mov	r6, r0
 80022de:	b118      	cbz	r0, 80022e8 <_vfiprintf_r+0x18>
 80022e0:	6983      	ldr	r3, [r0, #24]
 80022e2:	b90b      	cbnz	r3, 80022e8 <_vfiprintf_r+0x18>
 80022e4:	f7ff fe96 	bl	8002014 <__sinit>
 80022e8:	4b89      	ldr	r3, [pc, #548]	; (8002510 <_vfiprintf_r+0x240>)
 80022ea:	429d      	cmp	r5, r3
 80022ec:	d11b      	bne.n	8002326 <_vfiprintf_r+0x56>
 80022ee:	6875      	ldr	r5, [r6, #4]
 80022f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022f2:	07d9      	lsls	r1, r3, #31
 80022f4:	d405      	bmi.n	8002302 <_vfiprintf_r+0x32>
 80022f6:	89ab      	ldrh	r3, [r5, #12]
 80022f8:	059a      	lsls	r2, r3, #22
 80022fa:	d402      	bmi.n	8002302 <_vfiprintf_r+0x32>
 80022fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022fe:	f7ff ff27 	bl	8002150 <__retarget_lock_acquire_recursive>
 8002302:	89ab      	ldrh	r3, [r5, #12]
 8002304:	071b      	lsls	r3, r3, #28
 8002306:	d501      	bpl.n	800230c <_vfiprintf_r+0x3c>
 8002308:	692b      	ldr	r3, [r5, #16]
 800230a:	b9eb      	cbnz	r3, 8002348 <_vfiprintf_r+0x78>
 800230c:	4629      	mov	r1, r5
 800230e:	4630      	mov	r0, r6
 8002310:	f000 fba2 	bl	8002a58 <__swsetup_r>
 8002314:	b1c0      	cbz	r0, 8002348 <_vfiprintf_r+0x78>
 8002316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002318:	07dc      	lsls	r4, r3, #31
 800231a:	d50e      	bpl.n	800233a <_vfiprintf_r+0x6a>
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	b01d      	add	sp, #116	; 0x74
 8002322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002326:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <_vfiprintf_r+0x244>)
 8002328:	429d      	cmp	r5, r3
 800232a:	d101      	bne.n	8002330 <_vfiprintf_r+0x60>
 800232c:	68b5      	ldr	r5, [r6, #8]
 800232e:	e7df      	b.n	80022f0 <_vfiprintf_r+0x20>
 8002330:	4b79      	ldr	r3, [pc, #484]	; (8002518 <_vfiprintf_r+0x248>)
 8002332:	429d      	cmp	r5, r3
 8002334:	bf08      	it	eq
 8002336:	68f5      	ldreq	r5, [r6, #12]
 8002338:	e7da      	b.n	80022f0 <_vfiprintf_r+0x20>
 800233a:	89ab      	ldrh	r3, [r5, #12]
 800233c:	0598      	lsls	r0, r3, #22
 800233e:	d4ed      	bmi.n	800231c <_vfiprintf_r+0x4c>
 8002340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002342:	f7ff ff06 	bl	8002152 <__retarget_lock_release_recursive>
 8002346:	e7e9      	b.n	800231c <_vfiprintf_r+0x4c>
 8002348:	2300      	movs	r3, #0
 800234a:	9309      	str	r3, [sp, #36]	; 0x24
 800234c:	2320      	movs	r3, #32
 800234e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002352:	f8cd 800c 	str.w	r8, [sp, #12]
 8002356:	2330      	movs	r3, #48	; 0x30
 8002358:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800251c <_vfiprintf_r+0x24c>
 800235c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002360:	f04f 0901 	mov.w	r9, #1
 8002364:	4623      	mov	r3, r4
 8002366:	469a      	mov	sl, r3
 8002368:	f813 2b01 	ldrb.w	r2, [r3], #1
 800236c:	b10a      	cbz	r2, 8002372 <_vfiprintf_r+0xa2>
 800236e:	2a25      	cmp	r2, #37	; 0x25
 8002370:	d1f9      	bne.n	8002366 <_vfiprintf_r+0x96>
 8002372:	ebba 0b04 	subs.w	fp, sl, r4
 8002376:	d00b      	beq.n	8002390 <_vfiprintf_r+0xc0>
 8002378:	465b      	mov	r3, fp
 800237a:	4622      	mov	r2, r4
 800237c:	4629      	mov	r1, r5
 800237e:	4630      	mov	r0, r6
 8002380:	f7ff ff93 	bl	80022aa <__sfputs_r>
 8002384:	3001      	adds	r0, #1
 8002386:	f000 80aa 	beq.w	80024de <_vfiprintf_r+0x20e>
 800238a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800238c:	445a      	add	r2, fp
 800238e:	9209      	str	r2, [sp, #36]	; 0x24
 8002390:	f89a 3000 	ldrb.w	r3, [sl]
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a2 	beq.w	80024de <_vfiprintf_r+0x20e>
 800239a:	2300      	movs	r3, #0
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023a4:	f10a 0a01 	add.w	sl, sl, #1
 80023a8:	9304      	str	r3, [sp, #16]
 80023aa:	9307      	str	r3, [sp, #28]
 80023ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023b0:	931a      	str	r3, [sp, #104]	; 0x68
 80023b2:	4654      	mov	r4, sl
 80023b4:	2205      	movs	r2, #5
 80023b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ba:	4858      	ldr	r0, [pc, #352]	; (800251c <_vfiprintf_r+0x24c>)
 80023bc:	f7fd ff10 	bl	80001e0 <memchr>
 80023c0:	9a04      	ldr	r2, [sp, #16]
 80023c2:	b9d8      	cbnz	r0, 80023fc <_vfiprintf_r+0x12c>
 80023c4:	06d1      	lsls	r1, r2, #27
 80023c6:	bf44      	itt	mi
 80023c8:	2320      	movmi	r3, #32
 80023ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023ce:	0713      	lsls	r3, r2, #28
 80023d0:	bf44      	itt	mi
 80023d2:	232b      	movmi	r3, #43	; 0x2b
 80023d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023d8:	f89a 3000 	ldrb.w	r3, [sl]
 80023dc:	2b2a      	cmp	r3, #42	; 0x2a
 80023de:	d015      	beq.n	800240c <_vfiprintf_r+0x13c>
 80023e0:	9a07      	ldr	r2, [sp, #28]
 80023e2:	4654      	mov	r4, sl
 80023e4:	2000      	movs	r0, #0
 80023e6:	f04f 0c0a 	mov.w	ip, #10
 80023ea:	4621      	mov	r1, r4
 80023ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023f0:	3b30      	subs	r3, #48	; 0x30
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	d94e      	bls.n	8002494 <_vfiprintf_r+0x1c4>
 80023f6:	b1b0      	cbz	r0, 8002426 <_vfiprintf_r+0x156>
 80023f8:	9207      	str	r2, [sp, #28]
 80023fa:	e014      	b.n	8002426 <_vfiprintf_r+0x156>
 80023fc:	eba0 0308 	sub.w	r3, r0, r8
 8002400:	fa09 f303 	lsl.w	r3, r9, r3
 8002404:	4313      	orrs	r3, r2
 8002406:	9304      	str	r3, [sp, #16]
 8002408:	46a2      	mov	sl, r4
 800240a:	e7d2      	b.n	80023b2 <_vfiprintf_r+0xe2>
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	1d19      	adds	r1, r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	9103      	str	r1, [sp, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	bfbb      	ittet	lt
 8002418:	425b      	neglt	r3, r3
 800241a:	f042 0202 	orrlt.w	r2, r2, #2
 800241e:	9307      	strge	r3, [sp, #28]
 8002420:	9307      	strlt	r3, [sp, #28]
 8002422:	bfb8      	it	lt
 8002424:	9204      	strlt	r2, [sp, #16]
 8002426:	7823      	ldrb	r3, [r4, #0]
 8002428:	2b2e      	cmp	r3, #46	; 0x2e
 800242a:	d10c      	bne.n	8002446 <_vfiprintf_r+0x176>
 800242c:	7863      	ldrb	r3, [r4, #1]
 800242e:	2b2a      	cmp	r3, #42	; 0x2a
 8002430:	d135      	bne.n	800249e <_vfiprintf_r+0x1ce>
 8002432:	9b03      	ldr	r3, [sp, #12]
 8002434:	1d1a      	adds	r2, r3, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	9203      	str	r2, [sp, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	bfb8      	it	lt
 800243e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002442:	3402      	adds	r4, #2
 8002444:	9305      	str	r3, [sp, #20]
 8002446:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800252c <_vfiprintf_r+0x25c>
 800244a:	7821      	ldrb	r1, [r4, #0]
 800244c:	2203      	movs	r2, #3
 800244e:	4650      	mov	r0, sl
 8002450:	f7fd fec6 	bl	80001e0 <memchr>
 8002454:	b140      	cbz	r0, 8002468 <_vfiprintf_r+0x198>
 8002456:	2340      	movs	r3, #64	; 0x40
 8002458:	eba0 000a 	sub.w	r0, r0, sl
 800245c:	fa03 f000 	lsl.w	r0, r3, r0
 8002460:	9b04      	ldr	r3, [sp, #16]
 8002462:	4303      	orrs	r3, r0
 8002464:	3401      	adds	r4, #1
 8002466:	9304      	str	r3, [sp, #16]
 8002468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800246c:	482c      	ldr	r0, [pc, #176]	; (8002520 <_vfiprintf_r+0x250>)
 800246e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002472:	2206      	movs	r2, #6
 8002474:	f7fd feb4 	bl	80001e0 <memchr>
 8002478:	2800      	cmp	r0, #0
 800247a:	d03f      	beq.n	80024fc <_vfiprintf_r+0x22c>
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <_vfiprintf_r+0x254>)
 800247e:	bb1b      	cbnz	r3, 80024c8 <_vfiprintf_r+0x1f8>
 8002480:	9b03      	ldr	r3, [sp, #12]
 8002482:	3307      	adds	r3, #7
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	3308      	adds	r3, #8
 800248a:	9303      	str	r3, [sp, #12]
 800248c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800248e:	443b      	add	r3, r7
 8002490:	9309      	str	r3, [sp, #36]	; 0x24
 8002492:	e767      	b.n	8002364 <_vfiprintf_r+0x94>
 8002494:	fb0c 3202 	mla	r2, ip, r2, r3
 8002498:	460c      	mov	r4, r1
 800249a:	2001      	movs	r0, #1
 800249c:	e7a5      	b.n	80023ea <_vfiprintf_r+0x11a>
 800249e:	2300      	movs	r3, #0
 80024a0:	3401      	adds	r4, #1
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f04f 0c0a 	mov.w	ip, #10
 80024aa:	4620      	mov	r0, r4
 80024ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024b0:	3a30      	subs	r2, #48	; 0x30
 80024b2:	2a09      	cmp	r2, #9
 80024b4:	d903      	bls.n	80024be <_vfiprintf_r+0x1ee>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0c5      	beq.n	8002446 <_vfiprintf_r+0x176>
 80024ba:	9105      	str	r1, [sp, #20]
 80024bc:	e7c3      	b.n	8002446 <_vfiprintf_r+0x176>
 80024be:	fb0c 2101 	mla	r1, ip, r1, r2
 80024c2:	4604      	mov	r4, r0
 80024c4:	2301      	movs	r3, #1
 80024c6:	e7f0      	b.n	80024aa <_vfiprintf_r+0x1da>
 80024c8:	ab03      	add	r3, sp, #12
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	462a      	mov	r2, r5
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <_vfiprintf_r+0x258>)
 80024d0:	a904      	add	r1, sp, #16
 80024d2:	4630      	mov	r0, r6
 80024d4:	f3af 8000 	nop.w
 80024d8:	4607      	mov	r7, r0
 80024da:	1c78      	adds	r0, r7, #1
 80024dc:	d1d6      	bne.n	800248c <_vfiprintf_r+0x1bc>
 80024de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024e0:	07d9      	lsls	r1, r3, #31
 80024e2:	d405      	bmi.n	80024f0 <_vfiprintf_r+0x220>
 80024e4:	89ab      	ldrh	r3, [r5, #12]
 80024e6:	059a      	lsls	r2, r3, #22
 80024e8:	d402      	bmi.n	80024f0 <_vfiprintf_r+0x220>
 80024ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024ec:	f7ff fe31 	bl	8002152 <__retarget_lock_release_recursive>
 80024f0:	89ab      	ldrh	r3, [r5, #12]
 80024f2:	065b      	lsls	r3, r3, #25
 80024f4:	f53f af12 	bmi.w	800231c <_vfiprintf_r+0x4c>
 80024f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024fa:	e711      	b.n	8002320 <_vfiprintf_r+0x50>
 80024fc:	ab03      	add	r3, sp, #12
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	462a      	mov	r2, r5
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <_vfiprintf_r+0x258>)
 8002504:	a904      	add	r1, sp, #16
 8002506:	4630      	mov	r0, r6
 8002508:	f000 f880 	bl	800260c <_printf_i>
 800250c:	e7e4      	b.n	80024d8 <_vfiprintf_r+0x208>
 800250e:	bf00      	nop
 8002510:	08003484 	.word	0x08003484
 8002514:	080034a4 	.word	0x080034a4
 8002518:	08003464 	.word	0x08003464
 800251c:	080034c4 	.word	0x080034c4
 8002520:	080034ce 	.word	0x080034ce
 8002524:	00000000 	.word	0x00000000
 8002528:	080022ab 	.word	0x080022ab
 800252c:	080034ca 	.word	0x080034ca

08002530 <_printf_common>:
 8002530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002534:	4616      	mov	r6, r2
 8002536:	4699      	mov	r9, r3
 8002538:	688a      	ldr	r2, [r1, #8]
 800253a:	690b      	ldr	r3, [r1, #16]
 800253c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002540:	4293      	cmp	r3, r2
 8002542:	bfb8      	it	lt
 8002544:	4613      	movlt	r3, r2
 8002546:	6033      	str	r3, [r6, #0]
 8002548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800254c:	4607      	mov	r7, r0
 800254e:	460c      	mov	r4, r1
 8002550:	b10a      	cbz	r2, 8002556 <_printf_common+0x26>
 8002552:	3301      	adds	r3, #1
 8002554:	6033      	str	r3, [r6, #0]
 8002556:	6823      	ldr	r3, [r4, #0]
 8002558:	0699      	lsls	r1, r3, #26
 800255a:	bf42      	ittt	mi
 800255c:	6833      	ldrmi	r3, [r6, #0]
 800255e:	3302      	addmi	r3, #2
 8002560:	6033      	strmi	r3, [r6, #0]
 8002562:	6825      	ldr	r5, [r4, #0]
 8002564:	f015 0506 	ands.w	r5, r5, #6
 8002568:	d106      	bne.n	8002578 <_printf_common+0x48>
 800256a:	f104 0a19 	add.w	sl, r4, #25
 800256e:	68e3      	ldr	r3, [r4, #12]
 8002570:	6832      	ldr	r2, [r6, #0]
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	42ab      	cmp	r3, r5
 8002576:	dc26      	bgt.n	80025c6 <_printf_common+0x96>
 8002578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800257c:	1e13      	subs	r3, r2, #0
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	bf18      	it	ne
 8002582:	2301      	movne	r3, #1
 8002584:	0692      	lsls	r2, r2, #26
 8002586:	d42b      	bmi.n	80025e0 <_printf_common+0xb0>
 8002588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800258c:	4649      	mov	r1, r9
 800258e:	4638      	mov	r0, r7
 8002590:	47c0      	blx	r8
 8002592:	3001      	adds	r0, #1
 8002594:	d01e      	beq.n	80025d4 <_printf_common+0xa4>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	68e5      	ldr	r5, [r4, #12]
 800259a:	6832      	ldr	r2, [r6, #0]
 800259c:	f003 0306 	and.w	r3, r3, #6
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	bf08      	it	eq
 80025a4:	1aad      	subeq	r5, r5, r2
 80025a6:	68a3      	ldr	r3, [r4, #8]
 80025a8:	6922      	ldr	r2, [r4, #16]
 80025aa:	bf0c      	ite	eq
 80025ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025b0:	2500      	movne	r5, #0
 80025b2:	4293      	cmp	r3, r2
 80025b4:	bfc4      	itt	gt
 80025b6:	1a9b      	subgt	r3, r3, r2
 80025b8:	18ed      	addgt	r5, r5, r3
 80025ba:	2600      	movs	r6, #0
 80025bc:	341a      	adds	r4, #26
 80025be:	42b5      	cmp	r5, r6
 80025c0:	d11a      	bne.n	80025f8 <_printf_common+0xc8>
 80025c2:	2000      	movs	r0, #0
 80025c4:	e008      	b.n	80025d8 <_printf_common+0xa8>
 80025c6:	2301      	movs	r3, #1
 80025c8:	4652      	mov	r2, sl
 80025ca:	4649      	mov	r1, r9
 80025cc:	4638      	mov	r0, r7
 80025ce:	47c0      	blx	r8
 80025d0:	3001      	adds	r0, #1
 80025d2:	d103      	bne.n	80025dc <_printf_common+0xac>
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025dc:	3501      	adds	r5, #1
 80025de:	e7c6      	b.n	800256e <_printf_common+0x3e>
 80025e0:	18e1      	adds	r1, r4, r3
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	2030      	movs	r0, #48	; 0x30
 80025e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025ea:	4422      	add	r2, r4
 80025ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025f4:	3302      	adds	r3, #2
 80025f6:	e7c7      	b.n	8002588 <_printf_common+0x58>
 80025f8:	2301      	movs	r3, #1
 80025fa:	4622      	mov	r2, r4
 80025fc:	4649      	mov	r1, r9
 80025fe:	4638      	mov	r0, r7
 8002600:	47c0      	blx	r8
 8002602:	3001      	adds	r0, #1
 8002604:	d0e6      	beq.n	80025d4 <_printf_common+0xa4>
 8002606:	3601      	adds	r6, #1
 8002608:	e7d9      	b.n	80025be <_printf_common+0x8e>
	...

0800260c <_printf_i>:
 800260c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002610:	7e0f      	ldrb	r7, [r1, #24]
 8002612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002614:	2f78      	cmp	r7, #120	; 0x78
 8002616:	4691      	mov	r9, r2
 8002618:	4680      	mov	r8, r0
 800261a:	460c      	mov	r4, r1
 800261c:	469a      	mov	sl, r3
 800261e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002622:	d807      	bhi.n	8002634 <_printf_i+0x28>
 8002624:	2f62      	cmp	r7, #98	; 0x62
 8002626:	d80a      	bhi.n	800263e <_printf_i+0x32>
 8002628:	2f00      	cmp	r7, #0
 800262a:	f000 80d8 	beq.w	80027de <_printf_i+0x1d2>
 800262e:	2f58      	cmp	r7, #88	; 0x58
 8002630:	f000 80a3 	beq.w	800277a <_printf_i+0x16e>
 8002634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800263c:	e03a      	b.n	80026b4 <_printf_i+0xa8>
 800263e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002642:	2b15      	cmp	r3, #21
 8002644:	d8f6      	bhi.n	8002634 <_printf_i+0x28>
 8002646:	a101      	add	r1, pc, #4	; (adr r1, 800264c <_printf_i+0x40>)
 8002648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800264c:	080026a5 	.word	0x080026a5
 8002650:	080026b9 	.word	0x080026b9
 8002654:	08002635 	.word	0x08002635
 8002658:	08002635 	.word	0x08002635
 800265c:	08002635 	.word	0x08002635
 8002660:	08002635 	.word	0x08002635
 8002664:	080026b9 	.word	0x080026b9
 8002668:	08002635 	.word	0x08002635
 800266c:	08002635 	.word	0x08002635
 8002670:	08002635 	.word	0x08002635
 8002674:	08002635 	.word	0x08002635
 8002678:	080027c5 	.word	0x080027c5
 800267c:	080026e9 	.word	0x080026e9
 8002680:	080027a7 	.word	0x080027a7
 8002684:	08002635 	.word	0x08002635
 8002688:	08002635 	.word	0x08002635
 800268c:	080027e7 	.word	0x080027e7
 8002690:	08002635 	.word	0x08002635
 8002694:	080026e9 	.word	0x080026e9
 8002698:	08002635 	.word	0x08002635
 800269c:	08002635 	.word	0x08002635
 80026a0:	080027af 	.word	0x080027af
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	1d1a      	adds	r2, r3, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	602a      	str	r2, [r5, #0]
 80026ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0a3      	b.n	8002800 <_printf_i+0x1f4>
 80026b8:	6820      	ldr	r0, [r4, #0]
 80026ba:	6829      	ldr	r1, [r5, #0]
 80026bc:	0606      	lsls	r6, r0, #24
 80026be:	f101 0304 	add.w	r3, r1, #4
 80026c2:	d50a      	bpl.n	80026da <_printf_i+0xce>
 80026c4:	680e      	ldr	r6, [r1, #0]
 80026c6:	602b      	str	r3, [r5, #0]
 80026c8:	2e00      	cmp	r6, #0
 80026ca:	da03      	bge.n	80026d4 <_printf_i+0xc8>
 80026cc:	232d      	movs	r3, #45	; 0x2d
 80026ce:	4276      	negs	r6, r6
 80026d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026d4:	485e      	ldr	r0, [pc, #376]	; (8002850 <_printf_i+0x244>)
 80026d6:	230a      	movs	r3, #10
 80026d8:	e019      	b.n	800270e <_printf_i+0x102>
 80026da:	680e      	ldr	r6, [r1, #0]
 80026dc:	602b      	str	r3, [r5, #0]
 80026de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80026e2:	bf18      	it	ne
 80026e4:	b236      	sxthne	r6, r6
 80026e6:	e7ef      	b.n	80026c8 <_printf_i+0xbc>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	1d19      	adds	r1, r3, #4
 80026ee:	6029      	str	r1, [r5, #0]
 80026f0:	0601      	lsls	r1, r0, #24
 80026f2:	d501      	bpl.n	80026f8 <_printf_i+0xec>
 80026f4:	681e      	ldr	r6, [r3, #0]
 80026f6:	e002      	b.n	80026fe <_printf_i+0xf2>
 80026f8:	0646      	lsls	r6, r0, #25
 80026fa:	d5fb      	bpl.n	80026f4 <_printf_i+0xe8>
 80026fc:	881e      	ldrh	r6, [r3, #0]
 80026fe:	4854      	ldr	r0, [pc, #336]	; (8002850 <_printf_i+0x244>)
 8002700:	2f6f      	cmp	r7, #111	; 0x6f
 8002702:	bf0c      	ite	eq
 8002704:	2308      	moveq	r3, #8
 8002706:	230a      	movne	r3, #10
 8002708:	2100      	movs	r1, #0
 800270a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800270e:	6865      	ldr	r5, [r4, #4]
 8002710:	60a5      	str	r5, [r4, #8]
 8002712:	2d00      	cmp	r5, #0
 8002714:	bfa2      	ittt	ge
 8002716:	6821      	ldrge	r1, [r4, #0]
 8002718:	f021 0104 	bicge.w	r1, r1, #4
 800271c:	6021      	strge	r1, [r4, #0]
 800271e:	b90e      	cbnz	r6, 8002724 <_printf_i+0x118>
 8002720:	2d00      	cmp	r5, #0
 8002722:	d04d      	beq.n	80027c0 <_printf_i+0x1b4>
 8002724:	4615      	mov	r5, r2
 8002726:	fbb6 f1f3 	udiv	r1, r6, r3
 800272a:	fb03 6711 	mls	r7, r3, r1, r6
 800272e:	5dc7      	ldrb	r7, [r0, r7]
 8002730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002734:	4637      	mov	r7, r6
 8002736:	42bb      	cmp	r3, r7
 8002738:	460e      	mov	r6, r1
 800273a:	d9f4      	bls.n	8002726 <_printf_i+0x11a>
 800273c:	2b08      	cmp	r3, #8
 800273e:	d10b      	bne.n	8002758 <_printf_i+0x14c>
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	07de      	lsls	r6, r3, #31
 8002744:	d508      	bpl.n	8002758 <_printf_i+0x14c>
 8002746:	6923      	ldr	r3, [r4, #16]
 8002748:	6861      	ldr	r1, [r4, #4]
 800274a:	4299      	cmp	r1, r3
 800274c:	bfde      	ittt	le
 800274e:	2330      	movle	r3, #48	; 0x30
 8002750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002758:	1b52      	subs	r2, r2, r5
 800275a:	6122      	str	r2, [r4, #16]
 800275c:	f8cd a000 	str.w	sl, [sp]
 8002760:	464b      	mov	r3, r9
 8002762:	aa03      	add	r2, sp, #12
 8002764:	4621      	mov	r1, r4
 8002766:	4640      	mov	r0, r8
 8002768:	f7ff fee2 	bl	8002530 <_printf_common>
 800276c:	3001      	adds	r0, #1
 800276e:	d14c      	bne.n	800280a <_printf_i+0x1fe>
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	b004      	add	sp, #16
 8002776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800277a:	4835      	ldr	r0, [pc, #212]	; (8002850 <_printf_i+0x244>)
 800277c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002780:	6829      	ldr	r1, [r5, #0]
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	f851 6b04 	ldr.w	r6, [r1], #4
 8002788:	6029      	str	r1, [r5, #0]
 800278a:	061d      	lsls	r5, r3, #24
 800278c:	d514      	bpl.n	80027b8 <_printf_i+0x1ac>
 800278e:	07df      	lsls	r7, r3, #31
 8002790:	bf44      	itt	mi
 8002792:	f043 0320 	orrmi.w	r3, r3, #32
 8002796:	6023      	strmi	r3, [r4, #0]
 8002798:	b91e      	cbnz	r6, 80027a2 <_printf_i+0x196>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	f023 0320 	bic.w	r3, r3, #32
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	2310      	movs	r3, #16
 80027a4:	e7b0      	b.n	8002708 <_printf_i+0xfc>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	f043 0320 	orr.w	r3, r3, #32
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	2378      	movs	r3, #120	; 0x78
 80027b0:	4828      	ldr	r0, [pc, #160]	; (8002854 <_printf_i+0x248>)
 80027b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027b6:	e7e3      	b.n	8002780 <_printf_i+0x174>
 80027b8:	0659      	lsls	r1, r3, #25
 80027ba:	bf48      	it	mi
 80027bc:	b2b6      	uxthmi	r6, r6
 80027be:	e7e6      	b.n	800278e <_printf_i+0x182>
 80027c0:	4615      	mov	r5, r2
 80027c2:	e7bb      	b.n	800273c <_printf_i+0x130>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	6826      	ldr	r6, [r4, #0]
 80027c8:	6961      	ldr	r1, [r4, #20]
 80027ca:	1d18      	adds	r0, r3, #4
 80027cc:	6028      	str	r0, [r5, #0]
 80027ce:	0635      	lsls	r5, r6, #24
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	d501      	bpl.n	80027d8 <_printf_i+0x1cc>
 80027d4:	6019      	str	r1, [r3, #0]
 80027d6:	e002      	b.n	80027de <_printf_i+0x1d2>
 80027d8:	0670      	lsls	r0, r6, #25
 80027da:	d5fb      	bpl.n	80027d4 <_printf_i+0x1c8>
 80027dc:	8019      	strh	r1, [r3, #0]
 80027de:	2300      	movs	r3, #0
 80027e0:	6123      	str	r3, [r4, #16]
 80027e2:	4615      	mov	r5, r2
 80027e4:	e7ba      	b.n	800275c <_printf_i+0x150>
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	1d1a      	adds	r2, r3, #4
 80027ea:	602a      	str	r2, [r5, #0]
 80027ec:	681d      	ldr	r5, [r3, #0]
 80027ee:	6862      	ldr	r2, [r4, #4]
 80027f0:	2100      	movs	r1, #0
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7fd fcf4 	bl	80001e0 <memchr>
 80027f8:	b108      	cbz	r0, 80027fe <_printf_i+0x1f2>
 80027fa:	1b40      	subs	r0, r0, r5
 80027fc:	6060      	str	r0, [r4, #4]
 80027fe:	6863      	ldr	r3, [r4, #4]
 8002800:	6123      	str	r3, [r4, #16]
 8002802:	2300      	movs	r3, #0
 8002804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002808:	e7a8      	b.n	800275c <_printf_i+0x150>
 800280a:	6923      	ldr	r3, [r4, #16]
 800280c:	462a      	mov	r2, r5
 800280e:	4649      	mov	r1, r9
 8002810:	4640      	mov	r0, r8
 8002812:	47d0      	blx	sl
 8002814:	3001      	adds	r0, #1
 8002816:	d0ab      	beq.n	8002770 <_printf_i+0x164>
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	079b      	lsls	r3, r3, #30
 800281c:	d413      	bmi.n	8002846 <_printf_i+0x23a>
 800281e:	68e0      	ldr	r0, [r4, #12]
 8002820:	9b03      	ldr	r3, [sp, #12]
 8002822:	4298      	cmp	r0, r3
 8002824:	bfb8      	it	lt
 8002826:	4618      	movlt	r0, r3
 8002828:	e7a4      	b.n	8002774 <_printf_i+0x168>
 800282a:	2301      	movs	r3, #1
 800282c:	4632      	mov	r2, r6
 800282e:	4649      	mov	r1, r9
 8002830:	4640      	mov	r0, r8
 8002832:	47d0      	blx	sl
 8002834:	3001      	adds	r0, #1
 8002836:	d09b      	beq.n	8002770 <_printf_i+0x164>
 8002838:	3501      	adds	r5, #1
 800283a:	68e3      	ldr	r3, [r4, #12]
 800283c:	9903      	ldr	r1, [sp, #12]
 800283e:	1a5b      	subs	r3, r3, r1
 8002840:	42ab      	cmp	r3, r5
 8002842:	dcf2      	bgt.n	800282a <_printf_i+0x21e>
 8002844:	e7eb      	b.n	800281e <_printf_i+0x212>
 8002846:	2500      	movs	r5, #0
 8002848:	f104 0619 	add.w	r6, r4, #25
 800284c:	e7f5      	b.n	800283a <_printf_i+0x22e>
 800284e:	bf00      	nop
 8002850:	080034d5 	.word	0x080034d5
 8002854:	080034e6 	.word	0x080034e6

08002858 <_putc_r>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	460d      	mov	r5, r1
 800285c:	4614      	mov	r4, r2
 800285e:	4606      	mov	r6, r0
 8002860:	b118      	cbz	r0, 800286a <_putc_r+0x12>
 8002862:	6983      	ldr	r3, [r0, #24]
 8002864:	b90b      	cbnz	r3, 800286a <_putc_r+0x12>
 8002866:	f7ff fbd5 	bl	8002014 <__sinit>
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <_putc_r+0x84>)
 800286c:	429c      	cmp	r4, r3
 800286e:	d124      	bne.n	80028ba <_putc_r+0x62>
 8002870:	6874      	ldr	r4, [r6, #4]
 8002872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002874:	07d8      	lsls	r0, r3, #31
 8002876:	d405      	bmi.n	8002884 <_putc_r+0x2c>
 8002878:	89a3      	ldrh	r3, [r4, #12]
 800287a:	0599      	lsls	r1, r3, #22
 800287c:	d402      	bmi.n	8002884 <_putc_r+0x2c>
 800287e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002880:	f7ff fc66 	bl	8002150 <__retarget_lock_acquire_recursive>
 8002884:	68a3      	ldr	r3, [r4, #8]
 8002886:	3b01      	subs	r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	60a3      	str	r3, [r4, #8]
 800288c:	da05      	bge.n	800289a <_putc_r+0x42>
 800288e:	69a2      	ldr	r2, [r4, #24]
 8002890:	4293      	cmp	r3, r2
 8002892:	db1c      	blt.n	80028ce <_putc_r+0x76>
 8002894:	b2eb      	uxtb	r3, r5
 8002896:	2b0a      	cmp	r3, #10
 8002898:	d019      	beq.n	80028ce <_putc_r+0x76>
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	6022      	str	r2, [r4, #0]
 80028a0:	701d      	strb	r5, [r3, #0]
 80028a2:	b2ed      	uxtb	r5, r5
 80028a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028a6:	07da      	lsls	r2, r3, #31
 80028a8:	d405      	bmi.n	80028b6 <_putc_r+0x5e>
 80028aa:	89a3      	ldrh	r3, [r4, #12]
 80028ac:	059b      	lsls	r3, r3, #22
 80028ae:	d402      	bmi.n	80028b6 <_putc_r+0x5e>
 80028b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028b2:	f7ff fc4e 	bl	8002152 <__retarget_lock_release_recursive>
 80028b6:	4628      	mov	r0, r5
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <_putc_r+0x88>)
 80028bc:	429c      	cmp	r4, r3
 80028be:	d101      	bne.n	80028c4 <_putc_r+0x6c>
 80028c0:	68b4      	ldr	r4, [r6, #8]
 80028c2:	e7d6      	b.n	8002872 <_putc_r+0x1a>
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <_putc_r+0x8c>)
 80028c6:	429c      	cmp	r4, r3
 80028c8:	bf08      	it	eq
 80028ca:	68f4      	ldreq	r4, [r6, #12]
 80028cc:	e7d1      	b.n	8002872 <_putc_r+0x1a>
 80028ce:	4629      	mov	r1, r5
 80028d0:	4622      	mov	r2, r4
 80028d2:	4630      	mov	r0, r6
 80028d4:	f000 f85c 	bl	8002990 <__swbuf_r>
 80028d8:	4605      	mov	r5, r0
 80028da:	e7e3      	b.n	80028a4 <_putc_r+0x4c>
 80028dc:	08003484 	.word	0x08003484
 80028e0:	080034a4 	.word	0x080034a4
 80028e4:	08003464 	.word	0x08003464

080028e8 <_sbrk_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4d06      	ldr	r5, [pc, #24]	; (8002904 <_sbrk_r+0x1c>)
 80028ec:	2300      	movs	r3, #0
 80028ee:	4604      	mov	r4, r0
 80028f0:	4608      	mov	r0, r1
 80028f2:	602b      	str	r3, [r5, #0]
 80028f4:	f7fe f830 	bl	8000958 <_sbrk>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d102      	bne.n	8002902 <_sbrk_r+0x1a>
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	b103      	cbz	r3, 8002902 <_sbrk_r+0x1a>
 8002900:	6023      	str	r3, [r4, #0]
 8002902:	bd38      	pop	{r3, r4, r5, pc}
 8002904:	20000100 	.word	0x20000100

08002908 <__sread>:
 8002908:	b510      	push	{r4, lr}
 800290a:	460c      	mov	r4, r1
 800290c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002910:	f000 fab2 	bl	8002e78 <_read_r>
 8002914:	2800      	cmp	r0, #0
 8002916:	bfab      	itete	ge
 8002918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800291a:	89a3      	ldrhlt	r3, [r4, #12]
 800291c:	181b      	addge	r3, r3, r0
 800291e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002922:	bfac      	ite	ge
 8002924:	6563      	strge	r3, [r4, #84]	; 0x54
 8002926:	81a3      	strhlt	r3, [r4, #12]
 8002928:	bd10      	pop	{r4, pc}

0800292a <__swrite>:
 800292a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292e:	461f      	mov	r7, r3
 8002930:	898b      	ldrh	r3, [r1, #12]
 8002932:	05db      	lsls	r3, r3, #23
 8002934:	4605      	mov	r5, r0
 8002936:	460c      	mov	r4, r1
 8002938:	4616      	mov	r6, r2
 800293a:	d505      	bpl.n	8002948 <__swrite+0x1e>
 800293c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002940:	2302      	movs	r3, #2
 8002942:	2200      	movs	r2, #0
 8002944:	f000 f9c8 	bl	8002cd8 <_lseek_r>
 8002948:	89a3      	ldrh	r3, [r4, #12]
 800294a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800294e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002952:	81a3      	strh	r3, [r4, #12]
 8002954:	4632      	mov	r2, r6
 8002956:	463b      	mov	r3, r7
 8002958:	4628      	mov	r0, r5
 800295a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800295e:	f000 b869 	b.w	8002a34 <_write_r>

08002962 <__sseek>:
 8002962:	b510      	push	{r4, lr}
 8002964:	460c      	mov	r4, r1
 8002966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800296a:	f000 f9b5 	bl	8002cd8 <_lseek_r>
 800296e:	1c43      	adds	r3, r0, #1
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	bf15      	itete	ne
 8002974:	6560      	strne	r0, [r4, #84]	; 0x54
 8002976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800297a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800297e:	81a3      	strheq	r3, [r4, #12]
 8002980:	bf18      	it	ne
 8002982:	81a3      	strhne	r3, [r4, #12]
 8002984:	bd10      	pop	{r4, pc}

08002986 <__sclose>:
 8002986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298a:	f000 b8d3 	b.w	8002b34 <_close_r>
	...

08002990 <__swbuf_r>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	460e      	mov	r6, r1
 8002994:	4614      	mov	r4, r2
 8002996:	4605      	mov	r5, r0
 8002998:	b118      	cbz	r0, 80029a2 <__swbuf_r+0x12>
 800299a:	6983      	ldr	r3, [r0, #24]
 800299c:	b90b      	cbnz	r3, 80029a2 <__swbuf_r+0x12>
 800299e:	f7ff fb39 	bl	8002014 <__sinit>
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <__swbuf_r+0x98>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	d12b      	bne.n	8002a00 <__swbuf_r+0x70>
 80029a8:	686c      	ldr	r4, [r5, #4]
 80029aa:	69a3      	ldr	r3, [r4, #24]
 80029ac:	60a3      	str	r3, [r4, #8]
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	071a      	lsls	r2, r3, #28
 80029b2:	d52f      	bpl.n	8002a14 <__swbuf_r+0x84>
 80029b4:	6923      	ldr	r3, [r4, #16]
 80029b6:	b36b      	cbz	r3, 8002a14 <__swbuf_r+0x84>
 80029b8:	6923      	ldr	r3, [r4, #16]
 80029ba:	6820      	ldr	r0, [r4, #0]
 80029bc:	1ac0      	subs	r0, r0, r3
 80029be:	6963      	ldr	r3, [r4, #20]
 80029c0:	b2f6      	uxtb	r6, r6
 80029c2:	4283      	cmp	r3, r0
 80029c4:	4637      	mov	r7, r6
 80029c6:	dc04      	bgt.n	80029d2 <__swbuf_r+0x42>
 80029c8:	4621      	mov	r1, r4
 80029ca:	4628      	mov	r0, r5
 80029cc:	f000 f948 	bl	8002c60 <_fflush_r>
 80029d0:	bb30      	cbnz	r0, 8002a20 <__swbuf_r+0x90>
 80029d2:	68a3      	ldr	r3, [r4, #8]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	60a3      	str	r3, [r4, #8]
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	6022      	str	r2, [r4, #0]
 80029de:	701e      	strb	r6, [r3, #0]
 80029e0:	6963      	ldr	r3, [r4, #20]
 80029e2:	3001      	adds	r0, #1
 80029e4:	4283      	cmp	r3, r0
 80029e6:	d004      	beq.n	80029f2 <__swbuf_r+0x62>
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	07db      	lsls	r3, r3, #31
 80029ec:	d506      	bpl.n	80029fc <__swbuf_r+0x6c>
 80029ee:	2e0a      	cmp	r6, #10
 80029f0:	d104      	bne.n	80029fc <__swbuf_r+0x6c>
 80029f2:	4621      	mov	r1, r4
 80029f4:	4628      	mov	r0, r5
 80029f6:	f000 f933 	bl	8002c60 <_fflush_r>
 80029fa:	b988      	cbnz	r0, 8002a20 <__swbuf_r+0x90>
 80029fc:	4638      	mov	r0, r7
 80029fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <__swbuf_r+0x9c>)
 8002a02:	429c      	cmp	r4, r3
 8002a04:	d101      	bne.n	8002a0a <__swbuf_r+0x7a>
 8002a06:	68ac      	ldr	r4, [r5, #8]
 8002a08:	e7cf      	b.n	80029aa <__swbuf_r+0x1a>
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <__swbuf_r+0xa0>)
 8002a0c:	429c      	cmp	r4, r3
 8002a0e:	bf08      	it	eq
 8002a10:	68ec      	ldreq	r4, [r5, #12]
 8002a12:	e7ca      	b.n	80029aa <__swbuf_r+0x1a>
 8002a14:	4621      	mov	r1, r4
 8002a16:	4628      	mov	r0, r5
 8002a18:	f000 f81e 	bl	8002a58 <__swsetup_r>
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	d0cb      	beq.n	80029b8 <__swbuf_r+0x28>
 8002a20:	f04f 37ff 	mov.w	r7, #4294967295
 8002a24:	e7ea      	b.n	80029fc <__swbuf_r+0x6c>
 8002a26:	bf00      	nop
 8002a28:	08003484 	.word	0x08003484
 8002a2c:	080034a4 	.word	0x080034a4
 8002a30:	08003464 	.word	0x08003464

08002a34 <_write_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	4d07      	ldr	r5, [pc, #28]	; (8002a54 <_write_r+0x20>)
 8002a38:	4604      	mov	r4, r0
 8002a3a:	4608      	mov	r0, r1
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	602a      	str	r2, [r5, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 faf3 	bl	800302e <_write>
 8002a48:	1c43      	adds	r3, r0, #1
 8002a4a:	d102      	bne.n	8002a52 <_write_r+0x1e>
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	b103      	cbz	r3, 8002a52 <_write_r+0x1e>
 8002a50:	6023      	str	r3, [r4, #0]
 8002a52:	bd38      	pop	{r3, r4, r5, pc}
 8002a54:	20000100 	.word	0x20000100

08002a58 <__swsetup_r>:
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <__swsetup_r+0xcc>)
 8002a5a:	b570      	push	{r4, r5, r6, lr}
 8002a5c:	681d      	ldr	r5, [r3, #0]
 8002a5e:	4606      	mov	r6, r0
 8002a60:	460c      	mov	r4, r1
 8002a62:	b125      	cbz	r5, 8002a6e <__swsetup_r+0x16>
 8002a64:	69ab      	ldr	r3, [r5, #24]
 8002a66:	b913      	cbnz	r3, 8002a6e <__swsetup_r+0x16>
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7ff fad3 	bl	8002014 <__sinit>
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <__swsetup_r+0xd0>)
 8002a70:	429c      	cmp	r4, r3
 8002a72:	d10f      	bne.n	8002a94 <__swsetup_r+0x3c>
 8002a74:	686c      	ldr	r4, [r5, #4]
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a7c:	0719      	lsls	r1, r3, #28
 8002a7e:	d42c      	bmi.n	8002ada <__swsetup_r+0x82>
 8002a80:	06dd      	lsls	r5, r3, #27
 8002a82:	d411      	bmi.n	8002aa8 <__swsetup_r+0x50>
 8002a84:	2309      	movs	r3, #9
 8002a86:	6033      	str	r3, [r6, #0]
 8002a88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a8c:	81a3      	strh	r3, [r4, #12]
 8002a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a92:	e03e      	b.n	8002b12 <__swsetup_r+0xba>
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <__swsetup_r+0xd4>)
 8002a96:	429c      	cmp	r4, r3
 8002a98:	d101      	bne.n	8002a9e <__swsetup_r+0x46>
 8002a9a:	68ac      	ldr	r4, [r5, #8]
 8002a9c:	e7eb      	b.n	8002a76 <__swsetup_r+0x1e>
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <__swsetup_r+0xd8>)
 8002aa0:	429c      	cmp	r4, r3
 8002aa2:	bf08      	it	eq
 8002aa4:	68ec      	ldreq	r4, [r5, #12]
 8002aa6:	e7e6      	b.n	8002a76 <__swsetup_r+0x1e>
 8002aa8:	0758      	lsls	r0, r3, #29
 8002aaa:	d512      	bpl.n	8002ad2 <__swsetup_r+0x7a>
 8002aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aae:	b141      	cbz	r1, 8002ac2 <__swsetup_r+0x6a>
 8002ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ab4:	4299      	cmp	r1, r3
 8002ab6:	d002      	beq.n	8002abe <__swsetup_r+0x66>
 8002ab8:	4630      	mov	r0, r6
 8002aba:	f000 f991 	bl	8002de0 <_free_r>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ac2:	89a3      	ldrh	r3, [r4, #12]
 8002ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ac8:	81a3      	strh	r3, [r4, #12]
 8002aca:	2300      	movs	r3, #0
 8002acc:	6063      	str	r3, [r4, #4]
 8002ace:	6923      	ldr	r3, [r4, #16]
 8002ad0:	6023      	str	r3, [r4, #0]
 8002ad2:	89a3      	ldrh	r3, [r4, #12]
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	81a3      	strh	r3, [r4, #12]
 8002ada:	6923      	ldr	r3, [r4, #16]
 8002adc:	b94b      	cbnz	r3, 8002af2 <__swsetup_r+0x9a>
 8002ade:	89a3      	ldrh	r3, [r4, #12]
 8002ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae8:	d003      	beq.n	8002af2 <__swsetup_r+0x9a>
 8002aea:	4621      	mov	r1, r4
 8002aec:	4630      	mov	r0, r6
 8002aee:	f000 f92b 	bl	8002d48 <__smakebuf_r>
 8002af2:	89a0      	ldrh	r0, [r4, #12]
 8002af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002af8:	f010 0301 	ands.w	r3, r0, #1
 8002afc:	d00a      	beq.n	8002b14 <__swsetup_r+0xbc>
 8002afe:	2300      	movs	r3, #0
 8002b00:	60a3      	str	r3, [r4, #8]
 8002b02:	6963      	ldr	r3, [r4, #20]
 8002b04:	425b      	negs	r3, r3
 8002b06:	61a3      	str	r3, [r4, #24]
 8002b08:	6923      	ldr	r3, [r4, #16]
 8002b0a:	b943      	cbnz	r3, 8002b1e <__swsetup_r+0xc6>
 8002b0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b10:	d1ba      	bne.n	8002a88 <__swsetup_r+0x30>
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	0781      	lsls	r1, r0, #30
 8002b16:	bf58      	it	pl
 8002b18:	6963      	ldrpl	r3, [r4, #20]
 8002b1a:	60a3      	str	r3, [r4, #8]
 8002b1c:	e7f4      	b.n	8002b08 <__swsetup_r+0xb0>
 8002b1e:	2000      	movs	r0, #0
 8002b20:	e7f7      	b.n	8002b12 <__swsetup_r+0xba>
 8002b22:	bf00      	nop
 8002b24:	2000000c 	.word	0x2000000c
 8002b28:	08003484 	.word	0x08003484
 8002b2c:	080034a4 	.word	0x080034a4
 8002b30:	08003464 	.word	0x08003464

08002b34 <_close_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4d06      	ldr	r5, [pc, #24]	; (8002b50 <_close_r+0x1c>)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	602b      	str	r3, [r5, #0]
 8002b40:	f000 faa6 	bl	8003090 <_close>
 8002b44:	1c43      	adds	r3, r0, #1
 8002b46:	d102      	bne.n	8002b4e <_close_r+0x1a>
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	b103      	cbz	r3, 8002b4e <_close_r+0x1a>
 8002b4c:	6023      	str	r3, [r4, #0]
 8002b4e:	bd38      	pop	{r3, r4, r5, pc}
 8002b50:	20000100 	.word	0x20000100

08002b54 <__sflush_r>:
 8002b54:	898a      	ldrh	r2, [r1, #12]
 8002b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	0710      	lsls	r0, r2, #28
 8002b5e:	460c      	mov	r4, r1
 8002b60:	d458      	bmi.n	8002c14 <__sflush_r+0xc0>
 8002b62:	684b      	ldr	r3, [r1, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	dc05      	bgt.n	8002b74 <__sflush_r+0x20>
 8002b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	dc02      	bgt.n	8002b74 <__sflush_r+0x20>
 8002b6e:	2000      	movs	r0, #0
 8002b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b76:	2e00      	cmp	r6, #0
 8002b78:	d0f9      	beq.n	8002b6e <__sflush_r+0x1a>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b80:	682f      	ldr	r7, [r5, #0]
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	d032      	beq.n	8002bec <__sflush_r+0x98>
 8002b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	075a      	lsls	r2, r3, #29
 8002b8c:	d505      	bpl.n	8002b9a <__sflush_r+0x46>
 8002b8e:	6863      	ldr	r3, [r4, #4]
 8002b90:	1ac0      	subs	r0, r0, r3
 8002b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b94:	b10b      	cbz	r3, 8002b9a <__sflush_r+0x46>
 8002b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b98:	1ac0      	subs	r0, r0, r3
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ba0:	6a21      	ldr	r1, [r4, #32]
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	47b0      	blx	r6
 8002ba6:	1c43      	adds	r3, r0, #1
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	d106      	bne.n	8002bba <__sflush_r+0x66>
 8002bac:	6829      	ldr	r1, [r5, #0]
 8002bae:	291d      	cmp	r1, #29
 8002bb0:	d82c      	bhi.n	8002c0c <__sflush_r+0xb8>
 8002bb2:	4a2a      	ldr	r2, [pc, #168]	; (8002c5c <__sflush_r+0x108>)
 8002bb4:	40ca      	lsrs	r2, r1
 8002bb6:	07d6      	lsls	r6, r2, #31
 8002bb8:	d528      	bpl.n	8002c0c <__sflush_r+0xb8>
 8002bba:	2200      	movs	r2, #0
 8002bbc:	6062      	str	r2, [r4, #4]
 8002bbe:	04d9      	lsls	r1, r3, #19
 8002bc0:	6922      	ldr	r2, [r4, #16]
 8002bc2:	6022      	str	r2, [r4, #0]
 8002bc4:	d504      	bpl.n	8002bd0 <__sflush_r+0x7c>
 8002bc6:	1c42      	adds	r2, r0, #1
 8002bc8:	d101      	bne.n	8002bce <__sflush_r+0x7a>
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	b903      	cbnz	r3, 8002bd0 <__sflush_r+0x7c>
 8002bce:	6560      	str	r0, [r4, #84]	; 0x54
 8002bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bd2:	602f      	str	r7, [r5, #0]
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d0ca      	beq.n	8002b6e <__sflush_r+0x1a>
 8002bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bdc:	4299      	cmp	r1, r3
 8002bde:	d002      	beq.n	8002be6 <__sflush_r+0x92>
 8002be0:	4628      	mov	r0, r5
 8002be2:	f000 f8fd 	bl	8002de0 <_free_r>
 8002be6:	2000      	movs	r0, #0
 8002be8:	6360      	str	r0, [r4, #52]	; 0x34
 8002bea:	e7c1      	b.n	8002b70 <__sflush_r+0x1c>
 8002bec:	6a21      	ldr	r1, [r4, #32]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	47b0      	blx	r6
 8002bf4:	1c41      	adds	r1, r0, #1
 8002bf6:	d1c7      	bne.n	8002b88 <__sflush_r+0x34>
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0c4      	beq.n	8002b88 <__sflush_r+0x34>
 8002bfe:	2b1d      	cmp	r3, #29
 8002c00:	d001      	beq.n	8002c06 <__sflush_r+0xb2>
 8002c02:	2b16      	cmp	r3, #22
 8002c04:	d101      	bne.n	8002c0a <__sflush_r+0xb6>
 8002c06:	602f      	str	r7, [r5, #0]
 8002c08:	e7b1      	b.n	8002b6e <__sflush_r+0x1a>
 8002c0a:	89a3      	ldrh	r3, [r4, #12]
 8002c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c10:	81a3      	strh	r3, [r4, #12]
 8002c12:	e7ad      	b.n	8002b70 <__sflush_r+0x1c>
 8002c14:	690f      	ldr	r7, [r1, #16]
 8002c16:	2f00      	cmp	r7, #0
 8002c18:	d0a9      	beq.n	8002b6e <__sflush_r+0x1a>
 8002c1a:	0793      	lsls	r3, r2, #30
 8002c1c:	680e      	ldr	r6, [r1, #0]
 8002c1e:	bf08      	it	eq
 8002c20:	694b      	ldreq	r3, [r1, #20]
 8002c22:	600f      	str	r7, [r1, #0]
 8002c24:	bf18      	it	ne
 8002c26:	2300      	movne	r3, #0
 8002c28:	eba6 0807 	sub.w	r8, r6, r7
 8002c2c:	608b      	str	r3, [r1, #8]
 8002c2e:	f1b8 0f00 	cmp.w	r8, #0
 8002c32:	dd9c      	ble.n	8002b6e <__sflush_r+0x1a>
 8002c34:	6a21      	ldr	r1, [r4, #32]
 8002c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c38:	4643      	mov	r3, r8
 8002c3a:	463a      	mov	r2, r7
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	47b0      	blx	r6
 8002c40:	2800      	cmp	r0, #0
 8002c42:	dc06      	bgt.n	8002c52 <__sflush_r+0xfe>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c4a:	81a3      	strh	r3, [r4, #12]
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	e78e      	b.n	8002b70 <__sflush_r+0x1c>
 8002c52:	4407      	add	r7, r0
 8002c54:	eba8 0800 	sub.w	r8, r8, r0
 8002c58:	e7e9      	b.n	8002c2e <__sflush_r+0xda>
 8002c5a:	bf00      	nop
 8002c5c:	20400001 	.word	0x20400001

08002c60 <_fflush_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	690b      	ldr	r3, [r1, #16]
 8002c64:	4605      	mov	r5, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	b913      	cbnz	r3, 8002c70 <_fflush_r+0x10>
 8002c6a:	2500      	movs	r5, #0
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	b118      	cbz	r0, 8002c7a <_fflush_r+0x1a>
 8002c72:	6983      	ldr	r3, [r0, #24]
 8002c74:	b90b      	cbnz	r3, 8002c7a <_fflush_r+0x1a>
 8002c76:	f7ff f9cd 	bl	8002014 <__sinit>
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <_fflush_r+0x6c>)
 8002c7c:	429c      	cmp	r4, r3
 8002c7e:	d11b      	bne.n	8002cb8 <_fflush_r+0x58>
 8002c80:	686c      	ldr	r4, [r5, #4]
 8002c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ef      	beq.n	8002c6a <_fflush_r+0xa>
 8002c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c8c:	07d0      	lsls	r0, r2, #31
 8002c8e:	d404      	bmi.n	8002c9a <_fflush_r+0x3a>
 8002c90:	0599      	lsls	r1, r3, #22
 8002c92:	d402      	bmi.n	8002c9a <_fflush_r+0x3a>
 8002c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c96:	f7ff fa5b 	bl	8002150 <__retarget_lock_acquire_recursive>
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	f7ff ff59 	bl	8002b54 <__sflush_r>
 8002ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ca4:	07da      	lsls	r2, r3, #31
 8002ca6:	4605      	mov	r5, r0
 8002ca8:	d4e0      	bmi.n	8002c6c <_fflush_r+0xc>
 8002caa:	89a3      	ldrh	r3, [r4, #12]
 8002cac:	059b      	lsls	r3, r3, #22
 8002cae:	d4dd      	bmi.n	8002c6c <_fflush_r+0xc>
 8002cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cb2:	f7ff fa4e 	bl	8002152 <__retarget_lock_release_recursive>
 8002cb6:	e7d9      	b.n	8002c6c <_fflush_r+0xc>
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <_fflush_r+0x70>)
 8002cba:	429c      	cmp	r4, r3
 8002cbc:	d101      	bne.n	8002cc2 <_fflush_r+0x62>
 8002cbe:	68ac      	ldr	r4, [r5, #8]
 8002cc0:	e7df      	b.n	8002c82 <_fflush_r+0x22>
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <_fflush_r+0x74>)
 8002cc4:	429c      	cmp	r4, r3
 8002cc6:	bf08      	it	eq
 8002cc8:	68ec      	ldreq	r4, [r5, #12]
 8002cca:	e7da      	b.n	8002c82 <_fflush_r+0x22>
 8002ccc:	08003484 	.word	0x08003484
 8002cd0:	080034a4 	.word	0x080034a4
 8002cd4:	08003464 	.word	0x08003464

08002cd8 <_lseek_r>:
 8002cd8:	b538      	push	{r3, r4, r5, lr}
 8002cda:	4d07      	ldr	r5, [pc, #28]	; (8002cf8 <_lseek_r+0x20>)
 8002cdc:	4604      	mov	r4, r0
 8002cde:	4608      	mov	r0, r1
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	602a      	str	r2, [r5, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f000 f98f 	bl	800300a <_lseek>
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	d102      	bne.n	8002cf6 <_lseek_r+0x1e>
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	b103      	cbz	r3, 8002cf6 <_lseek_r+0x1e>
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	bd38      	pop	{r3, r4, r5, pc}
 8002cf8:	20000100 	.word	0x20000100

08002cfc <__swhatbuf_r>:
 8002cfc:	b570      	push	{r4, r5, r6, lr}
 8002cfe:	460e      	mov	r6, r1
 8002d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d04:	2900      	cmp	r1, #0
 8002d06:	b096      	sub	sp, #88	; 0x58
 8002d08:	4614      	mov	r4, r2
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	da08      	bge.n	8002d20 <__swhatbuf_r+0x24>
 8002d0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	602a      	str	r2, [r5, #0]
 8002d16:	061a      	lsls	r2, r3, #24
 8002d18:	d410      	bmi.n	8002d3c <__swhatbuf_r+0x40>
 8002d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d1e:	e00e      	b.n	8002d3e <__swhatbuf_r+0x42>
 8002d20:	466a      	mov	r2, sp
 8002d22:	f000 f8bb 	bl	8002e9c <_fstat_r>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	dbf1      	blt.n	8002d0e <__swhatbuf_r+0x12>
 8002d2a:	9a01      	ldr	r2, [sp, #4]
 8002d2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d34:	425a      	negs	r2, r3
 8002d36:	415a      	adcs	r2, r3
 8002d38:	602a      	str	r2, [r5, #0]
 8002d3a:	e7ee      	b.n	8002d1a <__swhatbuf_r+0x1e>
 8002d3c:	2340      	movs	r3, #64	; 0x40
 8002d3e:	2000      	movs	r0, #0
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	b016      	add	sp, #88	; 0x58
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d48 <__smakebuf_r>:
 8002d48:	898b      	ldrh	r3, [r1, #12]
 8002d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d4c:	079d      	lsls	r5, r3, #30
 8002d4e:	4606      	mov	r6, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	d507      	bpl.n	8002d64 <__smakebuf_r+0x1c>
 8002d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d58:	6023      	str	r3, [r4, #0]
 8002d5a:	6123      	str	r3, [r4, #16]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	6163      	str	r3, [r4, #20]
 8002d60:	b002      	add	sp, #8
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
 8002d64:	ab01      	add	r3, sp, #4
 8002d66:	466a      	mov	r2, sp
 8002d68:	f7ff ffc8 	bl	8002cfc <__swhatbuf_r>
 8002d6c:	9900      	ldr	r1, [sp, #0]
 8002d6e:	4605      	mov	r5, r0
 8002d70:	4630      	mov	r0, r6
 8002d72:	f7ff fa0f 	bl	8002194 <_malloc_r>
 8002d76:	b948      	cbnz	r0, 8002d8c <__smakebuf_r+0x44>
 8002d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d7c:	059a      	lsls	r2, r3, #22
 8002d7e:	d4ef      	bmi.n	8002d60 <__smakebuf_r+0x18>
 8002d80:	f023 0303 	bic.w	r3, r3, #3
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	81a3      	strh	r3, [r4, #12]
 8002d8a:	e7e3      	b.n	8002d54 <__smakebuf_r+0xc>
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <__smakebuf_r+0x7c>)
 8002d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	6020      	str	r0, [r4, #0]
 8002d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d98:	81a3      	strh	r3, [r4, #12]
 8002d9a:	9b00      	ldr	r3, [sp, #0]
 8002d9c:	6163      	str	r3, [r4, #20]
 8002d9e:	9b01      	ldr	r3, [sp, #4]
 8002da0:	6120      	str	r0, [r4, #16]
 8002da2:	b15b      	cbz	r3, 8002dbc <__smakebuf_r+0x74>
 8002da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002da8:	4630      	mov	r0, r6
 8002daa:	f000 f889 	bl	8002ec0 <_isatty_r>
 8002dae:	b128      	cbz	r0, 8002dbc <__smakebuf_r+0x74>
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	81a3      	strh	r3, [r4, #12]
 8002dbc:	89a0      	ldrh	r0, [r4, #12]
 8002dbe:	4305      	orrs	r5, r0
 8002dc0:	81a5      	strh	r5, [r4, #12]
 8002dc2:	e7cd      	b.n	8002d60 <__smakebuf_r+0x18>
 8002dc4:	08001fad 	.word	0x08001fad

08002dc8 <__malloc_lock>:
 8002dc8:	4801      	ldr	r0, [pc, #4]	; (8002dd0 <__malloc_lock+0x8>)
 8002dca:	f7ff b9c1 	b.w	8002150 <__retarget_lock_acquire_recursive>
 8002dce:	bf00      	nop
 8002dd0:	200000f4 	.word	0x200000f4

08002dd4 <__malloc_unlock>:
 8002dd4:	4801      	ldr	r0, [pc, #4]	; (8002ddc <__malloc_unlock+0x8>)
 8002dd6:	f7ff b9bc 	b.w	8002152 <__retarget_lock_release_recursive>
 8002dda:	bf00      	nop
 8002ddc:	200000f4 	.word	0x200000f4

08002de0 <_free_r>:
 8002de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002de2:	2900      	cmp	r1, #0
 8002de4:	d044      	beq.n	8002e70 <_free_r+0x90>
 8002de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dea:	9001      	str	r0, [sp, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f1a1 0404 	sub.w	r4, r1, #4
 8002df2:	bfb8      	it	lt
 8002df4:	18e4      	addlt	r4, r4, r3
 8002df6:	f7ff ffe7 	bl	8002dc8 <__malloc_lock>
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <_free_r+0x94>)
 8002dfc:	9801      	ldr	r0, [sp, #4]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	b933      	cbnz	r3, 8002e10 <_free_r+0x30>
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	6014      	str	r4, [r2, #0]
 8002e06:	b003      	add	sp, #12
 8002e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e0c:	f7ff bfe2 	b.w	8002dd4 <__malloc_unlock>
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	d908      	bls.n	8002e26 <_free_r+0x46>
 8002e14:	6825      	ldr	r5, [r4, #0]
 8002e16:	1961      	adds	r1, r4, r5
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	bf01      	itttt	eq
 8002e1c:	6819      	ldreq	r1, [r3, #0]
 8002e1e:	685b      	ldreq	r3, [r3, #4]
 8002e20:	1949      	addeq	r1, r1, r5
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	e7ed      	b.n	8002e02 <_free_r+0x22>
 8002e26:	461a      	mov	r2, r3
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b10b      	cbz	r3, 8002e30 <_free_r+0x50>
 8002e2c:	42a3      	cmp	r3, r4
 8002e2e:	d9fa      	bls.n	8002e26 <_free_r+0x46>
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	1855      	adds	r5, r2, r1
 8002e34:	42a5      	cmp	r5, r4
 8002e36:	d10b      	bne.n	8002e50 <_free_r+0x70>
 8002e38:	6824      	ldr	r4, [r4, #0]
 8002e3a:	4421      	add	r1, r4
 8002e3c:	1854      	adds	r4, r2, r1
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	d1e0      	bne.n	8002e06 <_free_r+0x26>
 8002e44:	681c      	ldr	r4, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	6053      	str	r3, [r2, #4]
 8002e4a:	4421      	add	r1, r4
 8002e4c:	6011      	str	r1, [r2, #0]
 8002e4e:	e7da      	b.n	8002e06 <_free_r+0x26>
 8002e50:	d902      	bls.n	8002e58 <_free_r+0x78>
 8002e52:	230c      	movs	r3, #12
 8002e54:	6003      	str	r3, [r0, #0]
 8002e56:	e7d6      	b.n	8002e06 <_free_r+0x26>
 8002e58:	6825      	ldr	r5, [r4, #0]
 8002e5a:	1961      	adds	r1, r4, r5
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	bf04      	itt	eq
 8002e60:	6819      	ldreq	r1, [r3, #0]
 8002e62:	685b      	ldreq	r3, [r3, #4]
 8002e64:	6063      	str	r3, [r4, #4]
 8002e66:	bf04      	itt	eq
 8002e68:	1949      	addeq	r1, r1, r5
 8002e6a:	6021      	streq	r1, [r4, #0]
 8002e6c:	6054      	str	r4, [r2, #4]
 8002e6e:	e7ca      	b.n	8002e06 <_free_r+0x26>
 8002e70:	b003      	add	sp, #12
 8002e72:	bd30      	pop	{r4, r5, pc}
 8002e74:	200000f8 	.word	0x200000f8

08002e78 <_read_r>:
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	4d07      	ldr	r5, [pc, #28]	; (8002e98 <_read_r+0x20>)
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	4608      	mov	r0, r1
 8002e80:	4611      	mov	r1, r2
 8002e82:	2200      	movs	r2, #0
 8002e84:	602a      	str	r2, [r5, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 f867 	bl	8002f5a <_read>
 8002e8c:	1c43      	adds	r3, r0, #1
 8002e8e:	d102      	bne.n	8002e96 <_read_r+0x1e>
 8002e90:	682b      	ldr	r3, [r5, #0]
 8002e92:	b103      	cbz	r3, 8002e96 <_read_r+0x1e>
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	20000100 	.word	0x20000100

08002e9c <_fstat_r>:
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4d07      	ldr	r5, [pc, #28]	; (8002ebc <_fstat_r+0x20>)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	f000 f938 	bl	800311e <_fstat>
 8002eae:	1c43      	adds	r3, r0, #1
 8002eb0:	d102      	bne.n	8002eb8 <_fstat_r+0x1c>
 8002eb2:	682b      	ldr	r3, [r5, #0]
 8002eb4:	b103      	cbz	r3, 8002eb8 <_fstat_r+0x1c>
 8002eb6:	6023      	str	r3, [r4, #0]
 8002eb8:	bd38      	pop	{r3, r4, r5, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000100 	.word	0x20000100

08002ec0 <_isatty_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4d06      	ldr	r5, [pc, #24]	; (8002edc <_isatty_r+0x1c>)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4608      	mov	r0, r1
 8002eca:	602b      	str	r3, [r5, #0]
 8002ecc:	f000 fa8e 	bl	80033ec <_isatty>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d102      	bne.n	8002eda <_isatty_r+0x1a>
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	b103      	cbz	r3, 8002eda <_isatty_r+0x1a>
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	bd38      	pop	{r3, r4, r5, pc}
 8002edc:	20000100 	.word	0x20000100

08002ee0 <findslot>:
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <findslot+0x2c>)
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	b118      	cbz	r0, 8002ef2 <findslot+0x12>
 8002eea:	6983      	ldr	r3, [r0, #24]
 8002eec:	b90b      	cbnz	r3, 8002ef2 <findslot+0x12>
 8002eee:	f7ff f891 	bl	8002014 <__sinit>
 8002ef2:	2c13      	cmp	r4, #19
 8002ef4:	d807      	bhi.n	8002f06 <findslot+0x26>
 8002ef6:	4806      	ldr	r0, [pc, #24]	; (8002f10 <findslot+0x30>)
 8002ef8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002efc:	3201      	adds	r2, #1
 8002efe:	d002      	beq.n	8002f06 <findslot+0x26>
 8002f00:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002f04:	bd10      	pop	{r4, pc}
 8002f06:	2000      	movs	r0, #0
 8002f08:	e7fc      	b.n	8002f04 <findslot+0x24>
 8002f0a:	bf00      	nop
 8002f0c:	2000000c 	.word	0x2000000c
 8002f10:	20000110 	.word	0x20000110

08002f14 <error>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	4604      	mov	r4, r0
 8002f18:	f7fe ffc4 	bl	8001ea4 <__errno>
 8002f1c:	2613      	movs	r6, #19
 8002f1e:	4605      	mov	r5, r0
 8002f20:	2700      	movs	r7, #0
 8002f22:	4630      	mov	r0, r6
 8002f24:	4639      	mov	r1, r7
 8002f26:	beab      	bkpt	0x00ab
 8002f28:	4606      	mov	r6, r0
 8002f2a:	602e      	str	r6, [r5, #0]
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f30 <checkerror>:
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d101      	bne.n	8002f38 <checkerror+0x8>
 8002f34:	f7ff bfee 	b.w	8002f14 <error>
 8002f38:	4770      	bx	lr

08002f3a <_swiread>:
 8002f3a:	b530      	push	{r4, r5, lr}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002f42:	9203      	str	r2, [sp, #12]
 8002f44:	2406      	movs	r4, #6
 8002f46:	ad01      	add	r5, sp, #4
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	beab      	bkpt	0x00ab
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7ff ffed 	bl	8002f30 <checkerror>
 8002f56:	b005      	add	sp, #20
 8002f58:	bd30      	pop	{r4, r5, pc}

08002f5a <_read>:
 8002f5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f5c:	4615      	mov	r5, r2
 8002f5e:	9101      	str	r1, [sp, #4]
 8002f60:	f7ff ffbe 	bl	8002ee0 <findslot>
 8002f64:	9901      	ldr	r1, [sp, #4]
 8002f66:	4604      	mov	r4, r0
 8002f68:	b938      	cbnz	r0, 8002f7a <_read+0x20>
 8002f6a:	f7fe ff9b 	bl	8001ea4 <__errno>
 8002f6e:	2309      	movs	r3, #9
 8002f70:	6003      	str	r3, [r0, #0]
 8002f72:	f04f 30ff 	mov.w	r0, #4294967295
 8002f76:	b003      	add	sp, #12
 8002f78:	bd30      	pop	{r4, r5, pc}
 8002f7a:	6800      	ldr	r0, [r0, #0]
 8002f7c:	462a      	mov	r2, r5
 8002f7e:	f7ff ffdc 	bl	8002f3a <_swiread>
 8002f82:	1c43      	adds	r3, r0, #1
 8002f84:	d0f7      	beq.n	8002f76 <_read+0x1c>
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	1a2a      	subs	r2, r5, r0
 8002f8a:	4413      	add	r3, r2
 8002f8c:	6063      	str	r3, [r4, #4]
 8002f8e:	4610      	mov	r0, r2
 8002f90:	e7f1      	b.n	8002f76 <_read+0x1c>

08002f92 <_swilseek>:
 8002f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f94:	460c      	mov	r4, r1
 8002f96:	4616      	mov	r6, r2
 8002f98:	f7ff ffa2 	bl	8002ee0 <findslot>
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	b940      	cbnz	r0, 8002fb2 <_swilseek+0x20>
 8002fa0:	f7fe ff80 	bl	8001ea4 <__errno>
 8002fa4:	2309      	movs	r3, #9
 8002fa6:	6003      	str	r3, [r0, #0]
 8002fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8002fac:	4620      	mov	r0, r4
 8002fae:	b003      	add	sp, #12
 8002fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb2:	2e02      	cmp	r6, #2
 8002fb4:	d903      	bls.n	8002fbe <_swilseek+0x2c>
 8002fb6:	f7fe ff75 	bl	8001ea4 <__errno>
 8002fba:	2316      	movs	r3, #22
 8002fbc:	e7f3      	b.n	8002fa6 <_swilseek+0x14>
 8002fbe:	2e01      	cmp	r6, #1
 8002fc0:	d112      	bne.n	8002fe8 <_swilseek+0x56>
 8002fc2:	6843      	ldr	r3, [r0, #4]
 8002fc4:	18e4      	adds	r4, r4, r3
 8002fc6:	d4f6      	bmi.n	8002fb6 <_swilseek+0x24>
 8002fc8:	682b      	ldr	r3, [r5, #0]
 8002fca:	260a      	movs	r6, #10
 8002fcc:	e9cd 3400 	strd	r3, r4, [sp]
 8002fd0:	466f      	mov	r7, sp
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	4639      	mov	r1, r7
 8002fd6:	beab      	bkpt	0x00ab
 8002fd8:	4606      	mov	r6, r0
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f7ff ffa8 	bl	8002f30 <checkerror>
 8002fe0:	2800      	cmp	r0, #0
 8002fe2:	dbe1      	blt.n	8002fa8 <_swilseek+0x16>
 8002fe4:	606c      	str	r4, [r5, #4]
 8002fe6:	e7e1      	b.n	8002fac <_swilseek+0x1a>
 8002fe8:	2e02      	cmp	r6, #2
 8002fea:	d1ed      	bne.n	8002fc8 <_swilseek+0x36>
 8002fec:	6803      	ldr	r3, [r0, #0]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	260c      	movs	r6, #12
 8002ff2:	466f      	mov	r7, sp
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	beab      	bkpt	0x00ab
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f7ff ff97 	bl	8002f30 <checkerror>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	d0d0      	beq.n	8002fa8 <_swilseek+0x16>
 8003006:	4404      	add	r4, r0
 8003008:	e7de      	b.n	8002fc8 <_swilseek+0x36>

0800300a <_lseek>:
 800300a:	f7ff bfc2 	b.w	8002f92 <_swilseek>

0800300e <_swiwrite>:
 800300e:	b530      	push	{r4, r5, lr}
 8003010:	b085      	sub	sp, #20
 8003012:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003016:	9203      	str	r2, [sp, #12]
 8003018:	2405      	movs	r4, #5
 800301a:	ad01      	add	r5, sp, #4
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	beab      	bkpt	0x00ab
 8003022:	4604      	mov	r4, r0
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff ff83 	bl	8002f30 <checkerror>
 800302a:	b005      	add	sp, #20
 800302c:	bd30      	pop	{r4, r5, pc}

0800302e <_write>:
 800302e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003030:	4615      	mov	r5, r2
 8003032:	9101      	str	r1, [sp, #4]
 8003034:	f7ff ff54 	bl	8002ee0 <findslot>
 8003038:	9901      	ldr	r1, [sp, #4]
 800303a:	4604      	mov	r4, r0
 800303c:	b930      	cbnz	r0, 800304c <_write+0x1e>
 800303e:	f7fe ff31 	bl	8001ea4 <__errno>
 8003042:	2309      	movs	r3, #9
 8003044:	6003      	str	r3, [r0, #0]
 8003046:	f04f 30ff 	mov.w	r0, #4294967295
 800304a:	e012      	b.n	8003072 <_write+0x44>
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	462a      	mov	r2, r5
 8003050:	f7ff ffdd 	bl	800300e <_swiwrite>
 8003054:	2800      	cmp	r0, #0
 8003056:	dbf6      	blt.n	8003046 <_write+0x18>
 8003058:	6862      	ldr	r2, [r4, #4]
 800305a:	1a2b      	subs	r3, r5, r0
 800305c:	441a      	add	r2, r3
 800305e:	42a8      	cmp	r0, r5
 8003060:	6062      	str	r2, [r4, #4]
 8003062:	d105      	bne.n	8003070 <_write+0x42>
 8003064:	2000      	movs	r0, #0
 8003066:	b003      	add	sp, #12
 8003068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800306c:	f7ff bf52 	b.w	8002f14 <error>
 8003070:	4618      	mov	r0, r3
 8003072:	b003      	add	sp, #12
 8003074:	bd30      	pop	{r4, r5, pc}

08003076 <_swiclose>:
 8003076:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003078:	2402      	movs	r4, #2
 800307a:	9001      	str	r0, [sp, #4]
 800307c:	ad01      	add	r5, sp, #4
 800307e:	4620      	mov	r0, r4
 8003080:	4629      	mov	r1, r5
 8003082:	beab      	bkpt	0x00ab
 8003084:	4604      	mov	r4, r0
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff ff52 	bl	8002f30 <checkerror>
 800308c:	b003      	add	sp, #12
 800308e:	bd30      	pop	{r4, r5, pc}

08003090 <_close>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4605      	mov	r5, r0
 8003094:	f7ff ff24 	bl	8002ee0 <findslot>
 8003098:	4604      	mov	r4, r0
 800309a:	b930      	cbnz	r0, 80030aa <_close+0x1a>
 800309c:	f7fe ff02 	bl	8001ea4 <__errno>
 80030a0:	2309      	movs	r3, #9
 80030a2:	6003      	str	r3, [r0, #0]
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	bd38      	pop	{r3, r4, r5, pc}
 80030aa:	3d01      	subs	r5, #1
 80030ac:	2d01      	cmp	r5, #1
 80030ae:	d809      	bhi.n	80030c4 <_close+0x34>
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <_close+0x48>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d104      	bne.n	80030c4 <_close+0x34>
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	6003      	str	r3, [r0, #0]
 80030c0:	2000      	movs	r0, #0
 80030c2:	e7f1      	b.n	80030a8 <_close+0x18>
 80030c4:	6820      	ldr	r0, [r4, #0]
 80030c6:	f7ff ffd6 	bl	8003076 <_swiclose>
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d1ec      	bne.n	80030a8 <_close+0x18>
 80030ce:	f04f 33ff 	mov.w	r3, #4294967295
 80030d2:	6023      	str	r3, [r4, #0]
 80030d4:	e7e8      	b.n	80030a8 <_close+0x18>
 80030d6:	bf00      	nop
 80030d8:	20000110 	.word	0x20000110

080030dc <_swistat>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	460c      	mov	r4, r1
 80030e0:	f7ff fefe 	bl	8002ee0 <findslot>
 80030e4:	4605      	mov	r5, r0
 80030e6:	b930      	cbnz	r0, 80030f6 <_swistat+0x1a>
 80030e8:	f7fe fedc 	bl	8001ea4 <__errno>
 80030ec:	2309      	movs	r3, #9
 80030ee:	6003      	str	r3, [r0, #0]
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030fc:	6063      	str	r3, [r4, #4]
 80030fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003102:	64a3      	str	r3, [r4, #72]	; 0x48
 8003104:	260c      	movs	r6, #12
 8003106:	4630      	mov	r0, r6
 8003108:	4629      	mov	r1, r5
 800310a:	beab      	bkpt	0x00ab
 800310c:	4605      	mov	r5, r0
 800310e:	4628      	mov	r0, r5
 8003110:	f7ff ff0e 	bl	8002f30 <checkerror>
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	bf1c      	itt	ne
 8003118:	6120      	strne	r0, [r4, #16]
 800311a:	2000      	movne	r0, #0
 800311c:	e7ea      	b.n	80030f4 <_swistat+0x18>

0800311e <_fstat>:
 800311e:	460b      	mov	r3, r1
 8003120:	b510      	push	{r4, lr}
 8003122:	2100      	movs	r1, #0
 8003124:	4604      	mov	r4, r0
 8003126:	2258      	movs	r2, #88	; 0x58
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fee5 	bl	8001ef8 <memset>
 800312e:	4601      	mov	r1, r0
 8003130:	4620      	mov	r0, r4
 8003132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003136:	f7ff bfd1 	b.w	80030dc <_swistat>

0800313a <_stat>:
 800313a:	b538      	push	{r3, r4, r5, lr}
 800313c:	460d      	mov	r5, r1
 800313e:	4604      	mov	r4, r0
 8003140:	2258      	movs	r2, #88	; 0x58
 8003142:	2100      	movs	r1, #0
 8003144:	4628      	mov	r0, r5
 8003146:	f7fe fed7 	bl	8001ef8 <memset>
 800314a:	4620      	mov	r0, r4
 800314c:	2100      	movs	r1, #0
 800314e:	f000 f811 	bl	8003174 <_swiopen>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	4604      	mov	r4, r0
 8003156:	d00b      	beq.n	8003170 <_stat+0x36>
 8003158:	686b      	ldr	r3, [r5, #4]
 800315a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800315e:	606b      	str	r3, [r5, #4]
 8003160:	4629      	mov	r1, r5
 8003162:	f7ff ffbb 	bl	80030dc <_swistat>
 8003166:	4605      	mov	r5, r0
 8003168:	4620      	mov	r0, r4
 800316a:	f7ff ff91 	bl	8003090 <_close>
 800316e:	462c      	mov	r4, r5
 8003170:	4620      	mov	r0, r4
 8003172:	bd38      	pop	{r3, r4, r5, pc}

08003174 <_swiopen>:
 8003174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003178:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003224 <_swiopen+0xb0>
 800317c:	b097      	sub	sp, #92	; 0x5c
 800317e:	4607      	mov	r7, r0
 8003180:	460e      	mov	r6, r1
 8003182:	2500      	movs	r5, #0
 8003184:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003188:	1c61      	adds	r1, r4, #1
 800318a:	d037      	beq.n	80031fc <_swiopen+0x88>
 800318c:	3501      	adds	r5, #1
 800318e:	2d14      	cmp	r5, #20
 8003190:	d1f8      	bne.n	8003184 <_swiopen+0x10>
 8003192:	f7fe fe87 	bl	8001ea4 <__errno>
 8003196:	2318      	movs	r3, #24
 8003198:	6003      	str	r3, [r0, #0]
 800319a:	f04f 34ff 	mov.w	r4, #4294967295
 800319e:	e03d      	b.n	800321c <_swiopen+0xa8>
 80031a0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80031a4:	f240 6301 	movw	r3, #1537	; 0x601
 80031a8:	07b2      	lsls	r2, r6, #30
 80031aa:	bf48      	it	mi
 80031ac:	f044 0402 	orrmi.w	r4, r4, #2
 80031b0:	421e      	tst	r6, r3
 80031b2:	bf18      	it	ne
 80031b4:	f044 0404 	orrne.w	r4, r4, #4
 80031b8:	0733      	lsls	r3, r6, #28
 80031ba:	bf48      	it	mi
 80031bc:	f024 0404 	bicmi.w	r4, r4, #4
 80031c0:	4638      	mov	r0, r7
 80031c2:	bf48      	it	mi
 80031c4:	f044 0408 	orrmi.w	r4, r4, #8
 80031c8:	9700      	str	r7, [sp, #0]
 80031ca:	f7fd f859 	bl	8000280 <strlen>
 80031ce:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80031d2:	2401      	movs	r4, #1
 80031d4:	4620      	mov	r0, r4
 80031d6:	4649      	mov	r1, r9
 80031d8:	beab      	bkpt	0x00ab
 80031da:	4604      	mov	r4, r0
 80031dc:	2c00      	cmp	r4, #0
 80031de:	db08      	blt.n	80031f2 <_swiopen+0x7e>
 80031e0:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80031e4:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80031ee:	462c      	mov	r4, r5
 80031f0:	e014      	b.n	800321c <_swiopen+0xa8>
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff fe8e 	bl	8002f14 <error>
 80031f8:	4604      	mov	r4, r0
 80031fa:	e00f      	b.n	800321c <_swiopen+0xa8>
 80031fc:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003200:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003204:	46e9      	mov	r9, sp
 8003206:	d1cb      	bne.n	80031a0 <_swiopen+0x2c>
 8003208:	4649      	mov	r1, r9
 800320a:	4638      	mov	r0, r7
 800320c:	f7ff ff95 	bl	800313a <_stat>
 8003210:	3001      	adds	r0, #1
 8003212:	d0c5      	beq.n	80031a0 <_swiopen+0x2c>
 8003214:	f7fe fe46 	bl	8001ea4 <__errno>
 8003218:	2311      	movs	r3, #17
 800321a:	6003      	str	r3, [r0, #0]
 800321c:	4620      	mov	r0, r4
 800321e:	b017      	add	sp, #92	; 0x5c
 8003220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003224:	20000110 	.word	0x20000110

08003228 <_get_semihosting_exts>:
 8003228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800322c:	4606      	mov	r6, r0
 800322e:	460f      	mov	r7, r1
 8003230:	482a      	ldr	r0, [pc, #168]	; (80032dc <_get_semihosting_exts+0xb4>)
 8003232:	2100      	movs	r1, #0
 8003234:	4615      	mov	r5, r2
 8003236:	f7ff ff9d 	bl	8003174 <_swiopen>
 800323a:	462a      	mov	r2, r5
 800323c:	4604      	mov	r4, r0
 800323e:	2100      	movs	r1, #0
 8003240:	4630      	mov	r0, r6
 8003242:	f7fe fe59 	bl	8001ef8 <memset>
 8003246:	1c63      	adds	r3, r4, #1
 8003248:	d016      	beq.n	8003278 <_get_semihosting_exts+0x50>
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff fe48 	bl	8002ee0 <findslot>
 8003250:	f04f 090c 	mov.w	r9, #12
 8003254:	4680      	mov	r8, r0
 8003256:	4648      	mov	r0, r9
 8003258:	4641      	mov	r1, r8
 800325a:	beab      	bkpt	0x00ab
 800325c:	4680      	mov	r8, r0
 800325e:	4640      	mov	r0, r8
 8003260:	f7ff fe66 	bl	8002f30 <checkerror>
 8003264:	2803      	cmp	r0, #3
 8003266:	dd02      	ble.n	800326e <_get_semihosting_exts+0x46>
 8003268:	1ec3      	subs	r3, r0, #3
 800326a:	42ab      	cmp	r3, r5
 800326c:	dc08      	bgt.n	8003280 <_get_semihosting_exts+0x58>
 800326e:	4620      	mov	r0, r4
 8003270:	f7ff ff0e 	bl	8003090 <_close>
 8003274:	f04f 34ff 	mov.w	r4, #4294967295
 8003278:	4620      	mov	r0, r4
 800327a:	b003      	add	sp, #12
 800327c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003280:	2204      	movs	r2, #4
 8003282:	eb0d 0102 	add.w	r1, sp, r2
 8003286:	4620      	mov	r0, r4
 8003288:	f7ff fe67 	bl	8002f5a <_read>
 800328c:	2803      	cmp	r0, #3
 800328e:	ddee      	ble.n	800326e <_get_semihosting_exts+0x46>
 8003290:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003294:	2b53      	cmp	r3, #83	; 0x53
 8003296:	d1ea      	bne.n	800326e <_get_semihosting_exts+0x46>
 8003298:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800329c:	2b48      	cmp	r3, #72	; 0x48
 800329e:	d1e6      	bne.n	800326e <_get_semihosting_exts+0x46>
 80032a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80032a4:	2b46      	cmp	r3, #70	; 0x46
 80032a6:	d1e2      	bne.n	800326e <_get_semihosting_exts+0x46>
 80032a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032ac:	2b42      	cmp	r3, #66	; 0x42
 80032ae:	d1de      	bne.n	800326e <_get_semihosting_exts+0x46>
 80032b0:	2201      	movs	r2, #1
 80032b2:	4639      	mov	r1, r7
 80032b4:	4620      	mov	r0, r4
 80032b6:	f7ff fe6c 	bl	8002f92 <_swilseek>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	dbd7      	blt.n	800326e <_get_semihosting_exts+0x46>
 80032be:	462a      	mov	r2, r5
 80032c0:	4631      	mov	r1, r6
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff fe49 	bl	8002f5a <_read>
 80032c8:	4605      	mov	r5, r0
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7ff fee0 	bl	8003090 <_close>
 80032d0:	4628      	mov	r0, r5
 80032d2:	f7ff fe2d 	bl	8002f30 <checkerror>
 80032d6:	4604      	mov	r4, r0
 80032d8:	e7ce      	b.n	8003278 <_get_semihosting_exts+0x50>
 80032da:	bf00      	nop
 80032dc:	080034f7 	.word	0x080034f7

080032e0 <initialise_semihosting_exts>:
 80032e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80032e2:	4d0a      	ldr	r5, [pc, #40]	; (800330c <initialise_semihosting_exts+0x2c>)
 80032e4:	4c0a      	ldr	r4, [pc, #40]	; (8003310 <initialise_semihosting_exts+0x30>)
 80032e6:	2100      	movs	r1, #0
 80032e8:	2201      	movs	r2, #1
 80032ea:	a801      	add	r0, sp, #4
 80032ec:	6029      	str	r1, [r5, #0]
 80032ee:	6022      	str	r2, [r4, #0]
 80032f0:	f7ff ff9a 	bl	8003228 <_get_semihosting_exts>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	dd07      	ble.n	8003308 <initialise_semihosting_exts+0x28>
 80032f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032fc:	f003 0201 	and.w	r2, r3, #1
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	602a      	str	r2, [r5, #0]
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	b003      	add	sp, #12
 800330a:	bd30      	pop	{r4, r5, pc}
 800330c:	20000070 	.word	0x20000070
 8003310:	20000074 	.word	0x20000074

08003314 <_has_ext_stdout_stderr>:
 8003314:	b510      	push	{r4, lr}
 8003316:	4c04      	ldr	r4, [pc, #16]	; (8003328 <_has_ext_stdout_stderr+0x14>)
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da01      	bge.n	8003322 <_has_ext_stdout_stderr+0xe>
 800331e:	f7ff ffdf 	bl	80032e0 <initialise_semihosting_exts>
 8003322:	6820      	ldr	r0, [r4, #0]
 8003324:	bd10      	pop	{r4, pc}
 8003326:	bf00      	nop
 8003328:	20000074 	.word	0x20000074

0800332c <initialise_monitor_handles>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	b085      	sub	sp, #20
 8003332:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80033e4 <initialise_monitor_handles+0xb8>
 8003336:	f8cd 9004 	str.w	r9, [sp, #4]
 800333a:	2303      	movs	r3, #3
 800333c:	2400      	movs	r4, #0
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	af01      	add	r7, sp, #4
 8003342:	9402      	str	r4, [sp, #8]
 8003344:	2501      	movs	r5, #1
 8003346:	4628      	mov	r0, r5
 8003348:	4639      	mov	r1, r7
 800334a:	beab      	bkpt	0x00ab
 800334c:	4605      	mov	r5, r0
 800334e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80033e8 <initialise_monitor_handles+0xbc>
 8003352:	4623      	mov	r3, r4
 8003354:	4c20      	ldr	r4, [pc, #128]	; (80033d8 <initialise_monitor_handles+0xac>)
 8003356:	f8c8 5000 	str.w	r5, [r8]
 800335a:	f04f 32ff 	mov.w	r2, #4294967295
 800335e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003362:	3301      	adds	r3, #1
 8003364:	2b14      	cmp	r3, #20
 8003366:	d1fa      	bne.n	800335e <initialise_monitor_handles+0x32>
 8003368:	f7ff ffd4 	bl	8003314 <_has_ext_stdout_stderr>
 800336c:	4d1b      	ldr	r5, [pc, #108]	; (80033dc <initialise_monitor_handles+0xb0>)
 800336e:	b1d0      	cbz	r0, 80033a6 <initialise_monitor_handles+0x7a>
 8003370:	f04f 0a03 	mov.w	sl, #3
 8003374:	2304      	movs	r3, #4
 8003376:	f8cd 9004 	str.w	r9, [sp, #4]
 800337a:	2601      	movs	r6, #1
 800337c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003380:	9302      	str	r3, [sp, #8]
 8003382:	4630      	mov	r0, r6
 8003384:	4639      	mov	r1, r7
 8003386:	beab      	bkpt	0x00ab
 8003388:	4683      	mov	fp, r0
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <initialise_monitor_handles+0xb4>)
 800338c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003390:	f8c3 b000 	str.w	fp, [r3]
 8003394:	2308      	movs	r3, #8
 8003396:	f8cd a00c 	str.w	sl, [sp, #12]
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	4630      	mov	r0, r6
 800339e:	4639      	mov	r1, r7
 80033a0:	beab      	bkpt	0x00ab
 80033a2:	4606      	mov	r6, r0
 80033a4:	602e      	str	r6, [r5, #0]
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	bf02      	ittt	eq
 80033ac:	4b0c      	ldreq	r3, [pc, #48]	; (80033e0 <initialise_monitor_handles+0xb4>)
 80033ae:	681b      	ldreq	r3, [r3, #0]
 80033b0:	602b      	streq	r3, [r5, #0]
 80033b2:	2600      	movs	r6, #0
 80033b4:	f8d8 3000 	ldr.w	r3, [r8]
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	6066      	str	r6, [r4, #4]
 80033bc:	f7ff ffaa 	bl	8003314 <_has_ext_stdout_stderr>
 80033c0:	b130      	cbz	r0, 80033d0 <initialise_monitor_handles+0xa4>
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <initialise_monitor_handles+0xb4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80033d0:	b005      	add	sp, #20
 80033d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d6:	bf00      	nop
 80033d8:	20000110 	.word	0x20000110
 80033dc:	20000104 	.word	0x20000104
 80033e0:	2000010c 	.word	0x2000010c
 80033e4:	0800350d 	.word	0x0800350d
 80033e8:	20000108 	.word	0x20000108

080033ec <_isatty>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	f7ff fd77 	bl	8002ee0 <findslot>
 80033f2:	2509      	movs	r5, #9
 80033f4:	4604      	mov	r4, r0
 80033f6:	b920      	cbnz	r0, 8003402 <_isatty+0x16>
 80033f8:	f7fe fd54 	bl	8001ea4 <__errno>
 80033fc:	6005      	str	r5, [r0, #0]
 80033fe:	4620      	mov	r0, r4
 8003400:	bd70      	pop	{r4, r5, r6, pc}
 8003402:	4628      	mov	r0, r5
 8003404:	4621      	mov	r1, r4
 8003406:	beab      	bkpt	0x00ab
 8003408:	4604      	mov	r4, r0
 800340a:	2c01      	cmp	r4, #1
 800340c:	d0f7      	beq.n	80033fe <_isatty+0x12>
 800340e:	f7fe fd49 	bl	8001ea4 <__errno>
 8003412:	2400      	movs	r4, #0
 8003414:	4605      	mov	r5, r0
 8003416:	2613      	movs	r6, #19
 8003418:	4630      	mov	r0, r6
 800341a:	4621      	mov	r1, r4
 800341c:	beab      	bkpt	0x00ab
 800341e:	4606      	mov	r6, r0
 8003420:	602e      	str	r6, [r5, #0]
 8003422:	e7ec      	b.n	80033fe <_isatty+0x12>

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
