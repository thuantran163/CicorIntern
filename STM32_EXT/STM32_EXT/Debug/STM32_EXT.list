
STM32_EXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007244  08007244  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800724c  0800724c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  080072c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080072c4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f325  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d1  00000000  00000000  0002f3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00031698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00032410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017690  00000000  00000000  000330a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123d3  00000000  00000000  0004a730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f749  00000000  00000000  0005cb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec24c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f30  00000000  00000000  000ec29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006fc4 	.word	0x08006fc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006fc4 	.word	0x08006fc4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b46      	ldr	r3, [pc, #280]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a45      	ldr	r2, [pc, #276]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b43      	ldr	r3, [pc, #268]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b3f      	ldr	r3, [pc, #252]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a3e      	ldr	r2, [pc, #248]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b3c      	ldr	r3, [pc, #240]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b38      	ldr	r3, [pc, #224]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a37      	ldr	r2, [pc, #220]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_GPIO_Init+0x134>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000610:	482a      	ldr	r0, [pc, #168]	; (80006bc <MX_GPIO_Init+0x138>)
 8000612:	f001 fa8b 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4825      	ldr	r0, [pc, #148]	; (80006c0 <MX_GPIO_Init+0x13c>)
 800062a:	f000 ffe5 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000632:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4820      	ldr	r0, [pc, #128]	; (80006c4 <MX_GPIO_Init+0x140>)
 8000644:	f000 ffd8 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000648:	230a      	movs	r3, #10
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800064c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000652:	2301      	movs	r3, #1
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4819      	ldr	r0, [pc, #100]	; (80006c4 <MX_GPIO_Init+0x140>)
 800065e:	f000 ffcb 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000662:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <MX_GPIO_Init+0x138>)
 800067c:	f000 ffbc 	bl	80015f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fed5 	bl	8001434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800068a:	2006      	movs	r0, #6
 800068c:	f000 fefe 	bl	800148c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f000 fecd 	bl	8001434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800069a:	2007      	movs	r0, #7
 800069c:	f000 fef6 	bl	800148c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2009      	movs	r0, #9
 80006a6:	f000 fec5 	bl	8001434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006aa:	2009      	movs	r0, #9
 80006ac:	f000 feee 	bl	800148c <HAL_NVIC_EnableIRQ>

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400

080006c8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006d0:	1d39      	adds	r1, r7, #4
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	2201      	movs	r2, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <__io_putchar+0x20>)
 80006da:	f004 fca7 	bl	800502c <HAL_UART_Transmit>
  return ch;
 80006de:	687b      	ldr	r3, [r7, #4]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000174 	.word	0x20000174

080006ec <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d105      	bne.n	8000708 <HAL_GPIO_EXTI_Callback+0x1c>
	{
//		printf("\nnoise: %d", i);
		HAL_GPIO_TogglePin(LED_PORT, LED_GREEN);
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <HAL_GPIO_EXTI_Callback+0x48>)
 8000702:	f001 fa45 	bl	8001b90 <HAL_GPIO_TogglePin>
//		printf("\nnoise: %d", i);
		HAL_GPIO_TogglePin(LED_PORT, LED_RED);
//		HAL_Delay(1);
	}

}
 8000706:	e010      	b.n	800072a <HAL_GPIO_EXTI_Callback+0x3e>
	else if ( GPIO_Pin == GPIO_PIN_1)
 8000708:	88fb      	ldrh	r3, [r7, #6]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d105      	bne.n	800071a <HAL_GPIO_EXTI_Callback+0x2e>
		HAL_GPIO_TogglePin(LED_PORT, LED_ORANGE);
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	4808      	ldr	r0, [pc, #32]	; (8000734 <HAL_GPIO_EXTI_Callback+0x48>)
 8000714:	f001 fa3c 	bl	8001b90 <HAL_GPIO_TogglePin>
}
 8000718:	e007      	b.n	800072a <HAL_GPIO_EXTI_Callback+0x3e>
	else if(GPIO_Pin == GPIO_PIN_3)
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	2b08      	cmp	r3, #8
 800071e:	d104      	bne.n	800072a <HAL_GPIO_EXTI_Callback+0x3e>
		HAL_GPIO_TogglePin(LED_PORT, LED_RED);
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <HAL_GPIO_EXTI_Callback+0x48>)
 8000726:	f001 fa33 	bl	8001b90 <HAL_GPIO_TogglePin>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020c00 	.word	0x40020c00

08000738 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d10b      	bne.n	8000760 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		 printf("\n Timer2: %d", TIM2->CNT);
 8000748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4619      	mov	r1, r3
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000752:	f005 fca9 	bl	80060a8 <iprintf>
		HAL_GPIO_TogglePin(LED_PORT, LED_BLUE);
 8000756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800075c:	f001 fa18 	bl	8001b90 <HAL_GPIO_TogglePin>
	}
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000009c 	.word	0x2000009c
 800076c:	08006fdc 	.word	0x08006fdc
 8000770:	40020c00 	.word	0x40020c00

08000774 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
//	if (htim == &htim3)
//	{
//	if(htim->Instance ==TIM3)
//	{
		printf("\n Timer3: %d", TIM3->CNT);
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <HAL_TIM_IC_CaptureCallback+0x88>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	481f      	ldr	r0, [pc, #124]	; (8000800 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000784:	f005 fc90 	bl	80060a8 <iprintf>
		HAL_GPIO_TogglePin(LED_PORT, LED_ORANGE);
 8000788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800078c:	481d      	ldr	r0, [pc, #116]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x90>)
 800078e:	f001 f9ff 	bl	8001b90 <HAL_GPIO_TogglePin>
		if( is_first_captured ==0 )
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10a      	bne.n	80007b0 <HAL_TIM_IC_CaptureCallback+0x3c>

		{
			IC_value_fstCaptured  = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800079a:	2100      	movs	r1, #0
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f003 fd11 	bl	80041c4 <HAL_TIM_ReadCapturedValue>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a19      	ldr	r2, [pc, #100]	; (800080c <HAL_TIM_IC_CaptureCallback+0x98>)
 80007a6:	6013      	str	r3, [r2, #0]
			is_first_captured = 1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x94>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
			}
			is_first_captured = 0;
		}
//	}
//	}
}
 80007ae:	e021      	b.n	80007f4 <HAL_TIM_IC_CaptureCallback+0x80>
		else if(is_first_captured ==1)
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x94>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d11d      	bne.n	80007f4 <HAL_TIM_IC_CaptureCallback+0x80>
			IC_value_sndCaptured = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80007b8:	2100      	movs	r1, #0
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f003 fd02 	bl	80041c4 <HAL_TIM_ReadCapturedValue>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a13      	ldr	r2, [pc, #76]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80007c4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_value_sndCaptured>IC_value_fstCaptured)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_TIM_IC_CaptureCallback+0x98>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d909      	bls.n	80007ee <HAL_TIM_IC_CaptureCallback+0x7a>
				uint32_t interval_time = IC_value_fstCaptured - IC_value_sndCaptured;
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_TIM_IC_CaptureCallback+0x98>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	60fb      	str	r3, [r7, #12]
				printf("\n interval time between two event: %d", interval_time);
 80007e6:	68f9      	ldr	r1, [r7, #12]
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80007ea:	f005 fc5d 	bl	80060a8 <iprintf>
			is_first_captured = 0;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40000400 	.word	0x40000400
 8000800:	08006fec 	.word	0x08006fec
 8000804:	40020c00 	.word	0x40020c00
 8000808:	2000008c 	.word	0x2000008c
 800080c:	20000090 	.word	0x20000090
 8000810:	20000094 	.word	0x20000094
 8000814:	08006ffc 	.word	0x08006ffc

08000818 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d118      	bne.n	800085c <HAL_TIM_OC_DelayElapsedCallback+0x44>
	{
		  printf("\n Timer4: %d", TIM4->CNT);
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_TIM_OC_DelayElapsedCallback+0x4c>)
 800082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082e:	4619      	mov	r1, r3
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <HAL_TIM_OC_DelayElapsedCallback+0x50>)
 8000832:	f005 fc39 	bl	80060a8 <iprintf>
		uint32_t capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000836:	2100      	movs	r1, #0
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f003 fcc3 	bl	80041c4 <HAL_TIM_ReadCapturedValue>
 800083e:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_TogglePin(LED_PORT, LED_RED);
 8000840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <HAL_TIM_OC_DelayElapsedCallback+0x54>)
 8000846:	f001 f9a3 	bl	8001b90 <HAL_GPIO_TogglePin>
		__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, (capture+100));
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	3264      	adds	r2, #100	; 0x64
 8000852:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COUNTER(htim, 0);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 800085c:	bf00      	nop
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40000800 	.word	0x40000800
 8000868:	08007024 	.word	0x08007024
 800086c:	40020c00 	.word	0x40020c00

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 fc7c 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f81c 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f7ff fe82 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000880:	f000 fbd2 	bl	8001028 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000884:	f000 f9d4 	bl	8000c30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000888:	f000 fa20 	bl	8000ccc <MX_TIM3_Init>
  MX_TIM4_Init();
 800088c:	f000 fa90 	bl	8000db0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <main+0x38>)
 8000892:	f002 f873 	bl	800297c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000896:	2100      	movs	r1, #0
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <main+0x3c>)
 800089a:	f002 fc23 	bl	80030e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800089e:	2100      	movs	r1, #0
 80008a0:	4803      	ldr	r0, [pc, #12]	; (80008b0 <main+0x40>)
 80008a2:	f002 f9cd 	bl	8002c40 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0x36>
 80008a8:	2000009c 	.word	0x2000009c
 80008ac:	200000e4 	.word	0x200000e4
 80008b0:	2000012c 	.word	0x2000012c

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	; 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 fbe8 	bl	8006098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <SystemClock_Config+0xc8>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a26      	ldr	r2, [pc, #152]	; (800097c <SystemClock_Config+0xc8>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <SystemClock_Config+0xc8>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b21      	ldr	r3, [pc, #132]	; (8000980 <SystemClock_Config+0xcc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a20      	ldr	r2, [pc, #128]	; (8000980 <SystemClock_Config+0xcc>)
 80008fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <SystemClock_Config+0xcc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000924:	2308      	movs	r3, #8
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000928:	23c8      	movs	r3, #200	; 0xc8
 800092a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	4618      	mov	r0, r3
 800093a:	f001 f969 	bl	8001c10 <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000944:	f000 f81e 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094c:	2302      	movs	r3, #2
 800094e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000950:	2390      	movs	r3, #144	; 0x90
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fc7b 	bl	8002260 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000970:	f000 f808 	bl	8000984 <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3750      	adds	r7, #80	; 0x50
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>

0800098e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <HAL_MspInit+0x4c>)
 80009b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 fbe8 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f001 f8c7 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f001 f8c0 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a68:	2008      	movs	r0, #8
 8000a6a:	f001 f8b9 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM2_IRQHandler+0x10>)
 8000a7a:	f002 fcd1 	bl	8003420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000009c 	.word	0x2000009c

08000a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM3_IRQHandler+0x10>)
 8000a8e:	f002 fcc7 	bl	8003420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000e4 	.word	0x200000e4

08000a9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM4_IRQHandler+0x10>)
 8000aa2:	f002 fcbd 	bl	8003420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000012c 	.word	0x2000012c

08000ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <USART2_IRQHandler+0x10>)
 8000ab6:	f004 fb4b 	bl	8005150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000174 	.word	0x20000174

08000ac4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad6:	f3af 8000 	nop.w
 8000ada:	4601      	mov	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
	}

return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fdd5 	bl	80006c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
	}
	return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_isatty>:

int _isatty(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f005 fa38 	bl	8006044 <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20020000 	.word	0x20020000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	20000098 	.word	0x20000098
 8000c08:	200001d0 	.word	0x200001d0

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c56:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c76:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c78:	f001 fdba 	bl	80027f0 <HAL_TIM_Base_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c82:	f7ff fe7f 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4619      	mov	r1, r3
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c94:	f002 ff86 	bl	8003ba4 <HAL_TIM_ConfigClockSource>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c9e:	f7ff fe71 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000cb0:	f004 f834 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cba:	f7ff fe63 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000009c 	.word	0x2000009c

08000ccc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000cf8:	4a2c      	ldr	r2, [pc, #176]	; (8000dac <MX_TIM3_Init+0xe0>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50000;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000cfe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 8000d0a:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d0c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d1e:	4822      	ldr	r0, [pc, #136]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d20:	f001 fd66 	bl	80027f0 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000d2a:	f7ff fe2b 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0318 	add.w	r3, r7, #24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481b      	ldr	r0, [pc, #108]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d3c:	f002 ff32 	bl	8003ba4 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d46:	f7ff fe1d 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000d4a:	4817      	ldr	r0, [pc, #92]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d4c:	f002 f8fa 	bl	8002f44 <HAL_TIM_IC_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000d56:	f7ff fe15 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d6a:	f003 ffd7 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000d74:	f7ff fe06 	bl	8000984 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_TIM3_Init+0xdc>)
 8000d90:	f002 fd84 	bl	800389c <HAL_TIM_IC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000d9a:	f7ff fdf3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000e4 	.word	0x200000e4
 8000dac:	40000400 	.word	0x40000400

08000db0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	f107 0320 	add.w	r3, r7, #32
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000de2:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <MX_TIM4_Init+0xec>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000;
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000de8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000df6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e08:	4823      	ldr	r0, [pc, #140]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e0a:	f001 fcf1 	bl	80027f0 <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e14:	f7ff fdb6 	bl	8000984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	4619      	mov	r1, r3
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e26:	f002 febd 	bl	8003ba4 <HAL_TIM_ConfigClockSource>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e30:	f7ff fda8 	bl	8000984 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000e34:	4818      	ldr	r0, [pc, #96]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e36:	f001 fe33 	bl	8002aa0 <HAL_TIM_OC_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e40:	f7ff fda0 	bl	8000984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4c:	f107 0320 	add.w	r3, r7, #32
 8000e50:	4619      	mov	r1, r3
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e54:	f003 ff62 	bl	8004d1c <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e5e:	f7ff fd91 	bl	8000984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e62:	2330      	movs	r3, #48	; 0x30
 8000e64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24;
 8000e66:	2318      	movs	r3, #24
 8000e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e7a:	f002 fbd9 	bl	8003630 <HAL_TIM_OC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000e84:	f7ff fd7e 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e8a:	f000 f893 	bl	8000fb4 <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000012c 	.word	0x2000012c
 8000e9c:	40000800 	.word	0x40000800

08000ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d116      	bne.n	8000ef0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
 8000edc:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	201c      	movs	r0, #28
 8000ee4:	f000 faa6 	bl	8001434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee8:	201c      	movs	r0, #28
 8000eea:	f000 facf 	bl	800148c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000eee:	e054      	b.n	8000f9a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <HAL_TIM_Base_MspInit+0x108>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d134      	bne.n	8000f64 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a28      	ldr	r2, [pc, #160]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f32:	2340      	movs	r3, #64	; 0x40
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <HAL_TIM_Base_MspInit+0x10c>)
 8000f4e:	f000 fb53 	bl	80015f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	201d      	movs	r0, #29
 8000f58:	f000 fa6c 	bl	8001434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f5c:	201d      	movs	r0, #29
 8000f5e:	f000 fa95 	bl	800148c <HAL_NVIC_EnableIRQ>
}
 8000f62:	e01a      	b.n	8000f9a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <HAL_TIM_Base_MspInit+0x110>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d115      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_TIM_Base_MspInit+0x104>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201e      	movs	r0, #30
 8000f90:	f000 fa50 	bl	8001434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f94:	201e      	movs	r0, #30
 8000f96:	f000 fa79 	bl	800148c <HAL_NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40000400 	.word	0x40000400
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40000800 	.word	0x40000800

08000fb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_TIM_MspPostInit+0x68>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11d      	bne.n	8001012 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_TIM_MspPostInit+0x6c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_TIM_MspPostInit+0x6c>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <HAL_TIM_MspPostInit+0x6c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001002:	2302      	movs	r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_TIM_MspPostInit+0x70>)
 800100e:	f000 faf3 	bl	80015f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40000800 	.word	0x40000800
 8001020:	40023800 	.word	0x40023800
 8001024:	40020400 	.word	0x40020400

08001028 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <MX_USART2_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_USART2_UART_Init+0x4c>)
 8001060:	f003 ff2e 	bl	8004ec0 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f7ff fc8b 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000174 	.word	0x20000174
 8001078:	40004400 	.word	0x40004400

0800107c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_UART_MspInit+0x94>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d133      	bne.n	8001106 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d6:	230c      	movs	r3, #12
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e6:	2307      	movs	r3, #7
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <HAL_UART_MspInit+0x9c>)
 80010f2:	f000 fa81 	bl	80015f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2026      	movs	r0, #38	; 0x26
 80010fc:	f000 f99a 	bl	8001434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001100:	2026      	movs	r0, #38	; 0x26
 8001102:	f000 f9c3 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40004400 	.word	0x40004400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001122:	490e      	ldr	r1, [pc, #56]	; (800115c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001124:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001138:	4c0b      	ldr	r4, [pc, #44]	; (8001168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001146:	f7ff fd61 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 ff81 	bl	8006050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fb8f 	bl	8000870 <main>
  bx  lr    
 8001152:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800115c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001160:	08007254 	.word	0x08007254
  ldr r2, =_sbss
 8001164:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001168:	200001cc 	.word	0x200001cc

0800116c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0d      	ldr	r2, [pc, #52]	; (80011b0 <HAL_Init+0x40>)
 800117a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0a      	ldr	r2, [pc, #40]	; (80011b0 <HAL_Init+0x40>)
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x40>)
 8001192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f92b 	bl	80013f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f7ff fbfe 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023c00 	.word	0x40023c00

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f972 	bl	80014bc <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f920 	bl	8001434 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	20000008 	.word	0x20000008
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	200001b8 	.word	0x200001b8

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200001b8 	.word	0x200001b8

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800127c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	60d3      	str	r3, [r2, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	; (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
         );
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c0:	d301      	bcc.n	80013c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00f      	b.n	80013e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <SysTick_Config+0x40>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ce:	210f      	movs	r1, #15
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f7ff ff8e 	bl	80012f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <SysTick_Config+0x40>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SysTick_Config+0x40>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	d00f      	beq.n	8001422 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b06      	cmp	r3, #6
 8001406:	d00c      	beq.n	8001422 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d009      	beq.n	8001422 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b04      	cmp	r3, #4
 8001412:	d006      	beq.n	8001422 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d003      	beq.n	8001422 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800141a:	2190      	movs	r1, #144	; 0x90
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800141e:	f7ff fab6 	bl	800098e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff16 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08007034 	.word	0x08007034

08001434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d903      	bls.n	8001454 <HAL_NVIC_SetPriority+0x20>
 800144c:	21a8      	movs	r1, #168	; 0xa8
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <HAL_NVIC_SetPriority+0x54>)
 8001450:	f7ff fa9d 	bl	800098e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d903      	bls.n	8001462 <HAL_NVIC_SetPriority+0x2e>
 800145a:	21a9      	movs	r1, #169	; 0xa9
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <HAL_NVIC_SetPriority+0x54>)
 800145e:	f7ff fa96 	bl	800098e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001462:	f7ff ff1b 	bl	800129c <__NVIC_GetPriorityGrouping>
 8001466:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	6978      	ldr	r0, [r7, #20]
 800146e:	f7ff ff6b 	bl	8001348 <NVIC_EncodePriority>
 8001472:	4602      	mov	r2, r0
 8001474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff3a 	bl	80012f4 <__NVIC_SetPriority>
}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	08007034 	.word	0x08007034

0800148c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da03      	bge.n	80014a6 <HAL_NVIC_EnableIRQ+0x1a>
 800149e:	21bc      	movs	r1, #188	; 0xbc
 80014a0:	4805      	ldr	r0, [pc, #20]	; (80014b8 <HAL_NVIC_EnableIRQ+0x2c>)
 80014a2:	f7ff fa74 	bl	800098e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff04 	bl	80012b8 <__NVIC_EnableIRQ>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	08007034 	.word	0x08007034

080014bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff73 	bl	80013b0 <SysTick_Config>
 80014ca:	4603      	mov	r3, r0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014e2:	f7ff feab 	bl	800123c <HAL_GetTick>
 80014e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d008      	beq.n	8001506 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e052      	b.n	80015ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0216 	bic.w	r2, r2, #22
 8001514:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001524:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <HAL_DMA_Abort+0x62>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0208 	bic.w	r2, r2, #8
 8001544:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001556:	e013      	b.n	8001580 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001558:	f7ff fe70 	bl	800123c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b05      	cmp	r3, #5
 8001564:	d90c      	bls.n	8001580 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2220      	movs	r2, #32
 800156a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e015      	b.n	80015ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e4      	bne.n	8001558 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	223f      	movs	r2, #63	; 0x3f
 8001594:	409a      	lsls	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d004      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00c      	b.n	80015ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2205      	movs	r2, #5
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a33      	ldr	r2, [pc, #204]	; (80016e0 <HAL_GPIO_Init+0xe8>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d017      	beq.n	8001646 <HAL_GPIO_Init+0x4e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <HAL_GPIO_Init+0xec>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x4e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <HAL_GPIO_Init+0xf0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00f      	beq.n	8001646 <HAL_GPIO_Init+0x4e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a30      	ldr	r2, [pc, #192]	; (80016ec <HAL_GPIO_Init+0xf4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d00b      	beq.n	8001646 <HAL_GPIO_Init+0x4e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0xf8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x4e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a2e      	ldr	r2, [pc, #184]	; (80016f4 <HAL_GPIO_Init+0xfc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x4e>
 800163e:	21ac      	movs	r1, #172	; 0xac
 8001640:	482d      	ldr	r0, [pc, #180]	; (80016f8 <HAL_GPIO_Init+0x100>)
 8001642:	f7ff f9a4 	bl	800098e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_GPIO_Init+0x64>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x6c>
 800165c:	21ad      	movs	r1, #173	; 0xad
 800165e:	4826      	ldr	r0, [pc, #152]	; (80016f8 <HAL_GPIO_Init+0x100>)
 8001660:	f7ff f995 	bl	800098e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d035      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d031      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b11      	cmp	r3, #17
 800167a:	d02d      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d029      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b12      	cmp	r3, #18
 800168a:	d025      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001694:	d020      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800169e:	d01b      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80016a8:	d016      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80016b2:	d011      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80016bc:	d00c      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80016c6:	d007      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0xe0>
 80016d0:	21ae      	movs	r1, #174	; 0xae
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <HAL_GPIO_Init+0x100>)
 80016d4:	f7ff f95b 	bl	800098e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	e20c      	b.n	8001af8 <HAL_GPIO_Init+0x500>
 80016de:	bf00      	nop
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020c00 	.word	0x40020c00
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40021c00 	.word	0x40021c00
 80016f8:	08007070 	.word	0x08007070
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 81ec 	bne.w	8001af2 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	2b02      	cmp	r3, #2
 8001730:	d144      	bne.n	80017bc <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00f      	beq.n	800175a <HAL_GPIO_Init+0x162>
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d00b      	beq.n	800175a <HAL_GPIO_Init+0x162>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x162>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x162>
 8001752:	21c0      	movs	r1, #192	; 0xc0
 8001754:	4884      	ldr	r0, [pc, #528]	; (8001968 <HAL_GPIO_Init+0x370>)
 8001756:	f7ff f91a 	bl	800098e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 0201 	and.w	r2, r3, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d027      	beq.n	8001818 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00b      	beq.n	80017e8 <HAL_GPIO_Init+0x1f0>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_Init+0x1f0>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x1f0>
 80017e0:	21d1      	movs	r1, #209	; 0xd1
 80017e2:	4861      	ldr	r0, [pc, #388]	; (8001968 <HAL_GPIO_Init+0x370>)
 80017e4:	f7ff f8d3 	bl	800098e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	f040 80a3 	bne.w	800196c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d077      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b09      	cmp	r3, #9
 8001834:	d073      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d06f      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06b      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d067      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d063      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d05f      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d05b      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d057      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d053      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d04f      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b04      	cmp	r3, #4
 8001884:	d04b      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b04      	cmp	r3, #4
 800188c:	d047      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d043      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d03f      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d03b      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d037      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d033      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d02f      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d02b      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d027      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d023      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d01f      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	d01b      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d017      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b0a      	cmp	r3, #10
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b09      	cmp	r3, #9
 80018fc:	d00f      	beq.n	800191e <HAL_GPIO_Init+0x326>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b09      	cmp	r3, #9
 8001904:	d00b      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x326>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x326>
 8001916:	21de      	movs	r1, #222	; 0xde
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <HAL_GPIO_Init+0x370>)
 800191a:	f7ff f838 	bl	800098e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	08da      	lsrs	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3208      	adds	r2, #8
 8001926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	220f      	movs	r2, #15
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	08da      	lsrs	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3208      	adds	r2, #8
 8001960:	69b9      	ldr	r1, [r7, #24]
 8001962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001966:	e001      	b.n	800196c <HAL_GPIO_Init+0x374>
 8001968:	08007070 	.word	0x08007070
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a2 	beq.w	8001af2 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_GPIO_Init+0x514>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a55      	ldr	r2, [pc, #340]	; (8001b0c <HAL_GPIO_Init+0x514>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_GPIO_Init+0x514>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_GPIO_Init+0x518>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a48      	ldr	r2, [pc, #288]	; (8001b14 <HAL_GPIO_Init+0x51c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0x432>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a47      	ldr	r2, [pc, #284]	; (8001b18 <HAL_GPIO_Init+0x520>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0x42e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <HAL_GPIO_Init+0x524>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x42a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a45      	ldr	r2, [pc, #276]	; (8001b20 <HAL_GPIO_Init+0x528>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x426>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a44      	ldr	r2, [pc, #272]	; (8001b24 <HAL_GPIO_Init+0x52c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x422>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e008      	b.n	8001a2c <HAL_GPIO_Init+0x434>
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x434>
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e004      	b.n	8001a2c <HAL_GPIO_Init+0x434>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_Init+0x434>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x434>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	f002 0203 	and.w	r2, r2, #3
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	4093      	lsls	r3, r2
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a3c:	4934      	ldr	r1, [pc, #208]	; (8001b10 <HAL_GPIO_Init+0x518>)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6e:	4a2e      	ldr	r2, [pc, #184]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <HAL_GPIO_Init+0x530>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	f67f adfe 	bls.w	80016fc <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40013c00 	.word	0x40013c00

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_GPIO_WritePin+0x20>
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_GPIO_WritePin+0x2a>
 8001b4c:	f240 119d 	movw	r1, #413	; 0x19d
 8001b50:	480e      	ldr	r0, [pc, #56]	; (8001b8c <HAL_GPIO_WritePin+0x60>)
 8001b52:	f7fe ff1c 	bl	800098e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b56:	787b      	ldrb	r3, [r7, #1]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_WritePin+0x40>
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d004      	beq.n	8001b6c <HAL_GPIO_WritePin+0x40>
 8001b62:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001b66:	4809      	ldr	r0, [pc, #36]	; (8001b8c <HAL_GPIO_WritePin+0x60>)
 8001b68:	f7fe ff11 	bl	800098e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b78:	e003      	b.n	8001b82 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08007070 	.word	0x08007070

08001b90 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_GPIO_TogglePin+0x1c>
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	041b      	lsls	r3, r3, #16
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <HAL_GPIO_TogglePin+0x26>
 8001bac:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001bb0:	480a      	ldr	r0, [pc, #40]	; (8001bdc <HAL_GPIO_TogglePin+0x4c>)
 8001bb2:	f7fe feec 	bl	800098e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bbc:	887a      	ldrh	r2, [r7, #2]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	041a      	lsls	r2, r3, #16
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	400b      	ands	r3, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08007070 	.word	0x08007070

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fd74 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40013c00 	.word	0x40013c00

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e314      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b0f      	cmp	r3, #15
 8001c28:	d903      	bls.n	8001c32 <HAL_RCC_OscConfig+0x22>
 8001c2a:	21e6      	movs	r1, #230	; 0xe6
 8001c2c:	4897      	ldr	r0, [pc, #604]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c2e:	f7fe feae 	bl	800098e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8088 	beq.w	8001d50 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <HAL_RCC_OscConfig+0x54>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c50:	d008      	beq.n	8001c64 <HAL_RCC_OscConfig+0x54>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5a:	d003      	beq.n	8001c64 <HAL_RCC_OscConfig+0x54>
 8001c5c:	21eb      	movs	r1, #235	; 0xeb
 8001c5e:	488b      	ldr	r0, [pc, #556]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001c60:	f7fe fe95 	bl	800098e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c64:	4b8a      	ldr	r3, [pc, #552]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d00c      	beq.n	8001c8a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c70:	4b87      	ldr	r3, [pc, #540]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d112      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7c:	4b84      	ldr	r3, [pc, #528]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c88:	d10b      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	4b81      	ldr	r3, [pc, #516]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d05b      	beq.n	8001d4e <HAL_RCC_OscConfig+0x13e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d157      	bne.n	8001d4e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e2d4      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0xaa>
 8001cac:	4b78      	ldr	r3, [pc, #480]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a77      	ldr	r2, [pc, #476]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e01d      	b.n	8001cf6 <HAL_RCC_OscConfig+0xe6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0xce>
 8001cc4:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a71      	ldr	r2, [pc, #452]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0xe6>
 8001cde:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6b      	ldr	r2, [pc, #428]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a68      	ldr	r2, [pc, #416]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d013      	beq.n	8001d26 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fa9d 	bl	800123c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d06:	f7ff fa99 	bl	800123c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e299      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d18:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0xf6>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff fa89 	bl	800123c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fa85 	bl	800123c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e285      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x11e>
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d079      	beq.n	8001e50 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_OscConfig+0x166>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d004      	beq.n	8001d76 <HAL_RCC_OscConfig+0x166>
 8001d6c:	f240 111d 	movw	r1, #285	; 0x11d
 8001d70:	4846      	ldr	r0, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d72:	f7fe fe0c 	bl	800098e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b1f      	cmp	r3, #31
 8001d7c:	d904      	bls.n	8001d88 <HAL_RCC_OscConfig+0x178>
 8001d7e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001d82:	4842      	ldr	r0, [pc, #264]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001d84:	f7fe fe03 	bl	800098e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00b      	beq.n	8001dac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d11c      	bne.n	8001dda <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d116      	bne.n	8001dda <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e243      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd8:	e03a      	b.n	8001e50 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d020      	beq.n	8001e24 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de2:	4b2c      	ldr	r3, [pc, #176]	; (8001e94 <HAL_RCC_OscConfig+0x284>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fa28 	bl	800123c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df0:	f7ff fa24 	bl	800123c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e224      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	491c      	ldr	r1, [pc, #112]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
 8001e22:	e015      	b.n	8001e50 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x284>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fa07 	bl	800123c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fa03 	bl	800123c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e203      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d045      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_OscConfig+0x266>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d004      	beq.n	8001e76 <HAL_RCC_OscConfig+0x266>
 8001e6c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001e70:	4806      	ldr	r0, [pc, #24]	; (8001e8c <HAL_RCC_OscConfig+0x27c>)
 8001e72:	f7fe fd8c 	bl	800098e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01e      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7e:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <HAL_RCC_OscConfig+0x288>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff f9da 	bl	800123c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e010      	b.n	8001eae <HAL_RCC_OscConfig+0x29e>
 8001e8c:	080070ac 	.word	0x080070ac
 8001e90:	40023800 	.word	0x40023800
 8001e94:	42470000 	.word	0x42470000
 8001e98:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f9ce 	bl	800123c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1ce      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x28c>
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b5b      	ldr	r3, [pc, #364]	; (800202c <HAL_RCC_OscConfig+0x41c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff f9bb 	bl	800123c <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eca:	f7ff f9b7 	bl	800123c <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1b7      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	4b52      	ldr	r3, [pc, #328]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80b0 	beq.w	8002056 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x30c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d008      	beq.n	8001f1c <HAL_RCC_OscConfig+0x30c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d004      	beq.n	8001f1c <HAL_RCC_OscConfig+0x30c>
 8001f12:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8001f16:	4846      	ldr	r0, [pc, #280]	; (8002030 <HAL_RCC_OscConfig+0x420>)
 8001f18:	f7fe fd39 	bl	800098e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10f      	bne.n	8001f48 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	4a3d      	ldr	r2, [pc, #244]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	6413      	str	r3, [r2, #64]	; 0x40
 8001f38:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_RCC_OscConfig+0x424>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d118      	bne.n	8001f86 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0x424>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a36      	ldr	r2, [pc, #216]	; (8002034 <HAL_RCC_OscConfig+0x424>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f60:	f7ff f96c 	bl	800123c <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7ff f968 	bl	800123c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e168      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <HAL_RCC_OscConfig+0x424>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x38c>
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a25      	ldr	r2, [pc, #148]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9a:	e01c      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3c6>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x3ae>
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3c6>
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7ff f92d 	bl	800123c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff f929 	bl	800123c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e127      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <HAL_RCC_OscConfig+0x418>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x3d6>
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7ff f917 	bl	800123c <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002010:	e012      	b.n	8002038 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff f913 	bl	800123c <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d909      	bls.n	8002038 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e111      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
 8002028:	40023800 	.word	0x40023800
 800202c:	42470e80 	.word	0x42470e80
 8002030:	080070ac 	.word	0x080070ac
 8002034:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	4b86      	ldr	r3, [pc, #536]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e6      	bne.n	8002012 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d105      	bne.n	8002056 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b82      	ldr	r3, [pc, #520]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a81      	ldr	r2, [pc, #516]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <HAL_RCC_OscConfig+0x468>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d008      	beq.n	8002078 <HAL_RCC_OscConfig+0x468>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d004      	beq.n	8002078 <HAL_RCC_OscConfig+0x468>
 800206e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002072:	4879      	ldr	r0, [pc, #484]	; (8002258 <HAL_RCC_OscConfig+0x648>)
 8002074:	f7fe fc8b 	bl	800098e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80e4 	beq.w	800224a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002082:	4b74      	ldr	r3, [pc, #464]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	f000 80a5 	beq.w	80021da <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b02      	cmp	r3, #2
 8002096:	f040 8089 	bne.w	80021ac <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4a6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020aa:	d004      	beq.n	80020b6 <HAL_RCC_OscConfig+0x4a6>
 80020ac:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80020b0:	4869      	ldr	r0, [pc, #420]	; (8002258 <HAL_RCC_OscConfig+0x648>)
 80020b2:	f7fe fc6c 	bl	800098e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	2b3f      	cmp	r3, #63	; 0x3f
 80020bc:	d904      	bls.n	80020c8 <HAL_RCC_OscConfig+0x4b8>
 80020be:	f240 11d7 	movw	r1, #471	; 0x1d7
 80020c2:	4865      	ldr	r0, [pc, #404]	; (8002258 <HAL_RCC_OscConfig+0x648>)
 80020c4:	f7fe fc63 	bl	800098e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b31      	cmp	r3, #49	; 0x31
 80020ce:	d904      	bls.n	80020da <HAL_RCC_OscConfig+0x4ca>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80020d8:	d904      	bls.n	80020e4 <HAL_RCC_OscConfig+0x4d4>
 80020da:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80020de:	485e      	ldr	r0, [pc, #376]	; (8002258 <HAL_RCC_OscConfig+0x648>)
 80020e0:	f7fe fc55 	bl	800098e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d010      	beq.n	800210e <HAL_RCC_OscConfig+0x4fe>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d00c      	beq.n	800210e <HAL_RCC_OscConfig+0x4fe>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d008      	beq.n	800210e <HAL_RCC_OscConfig+0x4fe>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	2b08      	cmp	r3, #8
 8002102:	d004      	beq.n	800210e <HAL_RCC_OscConfig+0x4fe>
 8002104:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002108:	4853      	ldr	r0, [pc, #332]	; (8002258 <HAL_RCC_OscConfig+0x648>)
 800210a:	f7fe fc40 	bl	800098e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d903      	bls.n	800211e <HAL_RCC_OscConfig+0x50e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	2b0f      	cmp	r3, #15
 800211c:	d904      	bls.n	8002128 <HAL_RCC_OscConfig+0x518>
 800211e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002122:	484d      	ldr	r0, [pc, #308]	; (8002258 <HAL_RCC_OscConfig+0x648>)
 8002124:	f7fe fc33 	bl	800098e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x64c>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff f885 	bl	800123c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff f881 	bl	800123c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e081      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002148:	4b42      	ldr	r3, [pc, #264]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	019b      	lsls	r3, r3, #6
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	3b01      	subs	r3, #1
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	061b      	lsls	r3, r3, #24
 8002178:	4936      	ldr	r1, [pc, #216]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x64c>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff f85a 	bl	800123c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f856 	bl	800123c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e056      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x57c>
 80021aa:	e04e      	b.n	800224a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x64c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff f843 	bl	800123c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff f83f 	bl	800123c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e03f      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x5aa>
 80021d8:	e037      	b.n	800224a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e032      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x644>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d028      	beq.n	8002246 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d121      	bne.n	8002246 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d11a      	bne.n	8002246 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002216:	4013      	ands	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800221c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40023800 	.word	0x40023800
 8002258:	080070ac 	.word	0x080070ac
 800225c:	42470060 	.word	0x42470060

08002260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e174      	b.n	800255e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_RCC_ClockConfig+0x24>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d904      	bls.n	800228e <HAL_RCC_ClockConfig+0x2e>
 8002284:	f240 215a 	movw	r1, #602	; 0x25a
 8002288:	487b      	ldr	r0, [pc, #492]	; (8002478 <HAL_RCC_ClockConfig+0x218>)
 800228a:	f7fe fb80 	bl	800098e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d019      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d016      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d010      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00d      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b06      	cmp	r3, #6
 80022b6:	d007      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d004      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x68>
 80022be:	f240 215b 	movw	r1, #603	; 0x25b
 80022c2:	486d      	ldr	r0, [pc, #436]	; (8002478 <HAL_RCC_ClockConfig+0x218>)
 80022c4:	f7fe fb63 	bl	800098e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b6c      	ldr	r3, [pc, #432]	; (800247c <HAL_RCC_ClockConfig+0x21c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d90c      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b69      	ldr	r3, [pc, #420]	; (800247c <HAL_RCC_ClockConfig+0x21c>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b67      	ldr	r3, [pc, #412]	; (800247c <HAL_RCC_ClockConfig+0x21c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e136      	b.n	800255e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d049      	beq.n	8002390 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a5c      	ldr	r2, [pc, #368]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 800230e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a56      	ldr	r2, [pc, #344]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 8002326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d024      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b90      	cmp	r3, #144	; 0x90
 8002342:	d01c      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2ba0      	cmp	r3, #160	; 0xa0
 800234a:	d018      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2bb0      	cmp	r3, #176	; 0xb0
 8002352:	d014      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2bc0      	cmp	r3, #192	; 0xc0
 800235a:	d010      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2bd0      	cmp	r3, #208	; 0xd0
 8002362:	d00c      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2be0      	cmp	r3, #224	; 0xe0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2bf0      	cmp	r3, #240	; 0xf0
 8002372:	d004      	beq.n	800237e <HAL_RCC_ClockConfig+0x11e>
 8002374:	f240 217e 	movw	r1, #638	; 0x27e
 8002378:	483f      	ldr	r0, [pc, #252]	; (8002478 <HAL_RCC_ClockConfig+0x218>)
 800237a:	f7fe fb08 	bl	800098e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237e:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	493d      	ldr	r1, [pc, #244]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d059      	beq.n	8002450 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d010      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x166>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d00c      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x166>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x166>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d004      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x166>
 80023bc:	f240 2185 	movw	r1, #645	; 0x285
 80023c0:	482d      	ldr	r0, [pc, #180]	; (8002478 <HAL_RCC_ClockConfig+0x218>)
 80023c2:	f7fe fae4 	bl	800098e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d119      	bne.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0bf      	b.n	800255e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0af      	b.n	800255e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0a7      	b.n	800255e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4919      	ldr	r1, [pc, #100]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7fe ff0c 	bl	800123c <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7fe ff08 	bl	800123c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e08f      	b.n	800255e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_ClockConfig+0x220>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x21c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d212      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_RCC_ClockConfig+0x21c>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_ClockConfig+0x21c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d007      	beq.n	8002484 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e072      	b.n	800255e <HAL_RCC_ClockConfig+0x2fe>
 8002478:	080070ac 	.word	0x080070ac
 800247c:	40023c00 	.word	0x40023c00
 8002480:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d025      	beq.n	80024dc <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d018      	beq.n	80024ca <HAL_RCC_ClockConfig+0x26a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a0:	d013      	beq.n	80024ca <HAL_RCC_ClockConfig+0x26a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80024aa:	d00e      	beq.n	80024ca <HAL_RCC_ClockConfig+0x26a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x26a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80024be:	d004      	beq.n	80024ca <HAL_RCC_ClockConfig+0x26a>
 80024c0:	f240 21c3 	movw	r1, #707	; 0x2c3
 80024c4:	4828      	ldr	r0, [pc, #160]	; (8002568 <HAL_RCC_ClockConfig+0x308>)
 80024c6:	f7fe fa62 	bl	800098e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_RCC_ClockConfig+0x30c>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4925      	ldr	r1, [pc, #148]	; (800256c <HAL_RCC_ClockConfig+0x30c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d026      	beq.n	8002536 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d018      	beq.n	8002522 <HAL_RCC_ClockConfig+0x2c2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f8:	d013      	beq.n	8002522 <HAL_RCC_ClockConfig+0x2c2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002502:	d00e      	beq.n	8002522 <HAL_RCC_ClockConfig+0x2c2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x2c2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002516:	d004      	beq.n	8002522 <HAL_RCC_ClockConfig+0x2c2>
 8002518:	f240 21ca 	movw	r1, #714	; 0x2ca
 800251c:	4812      	ldr	r0, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x308>)
 800251e:	f7fe fa36 	bl	800098e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x30c>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x30c>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x30c>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x310>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x314>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x318>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fe2c 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	080070ac 	.word	0x080070ac
 800256c:	40023800 	.word	0x40023800
 8002570:	08007194 	.word	0x08007194
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002580:	b094      	sub	sp, #80	; 0x50
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
 8002588:	2300      	movs	r3, #0
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800258c:	2300      	movs	r3, #0
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002594:	4b79      	ldr	r3, [pc, #484]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 80e1 	bhi.w	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ae:	e0db      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025b4:	e0db      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_RCC_GetSysClockFreq+0x208>)
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ba:	e0d8      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c6:	4b6d      	ldr	r3, [pc, #436]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b6a      	ldr	r3, [pc, #424]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
 80025dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	0159      	lsls	r1, r3, #5
 80025fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002600:	0150      	lsls	r0, r2, #5
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4621      	mov	r1, r4
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	6139      	str	r1, [r7, #16]
 800260c:	4629      	mov	r1, r5
 800260e:	eb63 0301 	sbc.w	r3, r3, r1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002620:	4659      	mov	r1, fp
 8002622:	018b      	lsls	r3, r1, #6
 8002624:	4651      	mov	r1, sl
 8002626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262a:	4651      	mov	r1, sl
 800262c:	018a      	lsls	r2, r1, #6
 800262e:	4651      	mov	r1, sl
 8002630:	ebb2 0801 	subs.w	r8, r2, r1
 8002634:	4659      	mov	r1, fp
 8002636:	eb63 0901 	sbc.w	r9, r3, r1
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264e:	4690      	mov	r8, r2
 8002650:	4699      	mov	r9, r3
 8002652:	4623      	mov	r3, r4
 8002654:	eb18 0303 	adds.w	r3, r8, r3
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	462b      	mov	r3, r5
 800265c:	eb49 0303 	adc.w	r3, r9, r3
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266e:	4629      	mov	r1, r5
 8002670:	024b      	lsls	r3, r1, #9
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002678:	4621      	mov	r1, r4
 800267a:	024a      	lsls	r2, r1, #9
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002682:	2200      	movs	r2, #0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
 8002686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002688:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800268c:	f7fd fdf8 	bl	8000280 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002698:	e058      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2200      	movs	r2, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	4611      	mov	r1, r2
 80026a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
 80026b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b4:	4642      	mov	r2, r8
 80026b6:	464b      	mov	r3, r9
 80026b8:	f04f 0000 	mov.w	r0, #0
 80026bc:	f04f 0100 	mov.w	r1, #0
 80026c0:	0159      	lsls	r1, r3, #5
 80026c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c6:	0150      	lsls	r0, r2, #5
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4641      	mov	r1, r8
 80026ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d2:	4649      	mov	r1, r9
 80026d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026ec:	ebb2 040a 	subs.w	r4, r2, sl
 80026f0:	eb63 050b 	sbc.w	r5, r3, fp
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	00eb      	lsls	r3, r5, #3
 80026fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002702:	00e2      	lsls	r2, r4, #3
 8002704:	4614      	mov	r4, r2
 8002706:	461d      	mov	r5, r3
 8002708:	4643      	mov	r3, r8
 800270a:	18e3      	adds	r3, r4, r3
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	464b      	mov	r3, r9
 8002710:	eb45 0303 	adc.w	r3, r5, r3
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002722:	4629      	mov	r1, r5
 8002724:	028b      	lsls	r3, r1, #10
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800272c:	4621      	mov	r1, r4
 800272e:	028a      	lsls	r2, r1, #10
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	61fa      	str	r2, [r7, #28]
 800273c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002740:	f7fd fd9e 	bl	8000280 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_GetSysClockFreq+0x200>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800275c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetSysClockFreq+0x204>)
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002770:	4618      	mov	r0, r3
 8002772:	3750      	adds	r7, #80	; 0x50
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	007a1200 	.word	0x007a1200

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	080071a4 	.word	0x080071a4

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	080071a4 	.word	0x080071a4

080027f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0a7      	b.n	8002952 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a55      	ldr	r2, [pc, #340]	; (800295c <HAL_TIM_Base_Init+0x16c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d027      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d022      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a51      	ldr	r2, [pc, #324]	; (8002960 <HAL_TIM_Base_Init+0x170>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d01d      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a4f      	ldr	r2, [pc, #316]	; (8002964 <HAL_TIM_Base_Init+0x174>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d018      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a4e      	ldr	r2, [pc, #312]	; (8002968 <HAL_TIM_Base_Init+0x178>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a4c      	ldr	r2, [pc, #304]	; (800296c <HAL_TIM_Base_Init+0x17c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00e      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a4b      	ldr	r2, [pc, #300]	; (8002970 <HAL_TIM_Base_Init+0x180>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a49      	ldr	r2, [pc, #292]	; (8002974 <HAL_TIM_Base_Init+0x184>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_TIM_Base_Init+0x6c>
 8002852:	f240 1113 	movw	r1, #275	; 0x113
 8002856:	4848      	ldr	r0, [pc, #288]	; (8002978 <HAL_TIM_Base_Init+0x188>)
 8002858:	f7fe f899 	bl	800098e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d014      	beq.n	800288e <HAL_TIM_Base_Init+0x9e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d010      	beq.n	800288e <HAL_TIM_Base_Init+0x9e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b20      	cmp	r3, #32
 8002872:	d00c      	beq.n	800288e <HAL_TIM_Base_Init+0x9e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d008      	beq.n	800288e <HAL_TIM_Base_Init+0x9e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	d004      	beq.n	800288e <HAL_TIM_Base_Init+0x9e>
 8002884:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002888:	483b      	ldr	r0, [pc, #236]	; (8002978 <HAL_TIM_Base_Init+0x188>)
 800288a:	f7fe f880 	bl	800098e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_Base_Init+0xc4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_Base_Init+0xc4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_Base_Init+0xc4>
 80028aa:	f240 1115 	movw	r1, #277	; 0x115
 80028ae:	4832      	ldr	r0, [pc, #200]	; (8002978 <HAL_TIM_Base_Init+0x188>)
 80028b0:	f7fe f86d 	bl	800098e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_TIM_Base_Init+0xde>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d004      	beq.n	80028ce <HAL_TIM_Base_Init+0xde>
 80028c4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80028c8:	482b      	ldr	r0, [pc, #172]	; (8002978 <HAL_TIM_Base_Init+0x188>)
 80028ca:	f7fe f860 	bl	800098e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fadc 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f001 fd54 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	40000c00 	.word	0x40000c00
 800296c:	40014000 	.word	0x40014000
 8002970:	40014400 	.word	0x40014400
 8002974:	40014800 	.word	0x40014800
 8002978:	080070e4 	.word	0x080070e4

0800297c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a3d      	ldr	r2, [pc, #244]	; (8002a80 <HAL_TIM_Base_Start_IT+0x104>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d027      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d022      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a39      	ldr	r2, [pc, #228]	; (8002a84 <HAL_TIM_Base_Start_IT+0x108>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01d      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a38      	ldr	r2, [pc, #224]	; (8002a88 <HAL_TIM_Base_Start_IT+0x10c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_TIM_Base_Start_IT+0x110>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a35      	ldr	r2, [pc, #212]	; (8002a90 <HAL_TIM_Base_Start_IT+0x114>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a33      	ldr	r2, [pc, #204]	; (8002a94 <HAL_TIM_Base_Start_IT+0x118>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a32      	ldr	r2, [pc, #200]	; (8002a98 <HAL_TIM_Base_Start_IT+0x11c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x62>
 80029d4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80029d8:	4830      	ldr	r0, [pc, #192]	; (8002a9c <HAL_TIM_Base_Start_IT+0x120>)
 80029da:	f7fd ffd8 	bl	800098e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d001      	beq.n	80029ee <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e044      	b.n	8002a78 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <HAL_TIM_Base_Start_IT+0x104>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d018      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0xc6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d013      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0xc6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a19      	ldr	r2, [pc, #100]	; (8002a84 <HAL_TIM_Base_Start_IT+0x108>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00e      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0xc6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_TIM_Base_Start_IT+0x10c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0xc6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_TIM_Base_Start_IT+0x110>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_TIM_Base_Start_IT+0xc6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_TIM_Base_Start_IT+0x114>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d111      	bne.n	8002a66 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	d010      	beq.n	8002a76 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	e007      	b.n	8002a76 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40014000 	.word	0x40014000
 8002a94:	40014400 	.word	0x40014400
 8002a98:	40014800 	.word	0x40014800
 8002a9c:	080070e4 	.word	0x080070e4

08002aa0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0a7      	b.n	8002c02 <HAL_TIM_OC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <HAL_TIM_OC_Init+0x16c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d027      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d022      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a51      	ldr	r2, [pc, #324]	; (8002c10 <HAL_TIM_OC_Init+0x170>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d01d      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a4f      	ldr	r2, [pc, #316]	; (8002c14 <HAL_TIM_OC_Init+0x174>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d018      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_TIM_OC_Init+0x178>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a4c      	ldr	r2, [pc, #304]	; (8002c1c <HAL_TIM_OC_Init+0x17c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00e      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a4b      	ldr	r2, [pc, #300]	; (8002c20 <HAL_TIM_OC_Init+0x180>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d009      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a49      	ldr	r2, [pc, #292]	; (8002c24 <HAL_TIM_OC_Init+0x184>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIM_OC_Init+0x6c>
 8002b02:	f240 2192 	movw	r1, #658	; 0x292
 8002b06:	4848      	ldr	r0, [pc, #288]	; (8002c28 <HAL_TIM_OC_Init+0x188>)
 8002b08:	f7fd ff41 	bl	800098e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d014      	beq.n	8002b3e <HAL_TIM_OC_Init+0x9e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d010      	beq.n	8002b3e <HAL_TIM_OC_Init+0x9e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d00c      	beq.n	8002b3e <HAL_TIM_OC_Init+0x9e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d008      	beq.n	8002b3e <HAL_TIM_OC_Init+0x9e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b60      	cmp	r3, #96	; 0x60
 8002b32:	d004      	beq.n	8002b3e <HAL_TIM_OC_Init+0x9e>
 8002b34:	f240 2193 	movw	r1, #659	; 0x293
 8002b38:	483b      	ldr	r0, [pc, #236]	; (8002c28 <HAL_TIM_OC_Init+0x188>)
 8002b3a:	f7fd ff28 	bl	800098e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00e      	beq.n	8002b64 <HAL_TIM_OC_Init+0xc4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d009      	beq.n	8002b64 <HAL_TIM_OC_Init+0xc4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b58:	d004      	beq.n	8002b64 <HAL_TIM_OC_Init+0xc4>
 8002b5a:	f44f 7125 	mov.w	r1, #660	; 0x294
 8002b5e:	4832      	ldr	r0, [pc, #200]	; (8002c28 <HAL_TIM_OC_Init+0x188>)
 8002b60:	f7fd ff15 	bl	800098e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_TIM_OC_Init+0xde>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b80      	cmp	r3, #128	; 0x80
 8002b72:	d004      	beq.n	8002b7e <HAL_TIM_OC_Init+0xde>
 8002b74:	f240 2195 	movw	r1, #661	; 0x295
 8002b78:	482b      	ldr	r0, [pc, #172]	; (8002c28 <HAL_TIM_OC_Init+0x188>)
 8002b7a:	f7fd ff08 	bl	800098e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_TIM_OC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f84a 	bl	8002c2c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f001 fbfc 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40014400 	.word	0x40014400
 8002c24:	40014800 	.word	0x40014800
 8002c28:	080070e4 	.word	0x080070e4

08002c2c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a83      	ldr	r2, [pc, #524]	; (8002e60 <HAL_TIM_OC_Start_IT+0x220>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10b      	bne.n	8002c70 <HAL_TIM_OC_Start_IT+0x30>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d06c      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d069      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d066      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d063      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c78:	d10b      	bne.n	8002c92 <HAL_TIM_OC_Start_IT+0x52>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d05b      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d058      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d055      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d052      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a73      	ldr	r2, [pc, #460]	; (8002e64 <HAL_TIM_OC_Start_IT+0x224>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_TIM_OC_Start_IT+0x74>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04a      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d047      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d044      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d041      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a6b      	ldr	r2, [pc, #428]	; (8002e68 <HAL_TIM_OC_Start_IT+0x228>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_TIM_OC_Start_IT+0x96>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d039      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d036      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d033      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d030      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a64      	ldr	r2, [pc, #400]	; (8002e6c <HAL_TIM_OC_Start_IT+0x22c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10b      	bne.n	8002cf8 <HAL_TIM_OC_Start_IT+0xb8>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d025      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d022      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d01f      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_TIM_OC_Start_IT+0x230>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d105      	bne.n	8002d0e <HAL_TIM_OC_Start_IT+0xce>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d017      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d014      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_TIM_OC_Start_IT+0x234>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d102      	bne.n	8002d1e <HAL_TIM_OC_Start_IT+0xde>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a55      	ldr	r2, [pc, #340]	; (8002e78 <HAL_TIM_OC_Start_IT+0x238>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_TIM_OC_Start_IT+0xee>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_TIM_OC_Start_IT+0xf8>
 8002d2e:	f240 3172 	movw	r1, #882	; 0x372
 8002d32:	4852      	ldr	r0, [pc, #328]	; (8002e7c <HAL_TIM_OC_Start_IT+0x23c>)
 8002d34:	f7fd fe2b 	bl	800098e <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_TIM_OC_Start_IT+0x112>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e022      	b.n	8002d98 <HAL_TIM_OC_Start_IT+0x158>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_OC_Start_IT+0x12c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e015      	b.n	8002d98 <HAL_TIM_OC_Start_IT+0x158>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d109      	bne.n	8002d86 <HAL_TIM_OC_Start_IT+0x146>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e008      	b.n	8002d98 <HAL_TIM_OC_Start_IT+0x158>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	bf14      	ite	ne
 8002d92:	2301      	movne	r3, #1
 8002d94:	2300      	moveq	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_TIM_OC_Start_IT+0x160>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0c2      	b.n	8002f26 <HAL_TIM_OC_Start_IT+0x2e6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <HAL_TIM_OC_Start_IT+0x170>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dae:	e013      	b.n	8002dd8 <HAL_TIM_OC_Start_IT+0x198>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d104      	bne.n	8002dc0 <HAL_TIM_OC_Start_IT+0x180>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dbe:	e00b      	b.n	8002dd8 <HAL_TIM_OC_Start_IT+0x198>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d104      	bne.n	8002dd0 <HAL_TIM_OC_Start_IT+0x190>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dce:	e003      	b.n	8002dd8 <HAL_TIM_OC_Start_IT+0x198>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d850      	bhi.n	8002e80 <HAL_TIM_OC_Start_IT+0x240>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_TIM_OC_Start_IT+0x1a4>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002e81 	.word	0x08002e81
 8002dec:	08002e81 	.word	0x08002e81
 8002df0:	08002e81 	.word	0x08002e81
 8002df4:	08002e2b 	.word	0x08002e2b
 8002df8:	08002e81 	.word	0x08002e81
 8002dfc:	08002e81 	.word	0x08002e81
 8002e00:	08002e81 	.word	0x08002e81
 8002e04:	08002e3d 	.word	0x08002e3d
 8002e08:	08002e81 	.word	0x08002e81
 8002e0c:	08002e81 	.word	0x08002e81
 8002e10:	08002e81 	.word	0x08002e81
 8002e14:	08002e4f 	.word	0x08002e4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0202 	orr.w	r2, r2, #2
 8002e26:	60da      	str	r2, [r3, #12]
      break;
 8002e28:	e02d      	b.n	8002e86 <HAL_TIM_OC_Start_IT+0x246>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0204 	orr.w	r2, r2, #4
 8002e38:	60da      	str	r2, [r3, #12]
      break;
 8002e3a:	e024      	b.n	8002e86 <HAL_TIM_OC_Start_IT+0x246>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	60da      	str	r2, [r3, #12]
      break;
 8002e4c:	e01b      	b.n	8002e86 <HAL_TIM_OC_Start_IT+0x246>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0210 	orr.w	r2, r2, #16
 8002e5c:	60da      	str	r2, [r3, #12]
      break;
 8002e5e:	e012      	b.n	8002e86 <HAL_TIM_OC_Start_IT+0x246>
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40014400 	.word	0x40014400
 8002e78:	40014800 	.word	0x40014800
 8002e7c:	080070e4 	.word	0x080070e4
    }

    default:
      status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      break;
 8002e84:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d14b      	bne.n	8002f24 <HAL_TIM_OC_Start_IT+0x2e4>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2201      	movs	r2, #1
 8002e92:	6839      	ldr	r1, [r7, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fed5 	bl	8004c44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_TIM_OC_Start_IT+0x2f0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d107      	bne.n	8002eb4 <HAL_TIM_OC_Start_IT+0x274>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_TIM_OC_Start_IT+0x2f0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d013      	beq.n	8002ef0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_TIM_OC_Start_IT+0x2f4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <HAL_TIM_OC_Start_IT+0x2f8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <HAL_TIM_OC_Start_IT+0x2fc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_TIM_OC_Start_IT+0x300>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_TIM_OC_Start_IT+0x2d4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d010      	beq.n	8002f24 <HAL_TIM_OC_Start_IT+0x2e4>
      {
        __HAL_TIM_ENABLE(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	e007      	b.n	8002f24 <HAL_TIM_OC_Start_IT+0x2e4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40014000 	.word	0x40014000

08002f44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0a7      	b.n	80030a6 <HAL_TIM_IC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a55      	ldr	r2, [pc, #340]	; (80030b0 <HAL_TIM_IC_Init+0x16c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d027      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d022      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a51      	ldr	r2, [pc, #324]	; (80030b4 <HAL_TIM_IC_Init+0x170>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01d      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4f      	ldr	r2, [pc, #316]	; (80030b8 <HAL_TIM_IC_Init+0x174>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a4e      	ldr	r2, [pc, #312]	; (80030bc <HAL_TIM_IC_Init+0x178>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_TIM_IC_Init+0x17c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_TIM_IC_Init+0x180>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a49      	ldr	r2, [pc, #292]	; (80030c8 <HAL_TIM_IC_Init+0x184>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_TIM_IC_Init+0x6c>
 8002fa6:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8002faa:	4848      	ldr	r0, [pc, #288]	; (80030cc <HAL_TIM_IC_Init+0x188>)
 8002fac:	f7fd fcef 	bl	800098e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d014      	beq.n	8002fe2 <HAL_TIM_IC_Init+0x9e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d010      	beq.n	8002fe2 <HAL_TIM_IC_Init+0x9e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_TIM_IC_Init+0x9e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d008      	beq.n	8002fe2 <HAL_TIM_IC_Init+0x9e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b60      	cmp	r3, #96	; 0x60
 8002fd6:	d004      	beq.n	8002fe2 <HAL_TIM_IC_Init+0x9e>
 8002fd8:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8002fdc:	483b      	ldr	r0, [pc, #236]	; (80030cc <HAL_TIM_IC_Init+0x188>)
 8002fde:	f7fd fcd6 	bl	800098e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <HAL_TIM_IC_Init+0xc4>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	d009      	beq.n	8003008 <HAL_TIM_IC_Init+0xc4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffc:	d004      	beq.n	8003008 <HAL_TIM_IC_Init+0xc4>
 8002ffe:	f240 71c1 	movw	r1, #1985	; 0x7c1
 8003002:	4832      	ldr	r0, [pc, #200]	; (80030cc <HAL_TIM_IC_Init+0x188>)
 8003004:	f7fd fcc3 	bl	800098e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_TIM_IC_Init+0xde>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b80      	cmp	r3, #128	; 0x80
 8003016:	d004      	beq.n	8003022 <HAL_TIM_IC_Init+0xde>
 8003018:	f240 71c2 	movw	r1, #1986	; 0x7c2
 800301c:	482b      	ldr	r0, [pc, #172]	; (80030cc <HAL_TIM_IC_Init+0x188>)
 800301e:	f7fd fcb6 	bl	800098e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_TIM_IC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f84a 	bl	80030d0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f001 f9aa 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800
 80030cc:	080070e4 	.word	0x080070e4

080030d0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_IC_Start_IT+0x1e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e013      	b.n	800312a <HAL_TIM_IC_Start_IT+0x46>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d104      	bne.n	8003112 <HAL_TIM_IC_Start_IT+0x2e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e00b      	b.n	800312a <HAL_TIM_IC_Start_IT+0x46>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d104      	bne.n	8003122 <HAL_TIM_IC_Start_IT+0x3e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e003      	b.n	800312a <HAL_TIM_IC_Start_IT+0x46>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d104      	bne.n	800313c <HAL_TIM_IC_Start_IT+0x58>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e013      	b.n	8003164 <HAL_TIM_IC_Start_IT+0x80>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b04      	cmp	r3, #4
 8003140:	d104      	bne.n	800314c <HAL_TIM_IC_Start_IT+0x68>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e00b      	b.n	8003164 <HAL_TIM_IC_Start_IT+0x80>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b08      	cmp	r3, #8
 8003150:	d104      	bne.n	800315c <HAL_TIM_IC_Start_IT+0x78>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e003      	b.n	8003164 <HAL_TIM_IC_Start_IT+0x80>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003162:	b2db      	uxtb	r3, r3
 8003164:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7b      	ldr	r2, [pc, #492]	; (8003358 <HAL_TIM_IC_Start_IT+0x274>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10b      	bne.n	8003188 <HAL_TIM_IC_Start_IT+0xa4>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d06c      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d069      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d066      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d063      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d10b      	bne.n	80031aa <HAL_TIM_IC_Start_IT+0xc6>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05b      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b04      	cmp	r3, #4
 800319c:	d058      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d055      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d052      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6b      	ldr	r2, [pc, #428]	; (800335c <HAL_TIM_IC_Start_IT+0x278>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10b      	bne.n	80031cc <HAL_TIM_IC_Start_IT+0xe8>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d04a      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d047      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d044      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d041      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a63      	ldr	r2, [pc, #396]	; (8003360 <HAL_TIM_IC_Start_IT+0x27c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10b      	bne.n	80031ee <HAL_TIM_IC_Start_IT+0x10a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d039      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d036      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d033      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d030      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <HAL_TIM_IC_Start_IT+0x280>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d10b      	bne.n	8003210 <HAL_TIM_IC_Start_IT+0x12c>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d028      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d025      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d022      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d01f      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a54      	ldr	r2, [pc, #336]	; (8003368 <HAL_TIM_IC_Start_IT+0x284>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d105      	bne.n	8003226 <HAL_TIM_IC_Start_IT+0x142>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d017      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d014      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a50      	ldr	r2, [pc, #320]	; (800336c <HAL_TIM_IC_Start_IT+0x288>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d102      	bne.n	8003236 <HAL_TIM_IC_Start_IT+0x152>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00c      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a4d      	ldr	r2, [pc, #308]	; (8003370 <HAL_TIM_IC_Start_IT+0x28c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d102      	bne.n	8003246 <HAL_TIM_IC_Start_IT+0x162>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <HAL_TIM_IC_Start_IT+0x16c>
 8003246:	f640 019b 	movw	r1, #2203	; 0x89b
 800324a:	484a      	ldr	r0, [pc, #296]	; (8003374 <HAL_TIM_IC_Start_IT+0x290>)
 800324c:	f7fd fb9f 	bl	800098e <assert_failed>

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003250:	7bbb      	ldrb	r3, [r7, #14]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d102      	bne.n	800325c <HAL_TIM_IC_Start_IT+0x178>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003256:	7b7b      	ldrb	r3, [r7, #13]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d001      	beq.n	8003260 <HAL_TIM_IC_Start_IT+0x17c>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d1      	b.n	8003404 <HAL_TIM_IC_Start_IT+0x320>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_TIM_IC_Start_IT+0x18c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800326e:	e013      	b.n	8003298 <HAL_TIM_IC_Start_IT+0x1b4>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b04      	cmp	r3, #4
 8003274:	d104      	bne.n	8003280 <HAL_TIM_IC_Start_IT+0x19c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800327e:	e00b      	b.n	8003298 <HAL_TIM_IC_Start_IT+0x1b4>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b08      	cmp	r3, #8
 8003284:	d104      	bne.n	8003290 <HAL_TIM_IC_Start_IT+0x1ac>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2202      	movs	r2, #2
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800328e:	e003      	b.n	8003298 <HAL_TIM_IC_Start_IT+0x1b4>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <HAL_TIM_IC_Start_IT+0x1c4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a6:	e013      	b.n	80032d0 <HAL_TIM_IC_Start_IT+0x1ec>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d104      	bne.n	80032b8 <HAL_TIM_IC_Start_IT+0x1d4>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b6:	e00b      	b.n	80032d0 <HAL_TIM_IC_Start_IT+0x1ec>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d104      	bne.n	80032c8 <HAL_TIM_IC_Start_IT+0x1e4>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c6:	e003      	b.n	80032d0 <HAL_TIM_IC_Start_IT+0x1ec>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d850      	bhi.n	8003378 <HAL_TIM_IC_Start_IT+0x294>
 80032d6:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <HAL_TIM_IC_Start_IT+0x1f8>)
 80032d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032dc:	08003311 	.word	0x08003311
 80032e0:	08003379 	.word	0x08003379
 80032e4:	08003379 	.word	0x08003379
 80032e8:	08003379 	.word	0x08003379
 80032ec:	08003323 	.word	0x08003323
 80032f0:	08003379 	.word	0x08003379
 80032f4:	08003379 	.word	0x08003379
 80032f8:	08003379 	.word	0x08003379
 80032fc:	08003335 	.word	0x08003335
 8003300:	08003379 	.word	0x08003379
 8003304:	08003379 	.word	0x08003379
 8003308:	08003379 	.word	0x08003379
 800330c:	08003347 	.word	0x08003347
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0202 	orr.w	r2, r2, #2
 800331e:	60da      	str	r2, [r3, #12]
      break;
 8003320:	e02d      	b.n	800337e <HAL_TIM_IC_Start_IT+0x29a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0204 	orr.w	r2, r2, #4
 8003330:	60da      	str	r2, [r3, #12]
      break;
 8003332:	e024      	b.n	800337e <HAL_TIM_IC_Start_IT+0x29a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0208 	orr.w	r2, r2, #8
 8003342:	60da      	str	r2, [r3, #12]
      break;
 8003344:	e01b      	b.n	800337e <HAL_TIM_IC_Start_IT+0x29a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0210 	orr.w	r2, r2, #16
 8003354:	60da      	str	r2, [r3, #12]
      break;
 8003356:	e012      	b.n	800337e <HAL_TIM_IC_Start_IT+0x29a>
 8003358:	40010000 	.word	0x40010000
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40000c00 	.word	0x40000c00
 8003368:	40014000 	.word	0x40014000
 800336c:	40014400 	.word	0x40014400
 8003370:	40014800 	.word	0x40014800
 8003374:	080070e4 	.word	0x080070e4
    }

    default:
      status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      break;
 800337c:	bf00      	nop
  }

  if (status == HAL_OK)
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d13e      	bne.n	8003402 <HAL_TIM_IC_Start_IT+0x31e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	6839      	ldr	r1, [r7, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f001 fc59 	bl	8004c44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_TIM_IC_Start_IT+0x328>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d018      	beq.n	80033ce <HAL_TIM_IC_Start_IT+0x2ea>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d013      	beq.n	80033ce <HAL_TIM_IC_Start_IT+0x2ea>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_TIM_IC_Start_IT+0x32c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00e      	beq.n	80033ce <HAL_TIM_IC_Start_IT+0x2ea>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_TIM_IC_Start_IT+0x330>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d009      	beq.n	80033ce <HAL_TIM_IC_Start_IT+0x2ea>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a16      	ldr	r2, [pc, #88]	; (8003418 <HAL_TIM_IC_Start_IT+0x334>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_TIM_IC_Start_IT+0x2ea>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_TIM_IC_Start_IT+0x338>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d111      	bne.n	80033f2 <HAL_TIM_IC_Start_IT+0x30e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d010      	beq.n	8003402 <HAL_TIM_IC_Start_IT+0x31e>
      {
        __HAL_TIM_ENABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f0:	e007      	b.n	8003402 <HAL_TIM_IC_Start_IT+0x31e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40014000 	.word	0x40014000

08003420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b02      	cmp	r3, #2
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0202 	mvn.w	r2, #2
 800344c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd f986 	bl	8000774 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd f9d4 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 ff85 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b04      	cmp	r3, #4
 8003488:	d122      	bne.n	80034d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d11b      	bne.n	80034d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0204 	mvn.w	r2, #4
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd f95c 	bl	8000774 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd f9aa 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 ff5b 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d122      	bne.n	8003524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d11b      	bne.n	8003524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0208 	mvn.w	r2, #8
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2204      	movs	r2, #4
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd f932 	bl	8000774 <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd f980 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 ff31 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b10      	cmp	r3, #16
 8003530:	d122      	bne.n	8003578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b10      	cmp	r3, #16
 800353e:	d11b      	bne.n	8003578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0210 	mvn.w	r2, #16
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2208      	movs	r2, #8
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd f908 	bl	8000774 <HAL_TIM_IC_CaptureCallback>
 8003564:	e005      	b.n	8003572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd f956 	bl	8000818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 ff07 	bl	8004380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d10e      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0201 	mvn.w	r2, #1
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd f8ca 	bl	8000738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b80      	cmp	r3, #128	; 0x80
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	2b80      	cmp	r3, #128	; 0x80
 80035be:	d107      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f001 fc6e 	bl	8004eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fecc 	bl	8004394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b20      	cmp	r3, #32
 8003608:	d10e      	bne.n	8003628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d107      	bne.n	8003628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0220 	mvn.w	r2, #32
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f001 fc38 	bl	8004e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d010      	beq.n	8003668 <HAL_TIM_OC_ConfigChannel+0x38>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d00d      	beq.n	8003668 <HAL_TIM_OC_ConfigChannel+0x38>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b08      	cmp	r3, #8
 8003650:	d00a      	beq.n	8003668 <HAL_TIM_OC_ConfigChannel+0x38>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d007      	beq.n	8003668 <HAL_TIM_OC_ConfigChannel+0x38>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b3c      	cmp	r3, #60	; 0x3c
 800365c:	d004      	beq.n	8003668 <HAL_TIM_OC_ConfigChannel+0x38>
 800365e:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8003662:	4886      	ldr	r0, [pc, #536]	; (800387c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003664:	f7fd f993 	bl	800098e <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d018      	beq.n	80036a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b10      	cmp	r3, #16
 8003676:	d014      	beq.n	80036a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b20      	cmp	r3, #32
 800367e:	d010      	beq.n	80036a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b30      	cmp	r3, #48	; 0x30
 8003686:	d00c      	beq.n	80036a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d008      	beq.n	80036a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d004      	beq.n	80036a2 <HAL_TIM_OC_ConfigChannel+0x72>
 8003698:	f640 71c6 	movw	r1, #4038	; 0xfc6
 800369c:	4877      	ldr	r0, [pc, #476]	; (800387c <HAL_TIM_OC_ConfigChannel+0x24c>)
 800369e:	f7fd f976 	bl	800098e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_TIM_OC_ConfigChannel+0x8c>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d004      	beq.n	80036bc <HAL_TIM_OC_ConfigChannel+0x8c>
 80036b2:	f640 71c7 	movw	r1, #4039	; 0xfc7
 80036b6:	4871      	ldr	r0, [pc, #452]	; (800387c <HAL_TIM_OC_ConfigChannel+0x24c>)
 80036b8:	f7fd f969 	bl	800098e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_OC_ConfigChannel+0x9a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0d4      	b.n	8003874 <HAL_TIM_OC_ConfigChannel+0x244>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	f200 80c5 	bhi.w	8003864 <HAL_TIM_OC_ConfigChannel+0x234>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <HAL_TIM_OC_ConfigChannel+0xb0>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	08003715 	.word	0x08003715
 80036e4:	08003865 	.word	0x08003865
 80036e8:	08003865 	.word	0x08003865
 80036ec:	08003865 	.word	0x08003865
 80036f0:	0800377d 	.word	0x0800377d
 80036f4:	08003865 	.word	0x08003865
 80036f8:	08003865 	.word	0x08003865
 80036fc:	08003865 	.word	0x08003865
 8003700:	080037d1 	.word	0x080037d1
 8003704:	08003865 	.word	0x08003865
 8003708:	08003865 	.word	0x08003865
 800370c:	08003865 	.word	0x08003865
 8003710:	0800381b 	.word	0x0800381b
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a59      	ldr	r2, [pc, #356]	; (8003880 <HAL_TIM_OC_ConfigChannel+0x250>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d027      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d022      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a55      	ldr	r2, [pc, #340]	; (8003884 <HAL_TIM_OC_ConfigChannel+0x254>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d01d      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a54      	ldr	r2, [pc, #336]	; (8003888 <HAL_TIM_OC_ConfigChannel+0x258>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d018      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_TIM_OC_ConfigChannel+0x25c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a51      	ldr	r2, [pc, #324]	; (8003890 <HAL_TIM_OC_ConfigChannel+0x260>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00e      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a4f      	ldr	r2, [pc, #316]	; (8003894 <HAL_TIM_OC_ConfigChannel+0x264>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d009      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a4e      	ldr	r2, [pc, #312]	; (8003898 <HAL_TIM_OC_ConfigChannel+0x268>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_TIM_OC_ConfigChannel+0x13e>
 8003764:	f640 71d1 	movw	r1, #4049	; 0xfd1
 8003768:	4844      	ldr	r0, [pc, #272]	; (800387c <HAL_TIM_OC_ConfigChannel+0x24c>)
 800376a:	f7fd f910 	bl	800098e <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fe97 	bl	80044a8 <TIM_OC1_SetConfig>
      break;
 800377a:	e076      	b.n	800386a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3f      	ldr	r2, [pc, #252]	; (8003880 <HAL_TIM_OC_ConfigChannel+0x250>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01d      	beq.n	80037c2 <HAL_TIM_OC_ConfigChannel+0x192>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378e:	d018      	beq.n	80037c2 <HAL_TIM_OC_ConfigChannel+0x192>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <HAL_TIM_OC_ConfigChannel+0x254>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_TIM_OC_ConfigChannel+0x192>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3a      	ldr	r2, [pc, #232]	; (8003888 <HAL_TIM_OC_ConfigChannel+0x258>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIM_OC_ConfigChannel+0x192>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a38      	ldr	r2, [pc, #224]	; (800388c <HAL_TIM_OC_ConfigChannel+0x25c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_TIM_OC_ConfigChannel+0x192>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a37      	ldr	r2, [pc, #220]	; (8003890 <HAL_TIM_OC_ConfigChannel+0x260>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIM_OC_ConfigChannel+0x192>
 80037b8:	f640 71db 	movw	r1, #4059	; 0xfdb
 80037bc:	482f      	ldr	r0, [pc, #188]	; (800387c <HAL_TIM_OC_ConfigChannel+0x24c>)
 80037be:	f7fd f8e6 	bl	800098e <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fefd 	bl	80045c8 <TIM_OC2_SetConfig>
      break;
 80037ce:	e04c      	b.n	800386a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <HAL_TIM_OC_ConfigChannel+0x250>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <HAL_TIM_OC_ConfigChannel+0x1dc>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d013      	beq.n	800380c <HAL_TIM_OC_ConfigChannel+0x1dc>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_TIM_OC_ConfigChannel+0x254>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_TIM_OC_ConfigChannel+0x1dc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a25      	ldr	r2, [pc, #148]	; (8003888 <HAL_TIM_OC_ConfigChannel+0x258>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_TIM_OC_ConfigChannel+0x1dc>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_TIM_OC_ConfigChannel+0x25c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_TIM_OC_ConfigChannel+0x1dc>
 8003802:	f640 71e5 	movw	r1, #4069	; 0xfe5
 8003806:	481d      	ldr	r0, [pc, #116]	; (800387c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003808:	f7fd f8c1 	bl	800098e <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ff6c 	bl	80046f0 <TIM_OC3_SetConfig>
      break;
 8003818:	e027      	b.n	800386a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_TIM_OC_ConfigChannel+0x250>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d018      	beq.n	8003856 <HAL_TIM_OC_ConfigChannel+0x226>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d013      	beq.n	8003856 <HAL_TIM_OC_ConfigChannel+0x226>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_TIM_OC_ConfigChannel+0x254>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_TIM_OC_ConfigChannel+0x226>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a12      	ldr	r2, [pc, #72]	; (8003888 <HAL_TIM_OC_ConfigChannel+0x258>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_TIM_OC_ConfigChannel+0x226>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <HAL_TIM_OC_ConfigChannel+0x25c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_TIM_OC_ConfigChannel+0x226>
 800384c:	f640 71ef 	movw	r1, #4079	; 0xfef
 8003850:	480a      	ldr	r0, [pc, #40]	; (800387c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003852:	f7fd f89c 	bl	800098e <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 ffdb 	bl	8004818 <TIM_OC4_SetConfig>
      break;
 8003862:	e002      	b.n	800386a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    default:
      status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
      break;
 8003868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	080070e4 	.word	0x080070e4
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a8a      	ldr	r2, [pc, #552]	; (8003adc <HAL_TIM_IC_ConfigChannel+0x240>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d022      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a86      	ldr	r2, [pc, #536]	; (8003ae0 <HAL_TIM_IC_ConfigChannel+0x244>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a85      	ldr	r2, [pc, #532]	; (8003ae4 <HAL_TIM_IC_ConfigChannel+0x248>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a83      	ldr	r2, [pc, #524]	; (8003ae8 <HAL_TIM_IC_ConfigChannel+0x24c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a82      	ldr	r2, [pc, #520]	; (8003aec <HAL_TIM_IC_ConfigChannel+0x250>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a80      	ldr	r2, [pc, #512]	; (8003af0 <HAL_TIM_IC_ConfigChannel+0x254>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7f      	ldr	r2, [pc, #508]	; (8003af4 <HAL_TIM_IC_ConfigChannel+0x258>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038fc:	f241 0112 	movw	r1, #4114	; 0x1012
 8003900:	487d      	ldr	r0, [pc, #500]	; (8003af8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003902:	f7fd f844 	bl	800098e <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_TIM_IC_ConfigChannel+0x8c>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d008      	beq.n	8003928 <HAL_TIM_IC_ConfigChannel+0x8c>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b0a      	cmp	r3, #10
 800391c:	d004      	beq.n	8003928 <HAL_TIM_IC_ConfigChannel+0x8c>
 800391e:	f241 0113 	movw	r1, #4115	; 0x1013
 8003922:	4875      	ldr	r0, [pc, #468]	; (8003af8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003924:	f7fd f833 	bl	800098e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d00c      	beq.n	800394a <HAL_TIM_IC_ConfigChannel+0xae>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d008      	beq.n	800394a <HAL_TIM_IC_ConfigChannel+0xae>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d004      	beq.n	800394a <HAL_TIM_IC_ConfigChannel+0xae>
 8003940:	f241 0114 	movw	r1, #4116	; 0x1014
 8003944:	486c      	ldr	r0, [pc, #432]	; (8003af8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003946:	f7fd f822 	bl	800098e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <HAL_TIM_IC_ConfigChannel+0xd8>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b04      	cmp	r3, #4
 8003958:	d00c      	beq.n	8003974 <HAL_TIM_IC_ConfigChannel+0xd8>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b08      	cmp	r3, #8
 8003960:	d008      	beq.n	8003974 <HAL_TIM_IC_ConfigChannel+0xd8>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d004      	beq.n	8003974 <HAL_TIM_IC_ConfigChannel+0xd8>
 800396a:	f241 0115 	movw	r1, #4117	; 0x1015
 800396e:	4862      	ldr	r0, [pc, #392]	; (8003af8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003970:	f7fd f80d 	bl	800098e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d904      	bls.n	8003986 <HAL_TIM_IC_ConfigChannel+0xea>
 800397c:	f241 0116 	movw	r1, #4118	; 0x1016
 8003980:	485d      	ldr	r0, [pc, #372]	; (8003af8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003982:	f7fd f804 	bl	800098e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIM_IC_ConfigChannel+0xf8>
 8003990:	2302      	movs	r3, #2
 8003992:	e0f8      	b.n	8003b86 <HAL_TIM_IC_ConfigChannel+0x2ea>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d11b      	bne.n	80039da <HAL_TIM_IC_ConfigChannel+0x13e>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f000 ff8f 	bl	80048d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 020c 	bic.w	r2, r2, #12
 80039c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6999      	ldr	r1, [r3, #24]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	619a      	str	r2, [r3, #24]
 80039d8:	e0d0      	b.n	8003b7c <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d13f      	bne.n	8003a60 <HAL_TIM_IC_ConfigChannel+0x1c4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a3d      	ldr	r2, [pc, #244]	; (8003adc <HAL_TIM_IC_ConfigChannel+0x240>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f2:	d018      	beq.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <HAL_TIM_IC_ConfigChannel+0x244>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a38      	ldr	r2, [pc, #224]	; (8003ae4 <HAL_TIM_IC_ConfigChannel+0x248>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x18a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a36      	ldr	r2, [pc, #216]	; (8003ae8 <HAL_TIM_IC_ConfigChannel+0x24c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x18a>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a35      	ldr	r2, [pc, #212]	; (8003aec <HAL_TIM_IC_ConfigChannel+0x250>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_TIM_IC_ConfigChannel+0x18a>
 8003a1c:	f241 012c 	movw	r1, #4140	; 0x102c
 8003a20:	4835      	ldr	r0, [pc, #212]	; (8003af8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003a22:	f7fc ffb4 	bl	800098e <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f000 ffe4 	bl	8004a02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6999      	ldr	r1, [r3, #24]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	021a      	lsls	r2, r3, #8
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	619a      	str	r2, [r3, #24]
 8003a5e:	e08d      	b.n	8003b7c <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d14a      	bne.n	8003afc <HAL_TIM_IC_ConfigChannel+0x260>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_TIM_IC_ConfigChannel+0x240>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d013      	beq.n	8003aa2 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_TIM_IC_ConfigChannel+0x244>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <HAL_TIM_IC_ConfigChannel+0x248>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <HAL_TIM_IC_ConfigChannel+0x24c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a98:	f241 013c 	movw	r1, #4156	; 0x103c
 8003a9c:	4816      	ldr	r0, [pc, #88]	; (8003af8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003a9e:	f7fc ff76 	bl	800098e <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f001 f813 	bl	8004adc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 020c 	bic.w	r2, r2, #12
 8003ac4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69d9      	ldr	r1, [r3, #28]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	61da      	str	r2, [r3, #28]
 8003ad8:	e050      	b.n	8003b7c <HAL_TIM_IC_ConfigChannel+0x2e0>
 8003ada:	bf00      	nop
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800
 8003af8:	080070e4 	.word	0x080070e4
  }
  else if (Channel == TIM_CHANNEL_4)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b0c      	cmp	r3, #12
 8003b00:	d13a      	bne.n	8003b78 <HAL_TIM_IC_ConfigChannel+0x2dc>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_TIM_IC_ConfigChannel+0x2f4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d018      	beq.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b14:	d013      	beq.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1e      	ldr	r2, [pc, #120]	; (8003b94 <HAL_TIM_IC_ConfigChannel+0x2f8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00e      	beq.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <HAL_TIM_IC_ConfigChannel+0x2fc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d009      	beq.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_TIM_IC_ConfigChannel+0x300>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d004      	beq.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003b34:	f241 014c 	movw	r1, #4172	; 0x104c
 8003b38:	4819      	ldr	r0, [pc, #100]	; (8003ba0 <HAL_TIM_IC_ConfigChannel+0x304>)
 8003b3a:	f7fc ff28 	bl	800098e <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f001 f801 	bl	8004b54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69d9      	ldr	r1, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	61da      	str	r2, [r3, #28]
 8003b76:	e001      	b.n	8003b7c <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else
  {
    status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40010000 	.word	0x40010000
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	080070e4 	.word	0x080070e4

08003ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e2f0      	b.n	80041a2 <HAL_TIM_ConfigClockSource+0x5fe>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d029      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b70      	cmp	r3, #112	; 0x70
 8003be0:	d025      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bea:	d020      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d01c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b50      	cmp	r3, #80	; 0x50
 8003bfa:	d018      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b60      	cmp	r3, #96	; 0x60
 8003c02:	d014      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d00c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d008      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b30      	cmp	r3, #48	; 0x30
 8003c22:	d004      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8a>
 8003c24:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8003c28:	487c      	ldr	r0, [pc, #496]	; (8003e1c <HAL_TIM_ConfigClockSource+0x278>)
 8003c2a:	f7fc feb0 	bl	800098e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	f000 80f1 	beq.w	8003e3c <HAL_TIM_ConfigClockSource+0x298>
 8003c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5e:	f200 8293 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c66:	d02d      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0x120>
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	f200 828c 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c70:	2b70      	cmp	r3, #112	; 0x70
 8003c72:	d05d      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0x18c>
 8003c74:	2b70      	cmp	r3, #112	; 0x70
 8003c76:	f200 8287 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c7a:	2b60      	cmp	r3, #96	; 0x60
 8003c7c:	f000 81a0 	beq.w	8003fc0 <HAL_TIM_ConfigClockSource+0x41c>
 8003c80:	2b60      	cmp	r3, #96	; 0x60
 8003c82:	f200 8281 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c86:	2b50      	cmp	r3, #80	; 0x50
 8003c88:	f000 8144 	beq.w	8003f14 <HAL_TIM_ConfigClockSource+0x370>
 8003c8c:	2b50      	cmp	r3, #80	; 0x50
 8003c8e:	f200 827b 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	f000 81f6 	beq.w	8004084 <HAL_TIM_ConfigClockSource+0x4e0>
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	f200 8275 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c9e:	2b30      	cmp	r3, #48	; 0x30
 8003ca0:	f000 8246 	beq.w	8004130 <HAL_TIM_ConfigClockSource+0x58c>
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	f200 826f 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	f000 8240 	beq.w	8004130 <HAL_TIM_ConfigClockSource+0x58c>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	f200 8269 	bhi.w	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 823a 	beq.w	8004130 <HAL_TIM_ConfigClockSource+0x58c>
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	f000 8237 	beq.w	8004130 <HAL_TIM_ConfigClockSource+0x58c>
 8003cc2:	e261      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a55      	ldr	r2, [pc, #340]	; (8003e20 <HAL_TIM_ConfigClockSource+0x27c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	f000 825f 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	f000 8259 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a50      	ldr	r2, [pc, #320]	; (8003e24 <HAL_TIM_ConfigClockSource+0x280>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	f000 8253 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4e      	ldr	r2, [pc, #312]	; (8003e28 <HAL_TIM_ConfigClockSource+0x284>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	f000 824d 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a4c      	ldr	r2, [pc, #304]	; (8003e2c <HAL_TIM_ConfigClockSource+0x288>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	f000 8247 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4a      	ldr	r2, [pc, #296]	; (8003e30 <HAL_TIM_ConfigClockSource+0x28c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f000 8241 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a48      	ldr	r2, [pc, #288]	; (8003e34 <HAL_TIM_ConfigClockSource+0x290>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	f000 823b 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a46      	ldr	r2, [pc, #280]	; (8003e38 <HAL_TIM_ConfigClockSource+0x294>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f000 8235 	beq.w	800418e <HAL_TIM_ConfigClockSource+0x5ea>
 8003d24:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8003d28:	483c      	ldr	r0, [pc, #240]	; (8003e1c <HAL_TIM_ConfigClockSource+0x278>)
 8003d2a:	f7fc fe30 	bl	800098e <assert_failed>
      break;
 8003d2e:	e22e      	b.n	800418e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a3a      	ldr	r2, [pc, #232]	; (8003e20 <HAL_TIM_ConfigClockSource+0x27c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01d      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d018      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a36      	ldr	r2, [pc, #216]	; (8003e24 <HAL_TIM_ConfigClockSource+0x280>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a35      	ldr	r2, [pc, #212]	; (8003e28 <HAL_TIM_ConfigClockSource+0x284>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <HAL_TIM_ConfigClockSource+0x288>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a32      	ldr	r2, [pc, #200]	; (8003e30 <HAL_TIM_ConfigClockSource+0x28c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d6c:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8003d70:	482a      	ldr	r0, [pc, #168]	; (8003e1c <HAL_TIM_ConfigClockSource+0x278>)
 8003d72:	f7fc fe0c 	bl	800098e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d013      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x202>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d86:	d00e      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x202>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d90:	d009      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x202>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x202>
 8003d9c:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8003da0:	481e      	ldr	r0, [pc, #120]	; (8003e1c <HAL_TIM_ConfigClockSource+0x278>)
 8003da2:	f7fc fdf4 	bl	800098e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dae:	d014      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x236>
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x236>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00c      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x236>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d008      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x236>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b0a      	cmp	r3, #10
 8003dce:	d004      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x236>
 8003dd0:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8003dd4:	4811      	ldr	r0, [pc, #68]	; (8003e1c <HAL_TIM_ConfigClockSource+0x278>)
 8003dd6:	f7fc fdda 	bl	800098e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d904      	bls.n	8003dec <HAL_TIM_ConfigClockSource+0x248>
 8003de2:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8003de6:	480d      	ldr	r0, [pc, #52]	; (8003e1c <HAL_TIM_ConfigClockSource+0x278>)
 8003de8:	f7fc fdd1 	bl	800098e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6899      	ldr	r1, [r3, #8]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f000 ff02 	bl	8004c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
      break;
 8003e18:	e1ba      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x5ec>
 8003e1a:	bf00      	nop
 8003e1c:	080070e4 	.word	0x080070e4
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a8a      	ldr	r2, [pc, #552]	; (800406c <HAL_TIM_ConfigClockSource+0x4c8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d018      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4e:	d013      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a86      	ldr	r2, [pc, #536]	; (8004070 <HAL_TIM_ConfigClockSource+0x4cc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a85      	ldr	r2, [pc, #532]	; (8004074 <HAL_TIM_ConfigClockSource+0x4d0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a83      	ldr	r2, [pc, #524]	; (8004078 <HAL_TIM_ConfigClockSource+0x4d4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e6e:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8003e72:	4882      	ldr	r0, [pc, #520]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003e74:	f7fc fd8b 	bl	800098e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0x304>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e88:	d00e      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0x304>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e92:	d009      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0x304>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e9c:	d004      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0x304>
 8003e9e:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8003ea2:	4876      	ldr	r0, [pc, #472]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003ea4:	f7fc fd73 	bl	800098e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb0:	d014      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x338>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x338>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x338>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d008      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x338>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b0a      	cmp	r3, #10
 8003ed0:	d004      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x338>
 8003ed2:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8003ed6:	4869      	ldr	r0, [pc, #420]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003ed8:	f7fc fd59 	bl	800098e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d904      	bls.n	8003eee <HAL_TIM_ConfigClockSource+0x34a>
 8003ee4:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8003ee8:	4864      	ldr	r0, [pc, #400]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003eea:	f7fc fd50 	bl	800098e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6899      	ldr	r1, [r3, #8]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f000 fe81 	bl	8004c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e13d      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a54      	ldr	r2, [pc, #336]	; (800406c <HAL_TIM_ConfigClockSource+0x4c8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x3b6>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f26:	d018      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x3b6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a50      	ldr	r2, [pc, #320]	; (8004070 <HAL_TIM_ConfigClockSource+0x4cc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x3b6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a4f      	ldr	r2, [pc, #316]	; (8004074 <HAL_TIM_ConfigClockSource+0x4d0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x3b6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_TIM_ConfigClockSource+0x4d4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x3b6>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a4d      	ldr	r2, [pc, #308]	; (8004080 <HAL_TIM_ConfigClockSource+0x4dc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x3b6>
 8003f50:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8003f54:	4849      	ldr	r0, [pc, #292]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003f56:	f7fc fd1a 	bl	800098e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f62:	d014      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d008      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b0a      	cmp	r3, #10
 8003f82:	d004      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f84:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8003f88:	483c      	ldr	r0, [pc, #240]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003f8a:	f7fc fd00 	bl	800098e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	d904      	bls.n	8003fa0 <HAL_TIM_ConfigClockSource+0x3fc>
 8003f96:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8003f9a:	4838      	ldr	r0, [pc, #224]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003f9c:	f7fc fcf7 	bl	800098e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f000 fcf9 	bl	80049a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2150      	movs	r1, #80	; 0x50
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fe08 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 8003fbe:	e0e7      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a29      	ldr	r2, [pc, #164]	; (800406c <HAL_TIM_ConfigClockSource+0x4c8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d01d      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x462>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d018      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x462>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <HAL_TIM_ConfigClockSource+0x4cc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x462>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a24      	ldr	r2, [pc, #144]	; (8004074 <HAL_TIM_ConfigClockSource+0x4d0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x462>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_TIM_ConfigClockSource+0x4d4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x462>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a22      	ldr	r2, [pc, #136]	; (8004080 <HAL_TIM_ConfigClockSource+0x4dc>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0x462>
 8003ffc:	f241 5106 	movw	r1, #5382	; 0x1506
 8004000:	481e      	ldr	r0, [pc, #120]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004002:	f7fc fcc4 	bl	800098e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400e:	d014      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x496>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x496>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x496>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d008      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x496>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b0a      	cmp	r3, #10
 800402e:	d004      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x496>
 8004030:	f241 5109 	movw	r1, #5385	; 0x1509
 8004034:	4811      	ldr	r0, [pc, #68]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004036:	f7fc fcaa 	bl	800098e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b0f      	cmp	r3, #15
 8004040:	d904      	bls.n	800404c <HAL_TIM_ConfigClockSource+0x4a8>
 8004042:	f241 510a 	movw	r1, #5386	; 0x150a
 8004046:	480d      	ldr	r0, [pc, #52]	; (800407c <HAL_TIM_ConfigClockSource+0x4d8>)
 8004048:	f7fc fca1 	bl	800098e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	461a      	mov	r2, r3
 800405a:	f000 fd0f 	bl	8004a7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2160      	movs	r1, #96	; 0x60
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fdb2 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 800406a:	e091      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x5ec>
 800406c:	40010000 	.word	0x40010000
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	080070e4 	.word	0x080070e4
 8004080:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a48      	ldr	r2, [pc, #288]	; (80041ac <HAL_TIM_ConfigClockSource+0x608>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01d      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x526>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d018      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x526>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a44      	ldr	r2, [pc, #272]	; (80041b0 <HAL_TIM_ConfigClockSource+0x60c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x526>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a43      	ldr	r2, [pc, #268]	; (80041b4 <HAL_TIM_ConfigClockSource+0x610>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x526>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a41      	ldr	r2, [pc, #260]	; (80041b8 <HAL_TIM_ConfigClockSource+0x614>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d009      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x526>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a40      	ldr	r2, [pc, #256]	; (80041bc <HAL_TIM_ConfigClockSource+0x618>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x526>
 80040c0:	f241 5116 	movw	r1, #5398	; 0x1516
 80040c4:	483e      	ldr	r0, [pc, #248]	; (80041c0 <HAL_TIM_ConfigClockSource+0x61c>)
 80040c6:	f7fc fc62 	bl	800098e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d014      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x55a>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d010      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x55a>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00c      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x55a>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d008      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x55a>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b0a      	cmp	r3, #10
 80040f2:	d004      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x55a>
 80040f4:	f241 5119 	movw	r1, #5401	; 0x1519
 80040f8:	4831      	ldr	r0, [pc, #196]	; (80041c0 <HAL_TIM_ConfigClockSource+0x61c>)
 80040fa:	f7fc fc48 	bl	800098e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	d904      	bls.n	8004110 <HAL_TIM_ConfigClockSource+0x56c>
 8004106:	f241 511a 	movw	r1, #5402	; 0x151a
 800410a:	482d      	ldr	r0, [pc, #180]	; (80041c0 <HAL_TIM_ConfigClockSource+0x61c>)
 800410c:	f7fc fc3f 	bl	800098e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	461a      	mov	r2, r3
 800411e:	f000 fc41 	bl	80049a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2140      	movs	r1, #64	; 0x40
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fd50 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 800412e:	e02f      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <HAL_TIM_ConfigClockSource+0x608>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x5d2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d018      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x5d2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <HAL_TIM_ConfigClockSource+0x60c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x5d2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <HAL_TIM_ConfigClockSource+0x610>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x5d2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <HAL_TIM_ConfigClockSource+0x614>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x5d2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a15      	ldr	r2, [pc, #84]	; (80041bc <HAL_TIM_ConfigClockSource+0x618>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x5d2>
 800416c:	f241 5129 	movw	r1, #5417	; 0x1529
 8004170:	4813      	ldr	r0, [pc, #76]	; (80041c0 <HAL_TIM_ConfigClockSource+0x61c>)
 8004172:	f7fc fc0c 	bl	800098e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f000 fd24 	bl	8004bce <TIM_ITRx_SetConfig>
      break;
 8004186:	e003      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	e000      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800418e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	080070e4 	.word	0x080070e4

080041c4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	f200 80bd 	bhi.w	8004354 <HAL_TIM_ReadCapturedValue+0x190>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004215 	.word	0x08004215
 80041e4:	08004355 	.word	0x08004355
 80041e8:	08004355 	.word	0x08004355
 80041ec:	08004355 	.word	0x08004355
 80041f0:	08004279 	.word	0x08004279
 80041f4:	08004355 	.word	0x08004355
 80041f8:	08004355 	.word	0x08004355
 80041fc:	08004355 	.word	0x08004355
 8004200:	080042c9 	.word	0x080042c9
 8004204:	08004355 	.word	0x08004355
 8004208:	08004355 	.word	0x08004355
 800420c:	08004355 	.word	0x08004355
 8004210:	0800430f 	.word	0x0800430f
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a51      	ldr	r2, [pc, #324]	; (8004360 <HAL_TIM_ReadCapturedValue+0x19c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004226:	d022      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4d      	ldr	r2, [pc, #308]	; (8004364 <HAL_TIM_ReadCapturedValue+0x1a0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4c      	ldr	r2, [pc, #304]	; (8004368 <HAL_TIM_ReadCapturedValue+0x1a4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4a      	ldr	r2, [pc, #296]	; (800436c <HAL_TIM_ReadCapturedValue+0x1a8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a49      	ldr	r2, [pc, #292]	; (8004370 <HAL_TIM_ReadCapturedValue+0x1ac>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a47      	ldr	r2, [pc, #284]	; (8004374 <HAL_TIM_ReadCapturedValue+0x1b0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a46      	ldr	r2, [pc, #280]	; (8004378 <HAL_TIM_ReadCapturedValue+0x1b4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_TIM_ReadCapturedValue+0xaa>
 8004264:	f241 51c2 	movw	r1, #5570	; 0x15c2
 8004268:	4844      	ldr	r0, [pc, #272]	; (800437c <HAL_TIM_ReadCapturedValue+0x1b8>)
 800426a:	f7fc fb90 	bl	800098e <assert_failed>

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	60fb      	str	r3, [r7, #12]

      break;
 8004276:	e06e      	b.n	8004356 <HAL_TIM_ReadCapturedValue+0x192>
    }
    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a38      	ldr	r2, [pc, #224]	; (8004360 <HAL_TIM_ReadCapturedValue+0x19c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d01d      	beq.n	80042be <HAL_TIM_ReadCapturedValue+0xfa>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428a:	d018      	beq.n	80042be <HAL_TIM_ReadCapturedValue+0xfa>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a34      	ldr	r2, [pc, #208]	; (8004364 <HAL_TIM_ReadCapturedValue+0x1a0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d013      	beq.n	80042be <HAL_TIM_ReadCapturedValue+0xfa>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a33      	ldr	r2, [pc, #204]	; (8004368 <HAL_TIM_ReadCapturedValue+0x1a4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00e      	beq.n	80042be <HAL_TIM_ReadCapturedValue+0xfa>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a31      	ldr	r2, [pc, #196]	; (800436c <HAL_TIM_ReadCapturedValue+0x1a8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d009      	beq.n	80042be <HAL_TIM_ReadCapturedValue+0xfa>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a30      	ldr	r2, [pc, #192]	; (8004370 <HAL_TIM_ReadCapturedValue+0x1ac>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d004      	beq.n	80042be <HAL_TIM_ReadCapturedValue+0xfa>
 80042b4:	f241 51cc 	movw	r1, #5580	; 0x15cc
 80042b8:	4830      	ldr	r0, [pc, #192]	; (800437c <HAL_TIM_ReadCapturedValue+0x1b8>)
 80042ba:	f7fc fb68 	bl	800098e <assert_failed>

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	60fb      	str	r3, [r7, #12]

      break;
 80042c6:	e046      	b.n	8004356 <HAL_TIM_ReadCapturedValue+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <HAL_TIM_ReadCapturedValue+0x19c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d018      	beq.n	8004304 <HAL_TIM_ReadCapturedValue+0x140>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d013      	beq.n	8004304 <HAL_TIM_ReadCapturedValue+0x140>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a20      	ldr	r2, [pc, #128]	; (8004364 <HAL_TIM_ReadCapturedValue+0x1a0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00e      	beq.n	8004304 <HAL_TIM_ReadCapturedValue+0x140>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <HAL_TIM_ReadCapturedValue+0x1a4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_TIM_ReadCapturedValue+0x140>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <HAL_TIM_ReadCapturedValue+0x1a8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <HAL_TIM_ReadCapturedValue+0x140>
 80042fa:	f241 51d7 	movw	r1, #5591	; 0x15d7
 80042fe:	481f      	ldr	r0, [pc, #124]	; (800437c <HAL_TIM_ReadCapturedValue+0x1b8>)
 8004300:	f7fc fb45 	bl	800098e <assert_failed>

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	60fb      	str	r3, [r7, #12]

      break;
 800430c:	e023      	b.n	8004356 <HAL_TIM_ReadCapturedValue+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <HAL_TIM_ReadCapturedValue+0x19c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d018      	beq.n	800434a <HAL_TIM_ReadCapturedValue+0x186>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d013      	beq.n	800434a <HAL_TIM_ReadCapturedValue+0x186>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a0f      	ldr	r2, [pc, #60]	; (8004364 <HAL_TIM_ReadCapturedValue+0x1a0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_TIM_ReadCapturedValue+0x186>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <HAL_TIM_ReadCapturedValue+0x1a4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_TIM_ReadCapturedValue+0x186>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <HAL_TIM_ReadCapturedValue+0x1a8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_TIM_ReadCapturedValue+0x186>
 8004340:	f241 51e2 	movw	r1, #5602	; 0x15e2
 8004344:	480d      	ldr	r0, [pc, #52]	; (800437c <HAL_TIM_ReadCapturedValue+0x1b8>)
 8004346:	f7fc fb22 	bl	800098e <assert_failed>

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	60fb      	str	r3, [r7, #12]

      break;
 8004352:	e000      	b.n	8004356 <HAL_TIM_ReadCapturedValue+0x192>
    }

    default:
      break;
 8004354:	bf00      	nop
  }

  return tmpreg;
 8004356:	68fb      	ldr	r3, [r7, #12]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40010000 	.word	0x40010000
 8004364:	40000400 	.word	0x40000400
 8004368:	40000800 	.word	0x40000800
 800436c:	40000c00 	.word	0x40000c00
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800
 800437c:	080070e4 	.word	0x080070e4

08004380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a34      	ldr	r2, [pc, #208]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00f      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d00b      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a31      	ldr	r2, [pc, #196]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a30      	ldr	r2, [pc, #192]	; (8004494 <TIM_Base_SetConfig+0xec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_Base_SetConfig+0x38>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a25      	ldr	r2, [pc, #148]	; (800448c <TIM_Base_SetConfig+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004400:	d017      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <TIM_Base_SetConfig+0xe8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a21      	ldr	r2, [pc, #132]	; (8004494 <TIM_Base_SetConfig+0xec>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00f      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a20      	ldr	r2, [pc, #128]	; (8004498 <TIM_Base_SetConfig+0xf0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00b      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <TIM_Base_SetConfig+0xf4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <TIM_Base_SetConfig+0xf8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1d      	ldr	r2, [pc, #116]	; (80044a4 <TIM_Base_SetConfig+0xfc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d108      	bne.n	8004444 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a08      	ldr	r2, [pc, #32]	; (800448c <TIM_Base_SetConfig+0xe4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d103      	bne.n	8004478 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	615a      	str	r2, [r3, #20]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000
 80044a0:	40014400 	.word	0x40014400
 80044a4:	40014800 	.word	0x40014800

080044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0302 	bic.w	r3, r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a30      	ldr	r2, [pc, #192]	; (80045c0 <TIM_OC1_SetConfig+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d119      	bne.n	8004538 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <TIM_OC1_SetConfig+0x76>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d004      	beq.n	800451e <TIM_OC1_SetConfig+0x76>
 8004514:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8004518:	482a      	ldr	r0, [pc, #168]	; (80045c4 <TIM_OC1_SetConfig+0x11c>)
 800451a:	f7fc fa38 	bl	800098e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 0308 	bic.w	r3, r3, #8
 8004524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0304 	bic.w	r3, r3, #4
 8004536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a21      	ldr	r2, [pc, #132]	; (80045c0 <TIM_OC1_SetConfig+0x118>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d12d      	bne.n	800459c <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004548:	d008      	beq.n	800455c <TIM_OC1_SetConfig+0xb4>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <TIM_OC1_SetConfig+0xb4>
 8004552:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8004556:	481b      	ldr	r0, [pc, #108]	; (80045c4 <TIM_OC1_SetConfig+0x11c>)
 8004558:	f7fc fa19 	bl	800098e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004564:	d008      	beq.n	8004578 <TIM_OC1_SetConfig+0xd0>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d004      	beq.n	8004578 <TIM_OC1_SetConfig+0xd0>
 800456e:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8004572:	4814      	ldr	r0, [pc, #80]	; (80045c4 <TIM_OC1_SetConfig+0x11c>)
 8004574:	f7fc fa0b 	bl	800098e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800457e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40010000 	.word	0x40010000
 80045c4:	080070e4 	.word	0x080070e4

080045c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0210 	bic.w	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0320 	bic.w	r3, r3, #32
 8004612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a31      	ldr	r2, [pc, #196]	; (80046e8 <TIM_OC2_SetConfig+0x120>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d11a      	bne.n	800465e <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <TIM_OC2_SetConfig+0x7a>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d004      	beq.n	8004642 <TIM_OC2_SetConfig+0x7a>
 8004638:	f641 3112 	movw	r1, #6930	; 0x1b12
 800463c:	482b      	ldr	r0, [pc, #172]	; (80046ec <TIM_OC2_SetConfig+0x124>)
 800463e:	f7fc f9a6 	bl	800098e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <TIM_OC2_SetConfig+0x120>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d12f      	bne.n	80046c6 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466e:	d008      	beq.n	8004682 <TIM_OC2_SetConfig+0xba>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <TIM_OC2_SetConfig+0xba>
 8004678:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800467c:	481b      	ldr	r0, [pc, #108]	; (80046ec <TIM_OC2_SetConfig+0x124>)
 800467e:	f7fc f986 	bl	800098e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468a:	d008      	beq.n	800469e <TIM_OC2_SetConfig+0xd6>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <TIM_OC2_SetConfig+0xd6>
 8004694:	f641 3121 	movw	r1, #6945	; 0x1b21
 8004698:	4814      	ldr	r0, [pc, #80]	; (80046ec <TIM_OC2_SetConfig+0x124>)
 800469a:	f7fc f978 	bl	800098e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	621a      	str	r2, [r3, #32]
}
 80046e0:	bf00      	nop
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40010000 	.word	0x40010000
 80046ec:	080070e4 	.word	0x080070e4

080046f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a31      	ldr	r2, [pc, #196]	; (8004810 <TIM_OC3_SetConfig+0x120>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d11a      	bne.n	8004784 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <TIM_OC3_SetConfig+0x78>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b08      	cmp	r3, #8
 800475c:	d004      	beq.n	8004768 <TIM_OC3_SetConfig+0x78>
 800475e:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8004762:	482c      	ldr	r0, [pc, #176]	; (8004814 <TIM_OC3_SetConfig+0x124>)
 8004764:	f7fc f913 	bl	800098e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800476e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a22      	ldr	r2, [pc, #136]	; (8004810 <TIM_OC3_SetConfig+0x120>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d12f      	bne.n	80047ec <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004794:	d008      	beq.n	80047a8 <TIM_OC3_SetConfig+0xb8>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <TIM_OC3_SetConfig+0xb8>
 800479e:	f641 316a 	movw	r1, #7018	; 0x1b6a
 80047a2:	481c      	ldr	r0, [pc, #112]	; (8004814 <TIM_OC3_SetConfig+0x124>)
 80047a4:	f7fc f8f3 	bl	800098e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b0:	d008      	beq.n	80047c4 <TIM_OC3_SetConfig+0xd4>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <TIM_OC3_SetConfig+0xd4>
 80047ba:	f641 316b 	movw	r1, #7019	; 0x1b6b
 80047be:	4815      	ldr	r0, [pc, #84]	; (8004814 <TIM_OC3_SetConfig+0x124>)
 80047c0:	f7fc f8e5 	bl	800098e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40010000 	.word	0x40010000
 8004814:	080070e4 	.word	0x080070e4

08004818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	031b      	lsls	r3, r3, #12
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a16      	ldr	r2, [pc, #88]	; (80048cc <TIM_OC4_SetConfig+0xb4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d117      	bne.n	80048a8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004880:	d008      	beq.n	8004894 <TIM_OC4_SetConfig+0x7c>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <TIM_OC4_SetConfig+0x7c>
 800488a:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 800488e:	4810      	ldr	r0, [pc, #64]	; (80048d0 <TIM_OC4_SetConfig+0xb8>)
 8004890:	f7fc f87d 	bl	800098e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40010000 	.word	0x40010000
 80048d0:	080070e4 	.word	0x080070e4

080048d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a24      	ldr	r2, [pc, #144]	; (8004990 <TIM_TI1_SetConfig+0xbc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <TIM_TI1_SetConfig+0x56>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d00f      	beq.n	800492a <TIM_TI1_SetConfig+0x56>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a21      	ldr	r2, [pc, #132]	; (8004994 <TIM_TI1_SetConfig+0xc0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00b      	beq.n	800492a <TIM_TI1_SetConfig+0x56>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a20      	ldr	r2, [pc, #128]	; (8004998 <TIM_TI1_SetConfig+0xc4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_TI1_SetConfig+0x56>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <TIM_TI1_SetConfig+0xc8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_TI1_SetConfig+0x56>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <TIM_TI1_SetConfig+0xcc>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <TIM_TI1_SetConfig+0x5a>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <TIM_TI1_SetConfig+0x5c>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e003      	b.n	800494e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	b2db      	uxtb	r3, r3
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f023 030a 	bic.w	r3, r3, #10
 8004968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 030a 	and.w	r3, r3, #10
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40014000 	.word	0x40014000

080049a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f023 0201 	bic.w	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f023 030a 	bic.w	r3, r3, #10
 80049e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b087      	sub	sp, #28
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	f023 0210 	bic.w	r2, r3, #16
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	621a      	str	r2, [r3, #32]
}
 8004a70:	bf00      	nop
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f023 0210 	bic.w	r2, r3, #16
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	031b      	lsls	r3, r3, #12
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	621a      	str	r2, [r3, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 0303 	bic.w	r3, r3, #3
 8004b08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	621a      	str	r2, [r3, #32]
}
 8004b48:	bf00      	nop
 8004b4a:	371c      	adds	r7, #28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	031b      	lsls	r3, r3, #12
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	031b      	lsls	r3, r3, #12
 8004bac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f043 0307 	orr.w	r3, r3, #7
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	609a      	str	r2, [r3, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	021a      	lsls	r2, r3, #8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	609a      	str	r2, [r3, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <TIM_CCxChannelCmd+0xb8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d020      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d01c      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a27      	ldr	r2, [pc, #156]	; (8004d00 <TIM_CCxChannelCmd+0xbc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d018      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <TIM_CCxChannelCmd+0xc0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d014      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <TIM_CCxChannelCmd+0xc4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d010      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <TIM_CCxChannelCmd+0xc8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00c      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <TIM_CCxChannelCmd+0xcc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d008      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <TIM_CCxChannelCmd+0xd0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <TIM_CCxChannelCmd+0x56>
 8004c90:	f641 5194 	movw	r1, #7572	; 0x1d94
 8004c94:	4820      	ldr	r0, [pc, #128]	; (8004d18 <TIM_CCxChannelCmd+0xd4>)
 8004c96:	f7fb fe7a 	bl	800098e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d010      	beq.n	8004cc2 <TIM_CCxChannelCmd+0x7e>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d00d      	beq.n	8004cc2 <TIM_CCxChannelCmd+0x7e>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d00a      	beq.n	8004cc2 <TIM_CCxChannelCmd+0x7e>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d007      	beq.n	8004cc2 <TIM_CCxChannelCmd+0x7e>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b3c      	cmp	r3, #60	; 0x3c
 8004cb6:	d004      	beq.n	8004cc2 <TIM_CCxChannelCmd+0x7e>
 8004cb8:	f641 5195 	movw	r1, #7573	; 0x1d95
 8004cbc:	4816      	ldr	r0, [pc, #88]	; (8004d18 <TIM_CCxChannelCmd+0xd4>)
 8004cbe:	f7fb fe66 	bl	800098e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f003 031f 	and.w	r3, r3, #31
 8004cc8:	2201      	movs	r2, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1a      	ldr	r2, [r3, #32]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	401a      	ands	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a1a      	ldr	r2, [r3, #32]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	fa01 f303 	lsl.w	r3, r1, r3
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40010000 	.word	0x40010000
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800
 8004d18:	080070e4 	.word	0x080070e4

08004d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a55      	ldr	r2, [pc, #340]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d38:	d013      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a51      	ldr	r2, [pc, #324]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a4f      	ldr	r2, [pc, #316]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a4e      	ldr	r2, [pc, #312]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004d58:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8004d5c:	484c      	ldr	r0, [pc, #304]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004d5e:	f7fb fe16 	bl	800098e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d020      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d01c      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d018      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d014      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d010      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b50      	cmp	r3, #80	; 0x50
 8004d90:	d00c      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b60      	cmp	r3, #96	; 0x60
 8004d98:	d008      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b70      	cmp	r3, #112	; 0x70
 8004da0:	d004      	beq.n	8004dac <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004da2:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8004da6:	483a      	ldr	r0, [pc, #232]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004da8:	f7fb fdf1 	bl	800098e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b80      	cmp	r3, #128	; 0x80
 8004db2:	d008      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8004dbc:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8004dc0:	4833      	ldr	r0, [pc, #204]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004dc2:	f7fb fde4 	bl	800098e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e050      	b.n	8004e76 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d018      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d013      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00e      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a15      	ldr	r2, [pc, #84]	; (8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d009      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d004      	beq.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d10c      	bne.n	8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	0800711c 	.word	0x0800711c
 8004e94:	40014000 	.word	0x40014000

08004e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0a0      	b.n	8005014 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02c      	beq.n	8004f34 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a4f      	ldr	r2, [pc, #316]	; (800501c <HAL_UART_Init+0x15c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_UART_Init+0x42>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a4d      	ldr	r2, [pc, #308]	; (8005020 <HAL_UART_Init+0x160>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <HAL_UART_Init+0x42>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a4c      	ldr	r2, [pc, #304]	; (8005024 <HAL_UART_Init+0x164>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_UART_Init+0x42>
 8004ef8:	f240 1173 	movw	r1, #371	; 0x173
 8004efc:	484a      	ldr	r0, [pc, #296]	; (8005028 <HAL_UART_Init+0x168>)
 8004efe:	f7fb fd46 	bl	800098e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d028      	beq.n	8004f5c <HAL_UART_Init+0x9c>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f12:	d023      	beq.n	8004f5c <HAL_UART_Init+0x9c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1c:	d01e      	beq.n	8004f5c <HAL_UART_Init+0x9c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f26:	d019      	beq.n	8004f5c <HAL_UART_Init+0x9c>
 8004f28:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004f2c:	483e      	ldr	r0, [pc, #248]	; (8005028 <HAL_UART_Init+0x168>)
 8004f2e:	f7fb fd2e 	bl	800098e <assert_failed>
 8004f32:	e013      	b.n	8004f5c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a38      	ldr	r2, [pc, #224]	; (800501c <HAL_UART_Init+0x15c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_UART_Init+0x9c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a37      	ldr	r2, [pc, #220]	; (8005020 <HAL_UART_Init+0x160>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_UART_Init+0x9c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <HAL_UART_Init+0x164>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_UART_Init+0x9c>
 8004f52:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8004f56:	4834      	ldr	r0, [pc, #208]	; (8005028 <HAL_UART_Init+0x168>)
 8004f58:	f7fb fd19 	bl	800098e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <HAL_UART_Init+0xb8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6c:	d004      	beq.n	8004f78 <HAL_UART_Init+0xb8>
 8004f6e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004f72:	482d      	ldr	r0, [pc, #180]	; (8005028 <HAL_UART_Init+0x168>)
 8004f74:	f7fb fd0b 	bl	800098e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_UART_Init+0xd4>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	d004      	beq.n	8004f94 <HAL_UART_Init+0xd4>
 8004f8a:	f240 117b 	movw	r1, #379	; 0x17b
 8004f8e:	4826      	ldr	r0, [pc, #152]	; (8005028 <HAL_UART_Init+0x168>)
 8004f90:	f7fb fcfd 	bl	800098e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fc f867 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2224      	movs	r2, #36	; 0x24
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fd82 	bl	8005ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fda:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40011000 	.word	0x40011000
 8005020:	40004400 	.word	0x40004400
 8005024:	40011400 	.word	0x40011400
 8005028:	08007158 	.word	0x08007158

0800502c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b20      	cmp	r3, #32
 800504a:	d17c      	bne.n	8005146 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_UART_Transmit+0x2c>
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e075      	b.n	8005148 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_UART_Transmit+0x3e>
 8005066:	2302      	movs	r3, #2
 8005068:	e06e      	b.n	8005148 <HAL_UART_Transmit+0x11c>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2221      	movs	r2, #33	; 0x21
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005080:	f7fc f8dc 	bl	800123c <HAL_GetTick>
 8005084:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	d108      	bne.n	80050ae <HAL_UART_Transmit+0x82>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	e003      	b.n	80050b6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050be:	e02a      	b.n	8005116 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2200      	movs	r2, #0
 80050c8:	2180      	movs	r1, #128	; 0x80
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 faf8 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e036      	b.n	8005148 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3302      	adds	r3, #2
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e007      	b.n	8005108 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3301      	adds	r3, #1
 8005106:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1cf      	bne.n	80050c0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fac8 	bl	80056c0 <UART_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e006      	b.n	8005148 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b0ba      	sub	sp, #232	; 0xe8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005176:	2300      	movs	r3, #0
 8005178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800517c:	2300      	movs	r3, #0
 800517e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800518e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10f      	bne.n	80051b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 0320 	and.w	r3, r3, #32
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_UART_IRQHandler+0x66>
 80051a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fbd3 	bl	800595a <UART_Receive_IT>
      return;
 80051b4:	e256      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80de 	beq.w	800537c <HAL_UART_IRQHandler+0x22c>
 80051c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80d1 	beq.w	800537c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_UART_IRQHandler+0xae>
 80051e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d005      	beq.n	80051fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f043 0201 	orr.w	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_UART_IRQHandler+0xd2>
 800520a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <HAL_UART_IRQHandler+0xf6>
 800522e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d011      	beq.n	8005276 <HAL_UART_IRQHandler+0x126>
 8005252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800525e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f043 0208 	orr.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 81ed 	beq.w	800565a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_UART_IRQHandler+0x14e>
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb5e 	bl	800595a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d103      	bne.n	80052ca <HAL_UART_IRQHandler+0x17a>
 80052c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d04f      	beq.n	800536a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa66 	bl	800579c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d141      	bne.n	8005362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3314      	adds	r3, #20
 80052e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3314      	adds	r3, #20
 8005306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800530a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800530e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1d9      	bne.n	80052de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	2b00      	cmp	r3, #0
 8005330:	d013      	beq.n	800535a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	4a7d      	ldr	r2, [pc, #500]	; (800552c <HAL_UART_IRQHandler+0x3dc>)
 8005338:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc f938 	bl	80015b4 <HAL_DMA_Abort_IT>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d016      	beq.n	8005378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005354:	4610      	mov	r0, r2
 8005356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005358:	e00e      	b.n	8005378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f99a 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	e00a      	b.n	8005378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f996 	bl	8005694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	e006      	b.n	8005378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f992 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005376:	e170      	b.n	800565a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005378:	bf00      	nop
    return;
 800537a:	e16e      	b.n	800565a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	f040 814a 	bne.w	800561a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8143 	beq.w	800561a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 813c 	beq.w	800561a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053a2:	2300      	movs	r3, #0
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	f040 80b4 	bne.w	8005530 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8140 	beq.w	800565e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053e6:	429a      	cmp	r2, r3
 80053e8:	f080 8139 	bcs.w	800565e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	f000 8088 	beq.w	8005512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800541c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800542e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800543a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d9      	bne.n	8005402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3314      	adds	r3, #20
 8005454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800545e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3314      	adds	r3, #20
 800546e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800547a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e1      	bne.n	800544e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800549a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e3      	bne.n	800548a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e2:	f023 0310 	bic.w	r3, r3, #16
 80054e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	330c      	adds	r3, #12
 80054f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80054f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e3      	bne.n	80054d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	4618      	mov	r0, r3
 800550e:	f7fb ffe1 	bl	80014d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551a:	b29b      	uxth	r3, r3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	b29b      	uxth	r3, r3
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8c0 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005528:	e099      	b.n	800565e <HAL_UART_IRQHandler+0x50e>
 800552a:	bf00      	nop
 800552c:	08005863 	.word	0x08005863
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005538:	b29b      	uxth	r3, r3
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 808b 	beq.w	8005662 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800554c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8086 	beq.w	8005662 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800556c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800557a:	647a      	str	r2, [r7, #68]	; 0x44
 800557c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e3      	bne.n	8005556 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	623b      	str	r3, [r7, #32]
   return(result);
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055b2:	633a      	str	r2, [r7, #48]	; 0x30
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e3      	bne.n	800558e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0310 	bic.w	r3, r3, #16
 80055ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055f8:	61fa      	str	r2, [r7, #28]
 80055fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	617b      	str	r3, [r7, #20]
   return(result);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e3      	bne.n	80055d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800560c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f848 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005618:	e023      	b.n	8005662 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_UART_IRQHandler+0x4ea>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f929 	bl	800588a <UART_Transmit_IT>
    return;
 8005638:	e014      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <HAL_UART_IRQHandler+0x514>
 8005646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f969 	bl	800592a <UART_EndTransmit_IT>
    return;
 8005658:	e004      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
    return;
 800565a:	bf00      	nop
 800565c:	e002      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
      return;
 800565e:	bf00      	nop
 8005660:	e000      	b.n	8005664 <HAL_UART_IRQHandler+0x514>
      return;
 8005662:	bf00      	nop
  }
}
 8005664:	37e8      	adds	r7, #232	; 0xe8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop

0800566c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b090      	sub	sp, #64	; 0x40
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d0:	e050      	b.n	8005774 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d04c      	beq.n	8005774 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056e0:	f7fb fdac 	bl	800123c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d241      	bcs.n	8005774 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005710:	637a      	str	r2, [r7, #52]	; 0x34
 8005712:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3314      	adds	r3, #20
 800572a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	613b      	str	r3, [r7, #16]
   return(result);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3314      	adds	r3, #20
 8005742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005744:	623a      	str	r2, [r7, #32]
 8005746:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	69f9      	ldr	r1, [r7, #28]
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	61bb      	str	r3, [r7, #24]
   return(result);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e5      	bne.n	8005724 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e00f      	b.n	8005794 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4013      	ands	r3, r2
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	429a      	cmp	r2, r3
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	429a      	cmp	r2, r3
 8005790:	d09f      	beq.n	80056d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3740      	adds	r7, #64	; 0x40
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b095      	sub	sp, #84	; 0x54
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057c4:	643a      	str	r2, [r7, #64]	; 0x40
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	2b01      	cmp	r3, #1
 8005812:	d119      	bne.n	8005848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	60bb      	str	r3, [r7, #8]
   return(result);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f023 0310 	bic.w	r3, r3, #16
 800582a:	647b      	str	r3, [r7, #68]	; 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005834:	61ba      	str	r2, [r7, #24]
 8005836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6979      	ldr	r1, [r7, #20]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	613b      	str	r3, [r7, #16]
   return(result);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005856:	bf00      	nop
 8005858:	3754      	adds	r7, #84	; 0x54
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b084      	sub	sp, #16
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff09 	bl	8005694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b21      	cmp	r3, #33	; 0x21
 800589c:	d13e      	bne.n	800591c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	d114      	bne.n	80058d2 <UART_Transmit_IT+0x48>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d110      	bne.n	80058d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	1c9a      	adds	r2, r3, #2
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	621a      	str	r2, [r3, #32]
 80058d0:	e008      	b.n	80058e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	1c59      	adds	r1, r3, #1
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6211      	str	r1, [r2, #32]
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4619      	mov	r1, r3
 80058f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10f      	bne.n	8005918 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005906:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005916:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	e000      	b.n	800591e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800591c:	2302      	movs	r3, #2
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005940:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fe8e 	bl	800566c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08c      	sub	sp, #48	; 0x30
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b22      	cmp	r3, #34	; 0x22
 800596c:	f040 80ab 	bne.w	8005ac6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005978:	d117      	bne.n	80059aa <UART_Receive_IT+0x50>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d113      	bne.n	80059aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005998:	b29a      	uxth	r2, r3
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	1c9a      	adds	r2, r3, #2
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
 80059a8:	e026      	b.n	80059f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059bc:	d007      	beq.n	80059ce <UART_Receive_IT+0x74>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <UART_Receive_IT+0x82>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e008      	b.n	80059ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4619      	mov	r1, r3
 8005a06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d15a      	bne.n	8005ac2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0220 	bic.w	r2, r2, #32
 8005a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695a      	ldr	r2, [r3, #20]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d135      	bne.n	8005ab8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	613b      	str	r3, [r7, #16]
   return(result);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f023 0310 	bic.w	r3, r3, #16
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a72:	623a      	str	r2, [r7, #32]
 8005a74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	69f9      	ldr	r1, [r7, #28]
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d10a      	bne.n	8005aaa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fdf9 	bl	80056a8 <HAL_UARTEx_RxEventCallback>
 8005ab6:	e002      	b.n	8005abe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fde1 	bl	8005680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e002      	b.n	8005ac8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e000      	b.n	8005ac8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ac6:	2302      	movs	r3, #2
  }
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3730      	adds	r7, #48	; 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad4:	b0c0      	sub	sp, #256	; 0x100
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	4bcf      	ldr	r3, [pc, #828]	; (8005e20 <UART_SetConfig+0x350>)
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d904      	bls.n	8005af2 <UART_SetConfig+0x22>
 8005ae8:	f640 6161 	movw	r1, #3681	; 0xe61
 8005aec:	48cd      	ldr	r0, [pc, #820]	; (8005e24 <UART_SetConfig+0x354>)
 8005aee:	f7fa ff4e 	bl	800098e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_SetConfig+0x42>
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	d004      	beq.n	8005b12 <UART_SetConfig+0x42>
 8005b08:	f640 6162 	movw	r1, #3682	; 0xe62
 8005b0c:	48c5      	ldr	r0, [pc, #788]	; (8005e24 <UART_SetConfig+0x354>)
 8005b0e:	f7fa ff3e 	bl	800098e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d010      	beq.n	8005b3e <UART_SetConfig+0x6e>
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b26:	d00a      	beq.n	8005b3e <UART_SetConfig+0x6e>
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b32:	d004      	beq.n	8005b3e <UART_SetConfig+0x6e>
 8005b34:	f640 6163 	movw	r1, #3683	; 0xe63
 8005b38:	48ba      	ldr	r0, [pc, #744]	; (8005e24 <UART_SetConfig+0x354>)
 8005b3a:	f7fa ff28 	bl	800098e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <UART_SetConfig+0x88>
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <UART_SetConfig+0x92>
 8005b58:	f640 6164 	movw	r1, #3684	; 0xe64
 8005b5c:	48b1      	ldr	r0, [pc, #708]	; (8005e24 <UART_SetConfig+0x354>)
 8005b5e:	f7fa ff16 	bl	800098e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b72:	68d9      	ldr	r1, [r3, #12]
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	ea40 0301 	orr.w	r3, r0, r1
 8005b7e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bae:	f021 010c 	bic.w	r1, r1, #12
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	ea40 0301 	orr.w	r3, r0, r1
 8005bdc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b90      	ldr	r3, [pc, #576]	; (8005e28 <UART_SetConfig+0x358>)
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d005      	beq.n	8005bf6 <UART_SetConfig+0x126>
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b8e      	ldr	r3, [pc, #568]	; (8005e2c <UART_SetConfig+0x35c>)
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d104      	bne.n	8005c00 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bf6:	f7fc fde7 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 8005bfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005bfe:	e003      	b.n	8005c08 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c00:	f7fc fdce 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8005c04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c12:	f040 810f 	bne.w	8005e34 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c20:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c24:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c28:	4622      	mov	r2, r4
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	1891      	adds	r1, r2, r2
 8005c2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c30:	415b      	adcs	r3, r3
 8005c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c38:	4621      	mov	r1, r4
 8005c3a:	eb12 0801 	adds.w	r8, r2, r1
 8005c3e:	4629      	mov	r1, r5
 8005c40:	eb43 0901 	adc.w	r9, r3, r1
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c58:	4690      	mov	r8, r2
 8005c5a:	4699      	mov	r9, r3
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	eb18 0303 	adds.w	r3, r8, r3
 8005c62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c66:	462b      	mov	r3, r5
 8005c68:	eb49 0303 	adc.w	r3, r9, r3
 8005c6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c7c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c80:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c84:	460b      	mov	r3, r1
 8005c86:	18db      	adds	r3, r3, r3
 8005c88:	653b      	str	r3, [r7, #80]	; 0x50
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	657b      	str	r3, [r7, #84]	; 0x54
 8005c92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c96:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c9a:	f7fa faf1 	bl	8000280 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <UART_SetConfig+0x360>)
 8005ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca8:	095b      	lsrs	r3, r3, #5
 8005caa:	011c      	lsls	r4, r3, #4
 8005cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cba:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cbe:	4642      	mov	r2, r8
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	1891      	adds	r1, r2, r2
 8005cc4:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cc6:	415b      	adcs	r3, r3
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cce:	4641      	mov	r1, r8
 8005cd0:	eb12 0a01 	adds.w	sl, r2, r1
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	eb43 0b01 	adc.w	fp, r3, r1
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ce6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cee:	4692      	mov	sl, r2
 8005cf0:	469b      	mov	fp, r3
 8005cf2:	4643      	mov	r3, r8
 8005cf4:	eb1a 0303 	adds.w	r3, sl, r3
 8005cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	eb4b 0303 	adc.w	r3, fp, r3
 8005d02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d12:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	18db      	adds	r3, r3, r3
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d20:	4613      	mov	r3, r2
 8005d22:	eb42 0303 	adc.w	r3, r2, r3
 8005d26:	647b      	str	r3, [r7, #68]	; 0x44
 8005d28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d2c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d30:	f7fa faa6 	bl	8000280 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	4b3d      	ldr	r3, [pc, #244]	; (8005e30 <UART_SetConfig+0x360>)
 8005d3c:	fba3 2301 	umull	r2, r3, r3, r1
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	2264      	movs	r2, #100	; 0x64
 8005d44:	fb02 f303 	mul.w	r3, r2, r3
 8005d48:	1acb      	subs	r3, r1, r3
 8005d4a:	00db      	lsls	r3, r3, #3
 8005d4c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d50:	4b37      	ldr	r3, [pc, #220]	; (8005e30 <UART_SetConfig+0x360>)
 8005d52:	fba3 2302 	umull	r2, r3, r3, r2
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d5e:	441c      	add	r4, r3
 8005d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d6a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d6e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	1891      	adds	r1, r2, r2
 8005d78:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d82:	4641      	mov	r1, r8
 8005d84:	1851      	adds	r1, r2, r1
 8005d86:	6339      	str	r1, [r7, #48]	; 0x30
 8005d88:	4649      	mov	r1, r9
 8005d8a:	414b      	adcs	r3, r1
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	00cb      	lsls	r3, r1, #3
 8005d9e:	4651      	mov	r1, sl
 8005da0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005da4:	4651      	mov	r1, sl
 8005da6:	00ca      	lsls	r2, r1, #3
 8005da8:	4610      	mov	r0, r2
 8005daa:	4619      	mov	r1, r3
 8005dac:	4603      	mov	r3, r0
 8005dae:	4642      	mov	r2, r8
 8005db0:	189b      	adds	r3, r3, r2
 8005db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db6:	464b      	mov	r3, r9
 8005db8:	460a      	mov	r2, r1
 8005dba:	eb42 0303 	adc.w	r3, r2, r3
 8005dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dce:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	18db      	adds	r3, r3, r3
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ddc:	4613      	mov	r3, r2
 8005dde:	eb42 0303 	adc.w	r3, r2, r3
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005de8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dec:	f7fa fa48 	bl	8000280 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <UART_SetConfig+0x360>)
 8005df6:	fba3 1302 	umull	r1, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	2164      	movs	r1, #100	; 0x64
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	3332      	adds	r3, #50	; 0x32
 8005e08:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <UART_SetConfig+0x360>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	f003 0207 	and.w	r2, r3, #7
 8005e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4422      	add	r2, r4
 8005e1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e1e:	e108      	b.n	8006032 <UART_SetConfig+0x562>
 8005e20:	00a037a0 	.word	0x00a037a0
 8005e24:	08007158 	.word	0x08007158
 8005e28:	40011000 	.word	0x40011000
 8005e2c:	40011400 	.word	0x40011400
 8005e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e46:	4642      	mov	r2, r8
 8005e48:	464b      	mov	r3, r9
 8005e4a:	1891      	adds	r1, r2, r2
 8005e4c:	6239      	str	r1, [r7, #32]
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e56:	4641      	mov	r1, r8
 8005e58:	1854      	adds	r4, r2, r1
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	eb43 0501 	adc.w	r5, r3, r1
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	00eb      	lsls	r3, r5, #3
 8005e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6e:	00e2      	lsls	r2, r4, #3
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4643      	mov	r3, r8
 8005e76:	18e3      	adds	r3, r4, r3
 8005e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	eb45 0303 	adc.w	r3, r5, r3
 8005e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	008b      	lsls	r3, r1, #2
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eac:	4621      	mov	r1, r4
 8005eae:	008a      	lsls	r2, r1, #2
 8005eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005eb4:	f7fa f9e4 	bl	8000280 <__aeabi_uldivmod>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4b60      	ldr	r3, [pc, #384]	; (8006040 <UART_SetConfig+0x570>)
 8005ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	011c      	lsls	r4, r3, #4
 8005ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ed0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ed8:	4642      	mov	r2, r8
 8005eda:	464b      	mov	r3, r9
 8005edc:	1891      	adds	r1, r2, r2
 8005ede:	61b9      	str	r1, [r7, #24]
 8005ee0:	415b      	adcs	r3, r3
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee8:	4641      	mov	r1, r8
 8005eea:	1851      	adds	r1, r2, r1
 8005eec:	6139      	str	r1, [r7, #16]
 8005eee:	4649      	mov	r1, r9
 8005ef0:	414b      	adcs	r3, r1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f00:	4659      	mov	r1, fp
 8005f02:	00cb      	lsls	r3, r1, #3
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	00ca      	lsls	r2, r1, #3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4619      	mov	r1, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	4642      	mov	r2, r8
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	460a      	mov	r2, r1
 8005f20:	eb42 0303 	adc.w	r3, r2, r3
 8005f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f40:	4649      	mov	r1, r9
 8005f42:	008b      	lsls	r3, r1, #2
 8005f44:	4641      	mov	r1, r8
 8005f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	008a      	lsls	r2, r1, #2
 8005f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f52:	f7fa f995 	bl	8000280 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4b39      	ldr	r3, [pc, #228]	; (8006040 <UART_SetConfig+0x570>)
 8005f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	2164      	movs	r1, #100	; 0x64
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	3332      	adds	r3, #50	; 0x32
 8005f6e:	4a34      	ldr	r2, [pc, #208]	; (8006040 <UART_SetConfig+0x570>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f7a:	441c      	add	r4, r3
 8005f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f80:	2200      	movs	r2, #0
 8005f82:	673b      	str	r3, [r7, #112]	; 0x70
 8005f84:	677a      	str	r2, [r7, #116]	; 0x74
 8005f86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	1891      	adds	r1, r2, r2
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	415b      	adcs	r3, r3
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	1851      	adds	r1, r2, r1
 8005f9e:	6039      	str	r1, [r7, #0]
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	414b      	adcs	r3, r1
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fb2:	4659      	mov	r1, fp
 8005fb4:	00cb      	lsls	r3, r1, #3
 8005fb6:	4651      	mov	r1, sl
 8005fb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	00ca      	lsls	r2, r1, #3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4642      	mov	r2, r8
 8005fc8:	189b      	adds	r3, r3, r2
 8005fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fcc:	464b      	mov	r3, r9
 8005fce:	460a      	mov	r2, r1
 8005fd0:	eb42 0303 	adc.w	r3, r2, r3
 8005fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	663b      	str	r3, [r7, #96]	; 0x60
 8005fe0:	667a      	str	r2, [r7, #100]	; 0x64
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fee:	4649      	mov	r1, r9
 8005ff0:	008b      	lsls	r3, r1, #2
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	008a      	lsls	r2, r1, #2
 8005ffc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006000:	f7fa f93e 	bl	8000280 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <UART_SetConfig+0x570>)
 800600a:	fba3 1302 	umull	r1, r3, r3, r2
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	2164      	movs	r1, #100	; 0x64
 8006012:	fb01 f303 	mul.w	r3, r1, r3
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	3332      	adds	r3, #50	; 0x32
 800601c:	4a08      	ldr	r2, [pc, #32]	; (8006040 <UART_SetConfig+0x570>)
 800601e:	fba2 2303 	umull	r2, r3, r2, r3
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	f003 020f 	and.w	r2, r3, #15
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4422      	add	r2, r4
 8006030:	609a      	str	r2, [r3, #8]
}
 8006032:	bf00      	nop
 8006034:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006038:	46bd      	mov	sp, r7
 800603a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603e:	bf00      	nop
 8006040:	51eb851f 	.word	0x51eb851f

08006044 <__errno>:
 8006044:	4b01      	ldr	r3, [pc, #4]	; (800604c <__errno+0x8>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	2000000c 	.word	0x2000000c

08006050 <__libc_init_array>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	4d0d      	ldr	r5, [pc, #52]	; (8006088 <__libc_init_array+0x38>)
 8006054:	4c0d      	ldr	r4, [pc, #52]	; (800608c <__libc_init_array+0x3c>)
 8006056:	1b64      	subs	r4, r4, r5
 8006058:	10a4      	asrs	r4, r4, #2
 800605a:	2600      	movs	r6, #0
 800605c:	42a6      	cmp	r6, r4
 800605e:	d109      	bne.n	8006074 <__libc_init_array+0x24>
 8006060:	4d0b      	ldr	r5, [pc, #44]	; (8006090 <__libc_init_array+0x40>)
 8006062:	4c0c      	ldr	r4, [pc, #48]	; (8006094 <__libc_init_array+0x44>)
 8006064:	f000 ffae 	bl	8006fc4 <_init>
 8006068:	1b64      	subs	r4, r4, r5
 800606a:	10a4      	asrs	r4, r4, #2
 800606c:	2600      	movs	r6, #0
 800606e:	42a6      	cmp	r6, r4
 8006070:	d105      	bne.n	800607e <__libc_init_array+0x2e>
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	f855 3b04 	ldr.w	r3, [r5], #4
 8006078:	4798      	blx	r3
 800607a:	3601      	adds	r6, #1
 800607c:	e7ee      	b.n	800605c <__libc_init_array+0xc>
 800607e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006082:	4798      	blx	r3
 8006084:	3601      	adds	r6, #1
 8006086:	e7f2      	b.n	800606e <__libc_init_array+0x1e>
 8006088:	0800724c 	.word	0x0800724c
 800608c:	0800724c 	.word	0x0800724c
 8006090:	0800724c 	.word	0x0800724c
 8006094:	08007250 	.word	0x08007250

08006098 <memset>:
 8006098:	4402      	add	r2, r0
 800609a:	4603      	mov	r3, r0
 800609c:	4293      	cmp	r3, r2
 800609e:	d100      	bne.n	80060a2 <memset+0xa>
 80060a0:	4770      	bx	lr
 80060a2:	f803 1b01 	strb.w	r1, [r3], #1
 80060a6:	e7f9      	b.n	800609c <memset+0x4>

080060a8 <iprintf>:
 80060a8:	b40f      	push	{r0, r1, r2, r3}
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <iprintf+0x2c>)
 80060ac:	b513      	push	{r0, r1, r4, lr}
 80060ae:	681c      	ldr	r4, [r3, #0]
 80060b0:	b124      	cbz	r4, 80060bc <iprintf+0x14>
 80060b2:	69a3      	ldr	r3, [r4, #24]
 80060b4:	b913      	cbnz	r3, 80060bc <iprintf+0x14>
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 f866 	bl	8006188 <__sinit>
 80060bc:	ab05      	add	r3, sp, #20
 80060be:	9a04      	ldr	r2, [sp, #16]
 80060c0:	68a1      	ldr	r1, [r4, #8]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 f9bd 	bl	8006444 <_vfiprintf_r>
 80060ca:	b002      	add	sp, #8
 80060cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d0:	b004      	add	sp, #16
 80060d2:	4770      	bx	lr
 80060d4:	2000000c 	.word	0x2000000c

080060d8 <std>:
 80060d8:	2300      	movs	r3, #0
 80060da:	b510      	push	{r4, lr}
 80060dc:	4604      	mov	r4, r0
 80060de:	e9c0 3300 	strd	r3, r3, [r0]
 80060e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060e6:	6083      	str	r3, [r0, #8]
 80060e8:	8181      	strh	r1, [r0, #12]
 80060ea:	6643      	str	r3, [r0, #100]	; 0x64
 80060ec:	81c2      	strh	r2, [r0, #14]
 80060ee:	6183      	str	r3, [r0, #24]
 80060f0:	4619      	mov	r1, r3
 80060f2:	2208      	movs	r2, #8
 80060f4:	305c      	adds	r0, #92	; 0x5c
 80060f6:	f7ff ffcf 	bl	8006098 <memset>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <std+0x38>)
 80060fc:	6263      	str	r3, [r4, #36]	; 0x24
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <std+0x3c>)
 8006100:	62a3      	str	r3, [r4, #40]	; 0x28
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <std+0x40>)
 8006104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <std+0x44>)
 8006108:	6224      	str	r4, [r4, #32]
 800610a:	6323      	str	r3, [r4, #48]	; 0x30
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	080069ed 	.word	0x080069ed
 8006114:	08006a0f 	.word	0x08006a0f
 8006118:	08006a47 	.word	0x08006a47
 800611c:	08006a6b 	.word	0x08006a6b

08006120 <_cleanup_r>:
 8006120:	4901      	ldr	r1, [pc, #4]	; (8006128 <_cleanup_r+0x8>)
 8006122:	f000 b8af 	b.w	8006284 <_fwalk_reent>
 8006126:	bf00      	nop
 8006128:	08006d45 	.word	0x08006d45

0800612c <__sfmoreglue>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	2268      	movs	r2, #104	; 0x68
 8006130:	1e4d      	subs	r5, r1, #1
 8006132:	4355      	muls	r5, r2
 8006134:	460e      	mov	r6, r1
 8006136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800613a:	f000 f8e5 	bl	8006308 <_malloc_r>
 800613e:	4604      	mov	r4, r0
 8006140:	b140      	cbz	r0, 8006154 <__sfmoreglue+0x28>
 8006142:	2100      	movs	r1, #0
 8006144:	e9c0 1600 	strd	r1, r6, [r0]
 8006148:	300c      	adds	r0, #12
 800614a:	60a0      	str	r0, [r4, #8]
 800614c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006150:	f7ff ffa2 	bl	8006098 <memset>
 8006154:	4620      	mov	r0, r4
 8006156:	bd70      	pop	{r4, r5, r6, pc}

08006158 <__sfp_lock_acquire>:
 8006158:	4801      	ldr	r0, [pc, #4]	; (8006160 <__sfp_lock_acquire+0x8>)
 800615a:	f000 b8b3 	b.w	80062c4 <__retarget_lock_acquire_recursive>
 800615e:	bf00      	nop
 8006160:	200001bd 	.word	0x200001bd

08006164 <__sfp_lock_release>:
 8006164:	4801      	ldr	r0, [pc, #4]	; (800616c <__sfp_lock_release+0x8>)
 8006166:	f000 b8ae 	b.w	80062c6 <__retarget_lock_release_recursive>
 800616a:	bf00      	nop
 800616c:	200001bd 	.word	0x200001bd

08006170 <__sinit_lock_acquire>:
 8006170:	4801      	ldr	r0, [pc, #4]	; (8006178 <__sinit_lock_acquire+0x8>)
 8006172:	f000 b8a7 	b.w	80062c4 <__retarget_lock_acquire_recursive>
 8006176:	bf00      	nop
 8006178:	200001be 	.word	0x200001be

0800617c <__sinit_lock_release>:
 800617c:	4801      	ldr	r0, [pc, #4]	; (8006184 <__sinit_lock_release+0x8>)
 800617e:	f000 b8a2 	b.w	80062c6 <__retarget_lock_release_recursive>
 8006182:	bf00      	nop
 8006184:	200001be 	.word	0x200001be

08006188 <__sinit>:
 8006188:	b510      	push	{r4, lr}
 800618a:	4604      	mov	r4, r0
 800618c:	f7ff fff0 	bl	8006170 <__sinit_lock_acquire>
 8006190:	69a3      	ldr	r3, [r4, #24]
 8006192:	b11b      	cbz	r3, 800619c <__sinit+0x14>
 8006194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006198:	f7ff bff0 	b.w	800617c <__sinit_lock_release>
 800619c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061a0:	6523      	str	r3, [r4, #80]	; 0x50
 80061a2:	4b13      	ldr	r3, [pc, #76]	; (80061f0 <__sinit+0x68>)
 80061a4:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <__sinit+0x6c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80061aa:	42a3      	cmp	r3, r4
 80061ac:	bf04      	itt	eq
 80061ae:	2301      	moveq	r3, #1
 80061b0:	61a3      	streq	r3, [r4, #24]
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f820 	bl	80061f8 <__sfp>
 80061b8:	6060      	str	r0, [r4, #4]
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f81c 	bl	80061f8 <__sfp>
 80061c0:	60a0      	str	r0, [r4, #8]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f818 	bl	80061f8 <__sfp>
 80061c8:	2200      	movs	r2, #0
 80061ca:	60e0      	str	r0, [r4, #12]
 80061cc:	2104      	movs	r1, #4
 80061ce:	6860      	ldr	r0, [r4, #4]
 80061d0:	f7ff ff82 	bl	80060d8 <std>
 80061d4:	68a0      	ldr	r0, [r4, #8]
 80061d6:	2201      	movs	r2, #1
 80061d8:	2109      	movs	r1, #9
 80061da:	f7ff ff7d 	bl	80060d8 <std>
 80061de:	68e0      	ldr	r0, [r4, #12]
 80061e0:	2202      	movs	r2, #2
 80061e2:	2112      	movs	r1, #18
 80061e4:	f7ff ff78 	bl	80060d8 <std>
 80061e8:	2301      	movs	r3, #1
 80061ea:	61a3      	str	r3, [r4, #24]
 80061ec:	e7d2      	b.n	8006194 <__sinit+0xc>
 80061ee:	bf00      	nop
 80061f0:	080071ac 	.word	0x080071ac
 80061f4:	08006121 	.word	0x08006121

080061f8 <__sfp>:
 80061f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fa:	4607      	mov	r7, r0
 80061fc:	f7ff ffac 	bl	8006158 <__sfp_lock_acquire>
 8006200:	4b1e      	ldr	r3, [pc, #120]	; (800627c <__sfp+0x84>)
 8006202:	681e      	ldr	r6, [r3, #0]
 8006204:	69b3      	ldr	r3, [r6, #24]
 8006206:	b913      	cbnz	r3, 800620e <__sfp+0x16>
 8006208:	4630      	mov	r0, r6
 800620a:	f7ff ffbd 	bl	8006188 <__sinit>
 800620e:	3648      	adds	r6, #72	; 0x48
 8006210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006214:	3b01      	subs	r3, #1
 8006216:	d503      	bpl.n	8006220 <__sfp+0x28>
 8006218:	6833      	ldr	r3, [r6, #0]
 800621a:	b30b      	cbz	r3, 8006260 <__sfp+0x68>
 800621c:	6836      	ldr	r6, [r6, #0]
 800621e:	e7f7      	b.n	8006210 <__sfp+0x18>
 8006220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006224:	b9d5      	cbnz	r5, 800625c <__sfp+0x64>
 8006226:	4b16      	ldr	r3, [pc, #88]	; (8006280 <__sfp+0x88>)
 8006228:	60e3      	str	r3, [r4, #12]
 800622a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800622e:	6665      	str	r5, [r4, #100]	; 0x64
 8006230:	f000 f847 	bl	80062c2 <__retarget_lock_init_recursive>
 8006234:	f7ff ff96 	bl	8006164 <__sfp_lock_release>
 8006238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800623c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006240:	6025      	str	r5, [r4, #0]
 8006242:	61a5      	str	r5, [r4, #24]
 8006244:	2208      	movs	r2, #8
 8006246:	4629      	mov	r1, r5
 8006248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800624c:	f7ff ff24 	bl	8006098 <memset>
 8006250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006258:	4620      	mov	r0, r4
 800625a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800625c:	3468      	adds	r4, #104	; 0x68
 800625e:	e7d9      	b.n	8006214 <__sfp+0x1c>
 8006260:	2104      	movs	r1, #4
 8006262:	4638      	mov	r0, r7
 8006264:	f7ff ff62 	bl	800612c <__sfmoreglue>
 8006268:	4604      	mov	r4, r0
 800626a:	6030      	str	r0, [r6, #0]
 800626c:	2800      	cmp	r0, #0
 800626e:	d1d5      	bne.n	800621c <__sfp+0x24>
 8006270:	f7ff ff78 	bl	8006164 <__sfp_lock_release>
 8006274:	230c      	movs	r3, #12
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	e7ee      	b.n	8006258 <__sfp+0x60>
 800627a:	bf00      	nop
 800627c:	080071ac 	.word	0x080071ac
 8006280:	ffff0001 	.word	0xffff0001

08006284 <_fwalk_reent>:
 8006284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006288:	4606      	mov	r6, r0
 800628a:	4688      	mov	r8, r1
 800628c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006290:	2700      	movs	r7, #0
 8006292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006296:	f1b9 0901 	subs.w	r9, r9, #1
 800629a:	d505      	bpl.n	80062a8 <_fwalk_reent+0x24>
 800629c:	6824      	ldr	r4, [r4, #0]
 800629e:	2c00      	cmp	r4, #0
 80062a0:	d1f7      	bne.n	8006292 <_fwalk_reent+0xe>
 80062a2:	4638      	mov	r0, r7
 80062a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062a8:	89ab      	ldrh	r3, [r5, #12]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d907      	bls.n	80062be <_fwalk_reent+0x3a>
 80062ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062b2:	3301      	adds	r3, #1
 80062b4:	d003      	beq.n	80062be <_fwalk_reent+0x3a>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4630      	mov	r0, r6
 80062ba:	47c0      	blx	r8
 80062bc:	4307      	orrs	r7, r0
 80062be:	3568      	adds	r5, #104	; 0x68
 80062c0:	e7e9      	b.n	8006296 <_fwalk_reent+0x12>

080062c2 <__retarget_lock_init_recursive>:
 80062c2:	4770      	bx	lr

080062c4 <__retarget_lock_acquire_recursive>:
 80062c4:	4770      	bx	lr

080062c6 <__retarget_lock_release_recursive>:
 80062c6:	4770      	bx	lr

080062c8 <sbrk_aligned>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4e0e      	ldr	r6, [pc, #56]	; (8006304 <sbrk_aligned+0x3c>)
 80062cc:	460c      	mov	r4, r1
 80062ce:	6831      	ldr	r1, [r6, #0]
 80062d0:	4605      	mov	r5, r0
 80062d2:	b911      	cbnz	r1, 80062da <sbrk_aligned+0x12>
 80062d4:	f000 fb7a 	bl	80069cc <_sbrk_r>
 80062d8:	6030      	str	r0, [r6, #0]
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 fb75 	bl	80069cc <_sbrk_r>
 80062e2:	1c43      	adds	r3, r0, #1
 80062e4:	d00a      	beq.n	80062fc <sbrk_aligned+0x34>
 80062e6:	1cc4      	adds	r4, r0, #3
 80062e8:	f024 0403 	bic.w	r4, r4, #3
 80062ec:	42a0      	cmp	r0, r4
 80062ee:	d007      	beq.n	8006300 <sbrk_aligned+0x38>
 80062f0:	1a21      	subs	r1, r4, r0
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 fb6a 	bl	80069cc <_sbrk_r>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d101      	bne.n	8006300 <sbrk_aligned+0x38>
 80062fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006300:	4620      	mov	r0, r4
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	200001c4 	.word	0x200001c4

08006308 <_malloc_r>:
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	1ccd      	adds	r5, r1, #3
 800630e:	f025 0503 	bic.w	r5, r5, #3
 8006312:	3508      	adds	r5, #8
 8006314:	2d0c      	cmp	r5, #12
 8006316:	bf38      	it	cc
 8006318:	250c      	movcc	r5, #12
 800631a:	2d00      	cmp	r5, #0
 800631c:	4607      	mov	r7, r0
 800631e:	db01      	blt.n	8006324 <_malloc_r+0x1c>
 8006320:	42a9      	cmp	r1, r5
 8006322:	d905      	bls.n	8006330 <_malloc_r+0x28>
 8006324:	230c      	movs	r3, #12
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	2600      	movs	r6, #0
 800632a:	4630      	mov	r0, r6
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	4e2e      	ldr	r6, [pc, #184]	; (80063ec <_malloc_r+0xe4>)
 8006332:	f000 fdbb 	bl	8006eac <__malloc_lock>
 8006336:	6833      	ldr	r3, [r6, #0]
 8006338:	461c      	mov	r4, r3
 800633a:	bb34      	cbnz	r4, 800638a <_malloc_r+0x82>
 800633c:	4629      	mov	r1, r5
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ffc2 	bl	80062c8 <sbrk_aligned>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	4604      	mov	r4, r0
 8006348:	d14d      	bne.n	80063e6 <_malloc_r+0xde>
 800634a:	6834      	ldr	r4, [r6, #0]
 800634c:	4626      	mov	r6, r4
 800634e:	2e00      	cmp	r6, #0
 8006350:	d140      	bne.n	80063d4 <_malloc_r+0xcc>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	4631      	mov	r1, r6
 8006356:	4638      	mov	r0, r7
 8006358:	eb04 0803 	add.w	r8, r4, r3
 800635c:	f000 fb36 	bl	80069cc <_sbrk_r>
 8006360:	4580      	cmp	r8, r0
 8006362:	d13a      	bne.n	80063da <_malloc_r+0xd2>
 8006364:	6821      	ldr	r1, [r4, #0]
 8006366:	3503      	adds	r5, #3
 8006368:	1a6d      	subs	r5, r5, r1
 800636a:	f025 0503 	bic.w	r5, r5, #3
 800636e:	3508      	adds	r5, #8
 8006370:	2d0c      	cmp	r5, #12
 8006372:	bf38      	it	cc
 8006374:	250c      	movcc	r5, #12
 8006376:	4629      	mov	r1, r5
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff ffa5 	bl	80062c8 <sbrk_aligned>
 800637e:	3001      	adds	r0, #1
 8006380:	d02b      	beq.n	80063da <_malloc_r+0xd2>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	442b      	add	r3, r5
 8006386:	6023      	str	r3, [r4, #0]
 8006388:	e00e      	b.n	80063a8 <_malloc_r+0xa0>
 800638a:	6822      	ldr	r2, [r4, #0]
 800638c:	1b52      	subs	r2, r2, r5
 800638e:	d41e      	bmi.n	80063ce <_malloc_r+0xc6>
 8006390:	2a0b      	cmp	r2, #11
 8006392:	d916      	bls.n	80063c2 <_malloc_r+0xba>
 8006394:	1961      	adds	r1, r4, r5
 8006396:	42a3      	cmp	r3, r4
 8006398:	6025      	str	r5, [r4, #0]
 800639a:	bf18      	it	ne
 800639c:	6059      	strne	r1, [r3, #4]
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	bf08      	it	eq
 80063a2:	6031      	streq	r1, [r6, #0]
 80063a4:	5162      	str	r2, [r4, r5]
 80063a6:	604b      	str	r3, [r1, #4]
 80063a8:	4638      	mov	r0, r7
 80063aa:	f104 060b 	add.w	r6, r4, #11
 80063ae:	f000 fd83 	bl	8006eb8 <__malloc_unlock>
 80063b2:	f026 0607 	bic.w	r6, r6, #7
 80063b6:	1d23      	adds	r3, r4, #4
 80063b8:	1af2      	subs	r2, r6, r3
 80063ba:	d0b6      	beq.n	800632a <_malloc_r+0x22>
 80063bc:	1b9b      	subs	r3, r3, r6
 80063be:	50a3      	str	r3, [r4, r2]
 80063c0:	e7b3      	b.n	800632a <_malloc_r+0x22>
 80063c2:	6862      	ldr	r2, [r4, #4]
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	bf0c      	ite	eq
 80063c8:	6032      	streq	r2, [r6, #0]
 80063ca:	605a      	strne	r2, [r3, #4]
 80063cc:	e7ec      	b.n	80063a8 <_malloc_r+0xa0>
 80063ce:	4623      	mov	r3, r4
 80063d0:	6864      	ldr	r4, [r4, #4]
 80063d2:	e7b2      	b.n	800633a <_malloc_r+0x32>
 80063d4:	4634      	mov	r4, r6
 80063d6:	6876      	ldr	r6, [r6, #4]
 80063d8:	e7b9      	b.n	800634e <_malloc_r+0x46>
 80063da:	230c      	movs	r3, #12
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	4638      	mov	r0, r7
 80063e0:	f000 fd6a 	bl	8006eb8 <__malloc_unlock>
 80063e4:	e7a1      	b.n	800632a <_malloc_r+0x22>
 80063e6:	6025      	str	r5, [r4, #0]
 80063e8:	e7de      	b.n	80063a8 <_malloc_r+0xa0>
 80063ea:	bf00      	nop
 80063ec:	200001c0 	.word	0x200001c0

080063f0 <__sfputc_r>:
 80063f0:	6893      	ldr	r3, [r2, #8]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	b410      	push	{r4}
 80063f8:	6093      	str	r3, [r2, #8]
 80063fa:	da08      	bge.n	800640e <__sfputc_r+0x1e>
 80063fc:	6994      	ldr	r4, [r2, #24]
 80063fe:	42a3      	cmp	r3, r4
 8006400:	db01      	blt.n	8006406 <__sfputc_r+0x16>
 8006402:	290a      	cmp	r1, #10
 8006404:	d103      	bne.n	800640e <__sfputc_r+0x1e>
 8006406:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640a:	f000 bb33 	b.w	8006a74 <__swbuf_r>
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	1c58      	adds	r0, r3, #1
 8006412:	6010      	str	r0, [r2, #0]
 8006414:	7019      	strb	r1, [r3, #0]
 8006416:	4608      	mov	r0, r1
 8006418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800641c:	4770      	bx	lr

0800641e <__sfputs_r>:
 800641e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006420:	4606      	mov	r6, r0
 8006422:	460f      	mov	r7, r1
 8006424:	4614      	mov	r4, r2
 8006426:	18d5      	adds	r5, r2, r3
 8006428:	42ac      	cmp	r4, r5
 800642a:	d101      	bne.n	8006430 <__sfputs_r+0x12>
 800642c:	2000      	movs	r0, #0
 800642e:	e007      	b.n	8006440 <__sfputs_r+0x22>
 8006430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006434:	463a      	mov	r2, r7
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff ffda 	bl	80063f0 <__sfputc_r>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d1f3      	bne.n	8006428 <__sfputs_r+0xa>
 8006440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006444 <_vfiprintf_r>:
 8006444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006448:	460d      	mov	r5, r1
 800644a:	b09d      	sub	sp, #116	; 0x74
 800644c:	4614      	mov	r4, r2
 800644e:	4698      	mov	r8, r3
 8006450:	4606      	mov	r6, r0
 8006452:	b118      	cbz	r0, 800645c <_vfiprintf_r+0x18>
 8006454:	6983      	ldr	r3, [r0, #24]
 8006456:	b90b      	cbnz	r3, 800645c <_vfiprintf_r+0x18>
 8006458:	f7ff fe96 	bl	8006188 <__sinit>
 800645c:	4b89      	ldr	r3, [pc, #548]	; (8006684 <_vfiprintf_r+0x240>)
 800645e:	429d      	cmp	r5, r3
 8006460:	d11b      	bne.n	800649a <_vfiprintf_r+0x56>
 8006462:	6875      	ldr	r5, [r6, #4]
 8006464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006466:	07d9      	lsls	r1, r3, #31
 8006468:	d405      	bmi.n	8006476 <_vfiprintf_r+0x32>
 800646a:	89ab      	ldrh	r3, [r5, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d402      	bmi.n	8006476 <_vfiprintf_r+0x32>
 8006470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006472:	f7ff ff27 	bl	80062c4 <__retarget_lock_acquire_recursive>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	071b      	lsls	r3, r3, #28
 800647a:	d501      	bpl.n	8006480 <_vfiprintf_r+0x3c>
 800647c:	692b      	ldr	r3, [r5, #16]
 800647e:	b9eb      	cbnz	r3, 80064bc <_vfiprintf_r+0x78>
 8006480:	4629      	mov	r1, r5
 8006482:	4630      	mov	r0, r6
 8006484:	f000 fb5a 	bl	8006b3c <__swsetup_r>
 8006488:	b1c0      	cbz	r0, 80064bc <_vfiprintf_r+0x78>
 800648a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800648c:	07dc      	lsls	r4, r3, #31
 800648e:	d50e      	bpl.n	80064ae <_vfiprintf_r+0x6a>
 8006490:	f04f 30ff 	mov.w	r0, #4294967295
 8006494:	b01d      	add	sp, #116	; 0x74
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	4b7b      	ldr	r3, [pc, #492]	; (8006688 <_vfiprintf_r+0x244>)
 800649c:	429d      	cmp	r5, r3
 800649e:	d101      	bne.n	80064a4 <_vfiprintf_r+0x60>
 80064a0:	68b5      	ldr	r5, [r6, #8]
 80064a2:	e7df      	b.n	8006464 <_vfiprintf_r+0x20>
 80064a4:	4b79      	ldr	r3, [pc, #484]	; (800668c <_vfiprintf_r+0x248>)
 80064a6:	429d      	cmp	r5, r3
 80064a8:	bf08      	it	eq
 80064aa:	68f5      	ldreq	r5, [r6, #12]
 80064ac:	e7da      	b.n	8006464 <_vfiprintf_r+0x20>
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	0598      	lsls	r0, r3, #22
 80064b2:	d4ed      	bmi.n	8006490 <_vfiprintf_r+0x4c>
 80064b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b6:	f7ff ff06 	bl	80062c6 <__retarget_lock_release_recursive>
 80064ba:	e7e9      	b.n	8006490 <_vfiprintf_r+0x4c>
 80064bc:	2300      	movs	r3, #0
 80064be:	9309      	str	r3, [sp, #36]	; 0x24
 80064c0:	2320      	movs	r3, #32
 80064c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ca:	2330      	movs	r3, #48	; 0x30
 80064cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006690 <_vfiprintf_r+0x24c>
 80064d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d4:	f04f 0901 	mov.w	r9, #1
 80064d8:	4623      	mov	r3, r4
 80064da:	469a      	mov	sl, r3
 80064dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064e0:	b10a      	cbz	r2, 80064e6 <_vfiprintf_r+0xa2>
 80064e2:	2a25      	cmp	r2, #37	; 0x25
 80064e4:	d1f9      	bne.n	80064da <_vfiprintf_r+0x96>
 80064e6:	ebba 0b04 	subs.w	fp, sl, r4
 80064ea:	d00b      	beq.n	8006504 <_vfiprintf_r+0xc0>
 80064ec:	465b      	mov	r3, fp
 80064ee:	4622      	mov	r2, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ff93 	bl	800641e <__sfputs_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	f000 80aa 	beq.w	8006652 <_vfiprintf_r+0x20e>
 80064fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006500:	445a      	add	r2, fp
 8006502:	9209      	str	r2, [sp, #36]	; 0x24
 8006504:	f89a 3000 	ldrb.w	r3, [sl]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80a2 	beq.w	8006652 <_vfiprintf_r+0x20e>
 800650e:	2300      	movs	r3, #0
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006518:	f10a 0a01 	add.w	sl, sl, #1
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006524:	931a      	str	r3, [sp, #104]	; 0x68
 8006526:	4654      	mov	r4, sl
 8006528:	2205      	movs	r2, #5
 800652a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652e:	4858      	ldr	r0, [pc, #352]	; (8006690 <_vfiprintf_r+0x24c>)
 8006530:	f7f9 fe56 	bl	80001e0 <memchr>
 8006534:	9a04      	ldr	r2, [sp, #16]
 8006536:	b9d8      	cbnz	r0, 8006570 <_vfiprintf_r+0x12c>
 8006538:	06d1      	lsls	r1, r2, #27
 800653a:	bf44      	itt	mi
 800653c:	2320      	movmi	r3, #32
 800653e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006542:	0713      	lsls	r3, r2, #28
 8006544:	bf44      	itt	mi
 8006546:	232b      	movmi	r3, #43	; 0x2b
 8006548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800654c:	f89a 3000 	ldrb.w	r3, [sl]
 8006550:	2b2a      	cmp	r3, #42	; 0x2a
 8006552:	d015      	beq.n	8006580 <_vfiprintf_r+0x13c>
 8006554:	9a07      	ldr	r2, [sp, #28]
 8006556:	4654      	mov	r4, sl
 8006558:	2000      	movs	r0, #0
 800655a:	f04f 0c0a 	mov.w	ip, #10
 800655e:	4621      	mov	r1, r4
 8006560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006564:	3b30      	subs	r3, #48	; 0x30
 8006566:	2b09      	cmp	r3, #9
 8006568:	d94e      	bls.n	8006608 <_vfiprintf_r+0x1c4>
 800656a:	b1b0      	cbz	r0, 800659a <_vfiprintf_r+0x156>
 800656c:	9207      	str	r2, [sp, #28]
 800656e:	e014      	b.n	800659a <_vfiprintf_r+0x156>
 8006570:	eba0 0308 	sub.w	r3, r0, r8
 8006574:	fa09 f303 	lsl.w	r3, r9, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	46a2      	mov	sl, r4
 800657e:	e7d2      	b.n	8006526 <_vfiprintf_r+0xe2>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	1d19      	adds	r1, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9103      	str	r1, [sp, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfbb      	ittet	lt
 800658c:	425b      	neglt	r3, r3
 800658e:	f042 0202 	orrlt.w	r2, r2, #2
 8006592:	9307      	strge	r3, [sp, #28]
 8006594:	9307      	strlt	r3, [sp, #28]
 8006596:	bfb8      	it	lt
 8006598:	9204      	strlt	r2, [sp, #16]
 800659a:	7823      	ldrb	r3, [r4, #0]
 800659c:	2b2e      	cmp	r3, #46	; 0x2e
 800659e:	d10c      	bne.n	80065ba <_vfiprintf_r+0x176>
 80065a0:	7863      	ldrb	r3, [r4, #1]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d135      	bne.n	8006612 <_vfiprintf_r+0x1ce>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	1d1a      	adds	r2, r3, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	9203      	str	r2, [sp, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfb8      	it	lt
 80065b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b6:	3402      	adds	r4, #2
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066a0 <_vfiprintf_r+0x25c>
 80065be:	7821      	ldrb	r1, [r4, #0]
 80065c0:	2203      	movs	r2, #3
 80065c2:	4650      	mov	r0, sl
 80065c4:	f7f9 fe0c 	bl	80001e0 <memchr>
 80065c8:	b140      	cbz	r0, 80065dc <_vfiprintf_r+0x198>
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	eba0 000a 	sub.w	r0, r0, sl
 80065d0:	fa03 f000 	lsl.w	r0, r3, r0
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	4303      	orrs	r3, r0
 80065d8:	3401      	adds	r4, #1
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e0:	482c      	ldr	r0, [pc, #176]	; (8006694 <_vfiprintf_r+0x250>)
 80065e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e6:	2206      	movs	r2, #6
 80065e8:	f7f9 fdfa 	bl	80001e0 <memchr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d03f      	beq.n	8006670 <_vfiprintf_r+0x22c>
 80065f0:	4b29      	ldr	r3, [pc, #164]	; (8006698 <_vfiprintf_r+0x254>)
 80065f2:	bb1b      	cbnz	r3, 800663c <_vfiprintf_r+0x1f8>
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	3307      	adds	r3, #7
 80065f8:	f023 0307 	bic.w	r3, r3, #7
 80065fc:	3308      	adds	r3, #8
 80065fe:	9303      	str	r3, [sp, #12]
 8006600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006602:	443b      	add	r3, r7
 8006604:	9309      	str	r3, [sp, #36]	; 0x24
 8006606:	e767      	b.n	80064d8 <_vfiprintf_r+0x94>
 8006608:	fb0c 3202 	mla	r2, ip, r2, r3
 800660c:	460c      	mov	r4, r1
 800660e:	2001      	movs	r0, #1
 8006610:	e7a5      	b.n	800655e <_vfiprintf_r+0x11a>
 8006612:	2300      	movs	r3, #0
 8006614:	3401      	adds	r4, #1
 8006616:	9305      	str	r3, [sp, #20]
 8006618:	4619      	mov	r1, r3
 800661a:	f04f 0c0a 	mov.w	ip, #10
 800661e:	4620      	mov	r0, r4
 8006620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006624:	3a30      	subs	r2, #48	; 0x30
 8006626:	2a09      	cmp	r2, #9
 8006628:	d903      	bls.n	8006632 <_vfiprintf_r+0x1ee>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0c5      	beq.n	80065ba <_vfiprintf_r+0x176>
 800662e:	9105      	str	r1, [sp, #20]
 8006630:	e7c3      	b.n	80065ba <_vfiprintf_r+0x176>
 8006632:	fb0c 2101 	mla	r1, ip, r1, r2
 8006636:	4604      	mov	r4, r0
 8006638:	2301      	movs	r3, #1
 800663a:	e7f0      	b.n	800661e <_vfiprintf_r+0x1da>
 800663c:	ab03      	add	r3, sp, #12
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	462a      	mov	r2, r5
 8006642:	4b16      	ldr	r3, [pc, #88]	; (800669c <_vfiprintf_r+0x258>)
 8006644:	a904      	add	r1, sp, #16
 8006646:	4630      	mov	r0, r6
 8006648:	f3af 8000 	nop.w
 800664c:	4607      	mov	r7, r0
 800664e:	1c78      	adds	r0, r7, #1
 8006650:	d1d6      	bne.n	8006600 <_vfiprintf_r+0x1bc>
 8006652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006654:	07d9      	lsls	r1, r3, #31
 8006656:	d405      	bmi.n	8006664 <_vfiprintf_r+0x220>
 8006658:	89ab      	ldrh	r3, [r5, #12]
 800665a:	059a      	lsls	r2, r3, #22
 800665c:	d402      	bmi.n	8006664 <_vfiprintf_r+0x220>
 800665e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006660:	f7ff fe31 	bl	80062c6 <__retarget_lock_release_recursive>
 8006664:	89ab      	ldrh	r3, [r5, #12]
 8006666:	065b      	lsls	r3, r3, #25
 8006668:	f53f af12 	bmi.w	8006490 <_vfiprintf_r+0x4c>
 800666c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800666e:	e711      	b.n	8006494 <_vfiprintf_r+0x50>
 8006670:	ab03      	add	r3, sp, #12
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	462a      	mov	r2, r5
 8006676:	4b09      	ldr	r3, [pc, #36]	; (800669c <_vfiprintf_r+0x258>)
 8006678:	a904      	add	r1, sp, #16
 800667a:	4630      	mov	r0, r6
 800667c:	f000 f880 	bl	8006780 <_printf_i>
 8006680:	e7e4      	b.n	800664c <_vfiprintf_r+0x208>
 8006682:	bf00      	nop
 8006684:	080071d0 	.word	0x080071d0
 8006688:	080071f0 	.word	0x080071f0
 800668c:	080071b0 	.word	0x080071b0
 8006690:	08007210 	.word	0x08007210
 8006694:	0800721a 	.word	0x0800721a
 8006698:	00000000 	.word	0x00000000
 800669c:	0800641f 	.word	0x0800641f
 80066a0:	08007216 	.word	0x08007216

080066a4 <_printf_common>:
 80066a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	4616      	mov	r6, r2
 80066aa:	4699      	mov	r9, r3
 80066ac:	688a      	ldr	r2, [r1, #8]
 80066ae:	690b      	ldr	r3, [r1, #16]
 80066b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfb8      	it	lt
 80066b8:	4613      	movlt	r3, r2
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c0:	4607      	mov	r7, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b10a      	cbz	r2, 80066ca <_printf_common+0x26>
 80066c6:	3301      	adds	r3, #1
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	0699      	lsls	r1, r3, #26
 80066ce:	bf42      	ittt	mi
 80066d0:	6833      	ldrmi	r3, [r6, #0]
 80066d2:	3302      	addmi	r3, #2
 80066d4:	6033      	strmi	r3, [r6, #0]
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	f015 0506 	ands.w	r5, r5, #6
 80066dc:	d106      	bne.n	80066ec <_printf_common+0x48>
 80066de:	f104 0a19 	add.w	sl, r4, #25
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	6832      	ldr	r2, [r6, #0]
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	42ab      	cmp	r3, r5
 80066ea:	dc26      	bgt.n	800673a <_printf_common+0x96>
 80066ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f0:	1e13      	subs	r3, r2, #0
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	0692      	lsls	r2, r2, #26
 80066fa:	d42b      	bmi.n	8006754 <_printf_common+0xb0>
 80066fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006700:	4649      	mov	r1, r9
 8006702:	4638      	mov	r0, r7
 8006704:	47c0      	blx	r8
 8006706:	3001      	adds	r0, #1
 8006708:	d01e      	beq.n	8006748 <_printf_common+0xa4>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	68e5      	ldr	r5, [r4, #12]
 800670e:	6832      	ldr	r2, [r6, #0]
 8006710:	f003 0306 	and.w	r3, r3, #6
 8006714:	2b04      	cmp	r3, #4
 8006716:	bf08      	it	eq
 8006718:	1aad      	subeq	r5, r5, r2
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	bf0c      	ite	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	2500      	movne	r5, #0
 8006726:	4293      	cmp	r3, r2
 8006728:	bfc4      	itt	gt
 800672a:	1a9b      	subgt	r3, r3, r2
 800672c:	18ed      	addgt	r5, r5, r3
 800672e:	2600      	movs	r6, #0
 8006730:	341a      	adds	r4, #26
 8006732:	42b5      	cmp	r5, r6
 8006734:	d11a      	bne.n	800676c <_printf_common+0xc8>
 8006736:	2000      	movs	r0, #0
 8006738:	e008      	b.n	800674c <_printf_common+0xa8>
 800673a:	2301      	movs	r3, #1
 800673c:	4652      	mov	r2, sl
 800673e:	4649      	mov	r1, r9
 8006740:	4638      	mov	r0, r7
 8006742:	47c0      	blx	r8
 8006744:	3001      	adds	r0, #1
 8006746:	d103      	bne.n	8006750 <_printf_common+0xac>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	3501      	adds	r5, #1
 8006752:	e7c6      	b.n	80066e2 <_printf_common+0x3e>
 8006754:	18e1      	adds	r1, r4, r3
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	2030      	movs	r0, #48	; 0x30
 800675a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800675e:	4422      	add	r2, r4
 8006760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006768:	3302      	adds	r3, #2
 800676a:	e7c7      	b.n	80066fc <_printf_common+0x58>
 800676c:	2301      	movs	r3, #1
 800676e:	4622      	mov	r2, r4
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d0e6      	beq.n	8006748 <_printf_common+0xa4>
 800677a:	3601      	adds	r6, #1
 800677c:	e7d9      	b.n	8006732 <_printf_common+0x8e>
	...

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006788:	2f78      	cmp	r7, #120	; 0x78
 800678a:	4691      	mov	r9, r2
 800678c:	4680      	mov	r8, r0
 800678e:	460c      	mov	r4, r1
 8006790:	469a      	mov	sl, r3
 8006792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	; 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d8 	beq.w	8006952 <_printf_i+0x1d2>
 80067a2:	2f58      	cmp	r7, #88	; 0x58
 80067a4:	f000 80a3 	beq.w	80068ee <_printf_i+0x16e>
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	; (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	08006939 	.word	0x08006939
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800691b 	.word	0x0800691b
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	0800695b 	.word	0x0800695b
 8006804:	080067a9 	.word	0x080067a9
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	08006923 	.word	0x08006923
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e0a3      	b.n	8006974 <_printf_i+0x1f4>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	6829      	ldr	r1, [r5, #0]
 8006830:	0606      	lsls	r6, r0, #24
 8006832:	f101 0304 	add.w	r3, r1, #4
 8006836:	d50a      	bpl.n	800684e <_printf_i+0xce>
 8006838:	680e      	ldr	r6, [r1, #0]
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	2e00      	cmp	r6, #0
 800683e:	da03      	bge.n	8006848 <_printf_i+0xc8>
 8006840:	232d      	movs	r3, #45	; 0x2d
 8006842:	4276      	negs	r6, r6
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	485e      	ldr	r0, [pc, #376]	; (80069c4 <_printf_i+0x244>)
 800684a:	230a      	movs	r3, #10
 800684c:	e019      	b.n	8006882 <_printf_i+0x102>
 800684e:	680e      	ldr	r6, [r1, #0]
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006856:	bf18      	it	ne
 8006858:	b236      	sxthne	r6, r6
 800685a:	e7ef      	b.n	800683c <_printf_i+0xbc>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	6029      	str	r1, [r5, #0]
 8006864:	0601      	lsls	r1, r0, #24
 8006866:	d501      	bpl.n	800686c <_printf_i+0xec>
 8006868:	681e      	ldr	r6, [r3, #0]
 800686a:	e002      	b.n	8006872 <_printf_i+0xf2>
 800686c:	0646      	lsls	r6, r0, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0xe8>
 8006870:	881e      	ldrh	r6, [r3, #0]
 8006872:	4854      	ldr	r0, [pc, #336]	; (80069c4 <_printf_i+0x244>)
 8006874:	2f6f      	cmp	r7, #111	; 0x6f
 8006876:	bf0c      	ite	eq
 8006878:	2308      	moveq	r3, #8
 800687a:	230a      	movne	r3, #10
 800687c:	2100      	movs	r1, #0
 800687e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006882:	6865      	ldr	r5, [r4, #4]
 8006884:	60a5      	str	r5, [r4, #8]
 8006886:	2d00      	cmp	r5, #0
 8006888:	bfa2      	ittt	ge
 800688a:	6821      	ldrge	r1, [r4, #0]
 800688c:	f021 0104 	bicge.w	r1, r1, #4
 8006890:	6021      	strge	r1, [r4, #0]
 8006892:	b90e      	cbnz	r6, 8006898 <_printf_i+0x118>
 8006894:	2d00      	cmp	r5, #0
 8006896:	d04d      	beq.n	8006934 <_printf_i+0x1b4>
 8006898:	4615      	mov	r5, r2
 800689a:	fbb6 f1f3 	udiv	r1, r6, r3
 800689e:	fb03 6711 	mls	r7, r3, r1, r6
 80068a2:	5dc7      	ldrb	r7, [r0, r7]
 80068a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068a8:	4637      	mov	r7, r6
 80068aa:	42bb      	cmp	r3, r7
 80068ac:	460e      	mov	r6, r1
 80068ae:	d9f4      	bls.n	800689a <_printf_i+0x11a>
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d10b      	bne.n	80068cc <_printf_i+0x14c>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07de      	lsls	r6, r3, #31
 80068b8:	d508      	bpl.n	80068cc <_printf_i+0x14c>
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	6861      	ldr	r1, [r4, #4]
 80068be:	4299      	cmp	r1, r3
 80068c0:	bfde      	ittt	le
 80068c2:	2330      	movle	r3, #48	; 0x30
 80068c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068cc:	1b52      	subs	r2, r2, r5
 80068ce:	6122      	str	r2, [r4, #16]
 80068d0:	f8cd a000 	str.w	sl, [sp]
 80068d4:	464b      	mov	r3, r9
 80068d6:	aa03      	add	r2, sp, #12
 80068d8:	4621      	mov	r1, r4
 80068da:	4640      	mov	r0, r8
 80068dc:	f7ff fee2 	bl	80066a4 <_printf_common>
 80068e0:	3001      	adds	r0, #1
 80068e2:	d14c      	bne.n	800697e <_printf_i+0x1fe>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	b004      	add	sp, #16
 80068ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ee:	4835      	ldr	r0, [pc, #212]	; (80069c4 <_printf_i+0x244>)
 80068f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f4:	6829      	ldr	r1, [r5, #0]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80068fc:	6029      	str	r1, [r5, #0]
 80068fe:	061d      	lsls	r5, r3, #24
 8006900:	d514      	bpl.n	800692c <_printf_i+0x1ac>
 8006902:	07df      	lsls	r7, r3, #31
 8006904:	bf44      	itt	mi
 8006906:	f043 0320 	orrmi.w	r3, r3, #32
 800690a:	6023      	strmi	r3, [r4, #0]
 800690c:	b91e      	cbnz	r6, 8006916 <_printf_i+0x196>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	f023 0320 	bic.w	r3, r3, #32
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	2310      	movs	r3, #16
 8006918:	e7b0      	b.n	800687c <_printf_i+0xfc>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f043 0320 	orr.w	r3, r3, #32
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	2378      	movs	r3, #120	; 0x78
 8006924:	4828      	ldr	r0, [pc, #160]	; (80069c8 <_printf_i+0x248>)
 8006926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800692a:	e7e3      	b.n	80068f4 <_printf_i+0x174>
 800692c:	0659      	lsls	r1, r3, #25
 800692e:	bf48      	it	mi
 8006930:	b2b6      	uxthmi	r6, r6
 8006932:	e7e6      	b.n	8006902 <_printf_i+0x182>
 8006934:	4615      	mov	r5, r2
 8006936:	e7bb      	b.n	80068b0 <_printf_i+0x130>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	6826      	ldr	r6, [r4, #0]
 800693c:	6961      	ldr	r1, [r4, #20]
 800693e:	1d18      	adds	r0, r3, #4
 8006940:	6028      	str	r0, [r5, #0]
 8006942:	0635      	lsls	r5, r6, #24
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	d501      	bpl.n	800694c <_printf_i+0x1cc>
 8006948:	6019      	str	r1, [r3, #0]
 800694a:	e002      	b.n	8006952 <_printf_i+0x1d2>
 800694c:	0670      	lsls	r0, r6, #25
 800694e:	d5fb      	bpl.n	8006948 <_printf_i+0x1c8>
 8006950:	8019      	strh	r1, [r3, #0]
 8006952:	2300      	movs	r3, #0
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	4615      	mov	r5, r2
 8006958:	e7ba      	b.n	80068d0 <_printf_i+0x150>
 800695a:	682b      	ldr	r3, [r5, #0]
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	2100      	movs	r1, #0
 8006966:	4628      	mov	r0, r5
 8006968:	f7f9 fc3a 	bl	80001e0 <memchr>
 800696c:	b108      	cbz	r0, 8006972 <_printf_i+0x1f2>
 800696e:	1b40      	subs	r0, r0, r5
 8006970:	6060      	str	r0, [r4, #4]
 8006972:	6863      	ldr	r3, [r4, #4]
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	2300      	movs	r3, #0
 8006978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697c:	e7a8      	b.n	80068d0 <_printf_i+0x150>
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	462a      	mov	r2, r5
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d0ab      	beq.n	80068e4 <_printf_i+0x164>
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	079b      	lsls	r3, r3, #30
 8006990:	d413      	bmi.n	80069ba <_printf_i+0x23a>
 8006992:	68e0      	ldr	r0, [r4, #12]
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	4298      	cmp	r0, r3
 8006998:	bfb8      	it	lt
 800699a:	4618      	movlt	r0, r3
 800699c:	e7a4      	b.n	80068e8 <_printf_i+0x168>
 800699e:	2301      	movs	r3, #1
 80069a0:	4632      	mov	r2, r6
 80069a2:	4649      	mov	r1, r9
 80069a4:	4640      	mov	r0, r8
 80069a6:	47d0      	blx	sl
 80069a8:	3001      	adds	r0, #1
 80069aa:	d09b      	beq.n	80068e4 <_printf_i+0x164>
 80069ac:	3501      	adds	r5, #1
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	9903      	ldr	r1, [sp, #12]
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	42ab      	cmp	r3, r5
 80069b6:	dcf2      	bgt.n	800699e <_printf_i+0x21e>
 80069b8:	e7eb      	b.n	8006992 <_printf_i+0x212>
 80069ba:	2500      	movs	r5, #0
 80069bc:	f104 0619 	add.w	r6, r4, #25
 80069c0:	e7f5      	b.n	80069ae <_printf_i+0x22e>
 80069c2:	bf00      	nop
 80069c4:	08007221 	.word	0x08007221
 80069c8:	08007232 	.word	0x08007232

080069cc <_sbrk_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d06      	ldr	r5, [pc, #24]	; (80069e8 <_sbrk_r+0x1c>)
 80069d0:	2300      	movs	r3, #0
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	f7fa f8e2 	bl	8000ba0 <_sbrk>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_sbrk_r+0x1a>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_sbrk_r+0x1a>
 80069e4:	6023      	str	r3, [r4, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	200001c8 	.word	0x200001c8

080069ec <__sread>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	460c      	mov	r4, r1
 80069f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f4:	f000 fab2 	bl	8006f5c <_read_r>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	bfab      	itete	ge
 80069fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006a00:	181b      	addge	r3, r3, r0
 8006a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a06:	bfac      	ite	ge
 8006a08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a0a:	81a3      	strhlt	r3, [r4, #12]
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <__swrite>:
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	461f      	mov	r7, r3
 8006a14:	898b      	ldrh	r3, [r1, #12]
 8006a16:	05db      	lsls	r3, r3, #23
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	d505      	bpl.n	8006a2c <__swrite+0x1e>
 8006a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a24:	2302      	movs	r3, #2
 8006a26:	2200      	movs	r2, #0
 8006a28:	f000 f9c8 	bl	8006dbc <_lseek_r>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	4632      	mov	r2, r6
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	f000 b869 	b.w	8006b18 <_write_r>

08006a46 <__sseek>:
 8006a46:	b510      	push	{r4, lr}
 8006a48:	460c      	mov	r4, r1
 8006a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4e:	f000 f9b5 	bl	8006dbc <_lseek_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	bf15      	itete	ne
 8006a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a62:	81a3      	strheq	r3, [r4, #12]
 8006a64:	bf18      	it	ne
 8006a66:	81a3      	strhne	r3, [r4, #12]
 8006a68:	bd10      	pop	{r4, pc}

08006a6a <__sclose>:
 8006a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6e:	f000 b8d3 	b.w	8006c18 <_close_r>
	...

08006a74 <__swbuf_r>:
 8006a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a76:	460e      	mov	r6, r1
 8006a78:	4614      	mov	r4, r2
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	b118      	cbz	r0, 8006a86 <__swbuf_r+0x12>
 8006a7e:	6983      	ldr	r3, [r0, #24]
 8006a80:	b90b      	cbnz	r3, 8006a86 <__swbuf_r+0x12>
 8006a82:	f7ff fb81 	bl	8006188 <__sinit>
 8006a86:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <__swbuf_r+0x98>)
 8006a88:	429c      	cmp	r4, r3
 8006a8a:	d12b      	bne.n	8006ae4 <__swbuf_r+0x70>
 8006a8c:	686c      	ldr	r4, [r5, #4]
 8006a8e:	69a3      	ldr	r3, [r4, #24]
 8006a90:	60a3      	str	r3, [r4, #8]
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	071a      	lsls	r2, r3, #28
 8006a96:	d52f      	bpl.n	8006af8 <__swbuf_r+0x84>
 8006a98:	6923      	ldr	r3, [r4, #16]
 8006a9a:	b36b      	cbz	r3, 8006af8 <__swbuf_r+0x84>
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	1ac0      	subs	r0, r0, r3
 8006aa2:	6963      	ldr	r3, [r4, #20]
 8006aa4:	b2f6      	uxtb	r6, r6
 8006aa6:	4283      	cmp	r3, r0
 8006aa8:	4637      	mov	r7, r6
 8006aaa:	dc04      	bgt.n	8006ab6 <__swbuf_r+0x42>
 8006aac:	4621      	mov	r1, r4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 f948 	bl	8006d44 <_fflush_r>
 8006ab4:	bb30      	cbnz	r0, 8006b04 <__swbuf_r+0x90>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	60a3      	str	r3, [r4, #8]
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	6022      	str	r2, [r4, #0]
 8006ac2:	701e      	strb	r6, [r3, #0]
 8006ac4:	6963      	ldr	r3, [r4, #20]
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	4283      	cmp	r3, r0
 8006aca:	d004      	beq.n	8006ad6 <__swbuf_r+0x62>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	07db      	lsls	r3, r3, #31
 8006ad0:	d506      	bpl.n	8006ae0 <__swbuf_r+0x6c>
 8006ad2:	2e0a      	cmp	r6, #10
 8006ad4:	d104      	bne.n	8006ae0 <__swbuf_r+0x6c>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f000 f933 	bl	8006d44 <_fflush_r>
 8006ade:	b988      	cbnz	r0, 8006b04 <__swbuf_r+0x90>
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <__swbuf_r+0x9c>)
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	d101      	bne.n	8006aee <__swbuf_r+0x7a>
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	e7cf      	b.n	8006a8e <__swbuf_r+0x1a>
 8006aee:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <__swbuf_r+0xa0>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	bf08      	it	eq
 8006af4:	68ec      	ldreq	r4, [r5, #12]
 8006af6:	e7ca      	b.n	8006a8e <__swbuf_r+0x1a>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f81e 	bl	8006b3c <__swsetup_r>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d0cb      	beq.n	8006a9c <__swbuf_r+0x28>
 8006b04:	f04f 37ff 	mov.w	r7, #4294967295
 8006b08:	e7ea      	b.n	8006ae0 <__swbuf_r+0x6c>
 8006b0a:	bf00      	nop
 8006b0c:	080071d0 	.word	0x080071d0
 8006b10:	080071f0 	.word	0x080071f0
 8006b14:	080071b0 	.word	0x080071b0

08006b18 <_write_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4d07      	ldr	r5, [pc, #28]	; (8006b38 <_write_r+0x20>)
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4611      	mov	r1, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	602a      	str	r2, [r5, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f7f9 ffe9 	bl	8000afe <_write>
 8006b2c:	1c43      	adds	r3, r0, #1
 8006b2e:	d102      	bne.n	8006b36 <_write_r+0x1e>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b103      	cbz	r3, 8006b36 <_write_r+0x1e>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	bd38      	pop	{r3, r4, r5, pc}
 8006b38:	200001c8 	.word	0x200001c8

08006b3c <__swsetup_r>:
 8006b3c:	4b32      	ldr	r3, [pc, #200]	; (8006c08 <__swsetup_r+0xcc>)
 8006b3e:	b570      	push	{r4, r5, r6, lr}
 8006b40:	681d      	ldr	r5, [r3, #0]
 8006b42:	4606      	mov	r6, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	b125      	cbz	r5, 8006b52 <__swsetup_r+0x16>
 8006b48:	69ab      	ldr	r3, [r5, #24]
 8006b4a:	b913      	cbnz	r3, 8006b52 <__swsetup_r+0x16>
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f7ff fb1b 	bl	8006188 <__sinit>
 8006b52:	4b2e      	ldr	r3, [pc, #184]	; (8006c0c <__swsetup_r+0xd0>)
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d10f      	bne.n	8006b78 <__swsetup_r+0x3c>
 8006b58:	686c      	ldr	r4, [r5, #4]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b60:	0719      	lsls	r1, r3, #28
 8006b62:	d42c      	bmi.n	8006bbe <__swsetup_r+0x82>
 8006b64:	06dd      	lsls	r5, r3, #27
 8006b66:	d411      	bmi.n	8006b8c <__swsetup_r+0x50>
 8006b68:	2309      	movs	r3, #9
 8006b6a:	6033      	str	r3, [r6, #0]
 8006b6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b70:	81a3      	strh	r3, [r4, #12]
 8006b72:	f04f 30ff 	mov.w	r0, #4294967295
 8006b76:	e03e      	b.n	8006bf6 <__swsetup_r+0xba>
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <__swsetup_r+0xd4>)
 8006b7a:	429c      	cmp	r4, r3
 8006b7c:	d101      	bne.n	8006b82 <__swsetup_r+0x46>
 8006b7e:	68ac      	ldr	r4, [r5, #8]
 8006b80:	e7eb      	b.n	8006b5a <__swsetup_r+0x1e>
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <__swsetup_r+0xd8>)
 8006b84:	429c      	cmp	r4, r3
 8006b86:	bf08      	it	eq
 8006b88:	68ec      	ldreq	r4, [r5, #12]
 8006b8a:	e7e6      	b.n	8006b5a <__swsetup_r+0x1e>
 8006b8c:	0758      	lsls	r0, r3, #29
 8006b8e:	d512      	bpl.n	8006bb6 <__swsetup_r+0x7a>
 8006b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b92:	b141      	cbz	r1, 8006ba6 <__swsetup_r+0x6a>
 8006b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	d002      	beq.n	8006ba2 <__swsetup_r+0x66>
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 f991 	bl	8006ec4 <_free_r>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	f043 0308 	orr.w	r3, r3, #8
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	b94b      	cbnz	r3, 8006bd6 <__swsetup_r+0x9a>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bcc:	d003      	beq.n	8006bd6 <__swsetup_r+0x9a>
 8006bce:	4621      	mov	r1, r4
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f92b 	bl	8006e2c <__smakebuf_r>
 8006bd6:	89a0      	ldrh	r0, [r4, #12]
 8006bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bdc:	f010 0301 	ands.w	r3, r0, #1
 8006be0:	d00a      	beq.n	8006bf8 <__swsetup_r+0xbc>
 8006be2:	2300      	movs	r3, #0
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	6963      	ldr	r3, [r4, #20]
 8006be8:	425b      	negs	r3, r3
 8006bea:	61a3      	str	r3, [r4, #24]
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	b943      	cbnz	r3, 8006c02 <__swsetup_r+0xc6>
 8006bf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bf4:	d1ba      	bne.n	8006b6c <__swsetup_r+0x30>
 8006bf6:	bd70      	pop	{r4, r5, r6, pc}
 8006bf8:	0781      	lsls	r1, r0, #30
 8006bfa:	bf58      	it	pl
 8006bfc:	6963      	ldrpl	r3, [r4, #20]
 8006bfe:	60a3      	str	r3, [r4, #8]
 8006c00:	e7f4      	b.n	8006bec <__swsetup_r+0xb0>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e7f7      	b.n	8006bf6 <__swsetup_r+0xba>
 8006c06:	bf00      	nop
 8006c08:	2000000c 	.word	0x2000000c
 8006c0c:	080071d0 	.word	0x080071d0
 8006c10:	080071f0 	.word	0x080071f0
 8006c14:	080071b0 	.word	0x080071b0

08006c18 <_close_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d06      	ldr	r5, [pc, #24]	; (8006c34 <_close_r+0x1c>)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	602b      	str	r3, [r5, #0]
 8006c24:	f7f9 ff87 	bl	8000b36 <_close>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d102      	bne.n	8006c32 <_close_r+0x1a>
 8006c2c:	682b      	ldr	r3, [r5, #0]
 8006c2e:	b103      	cbz	r3, 8006c32 <_close_r+0x1a>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	bd38      	pop	{r3, r4, r5, pc}
 8006c34:	200001c8 	.word	0x200001c8

08006c38 <__sflush_r>:
 8006c38:	898a      	ldrh	r2, [r1, #12]
 8006c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3e:	4605      	mov	r5, r0
 8006c40:	0710      	lsls	r0, r2, #28
 8006c42:	460c      	mov	r4, r1
 8006c44:	d458      	bmi.n	8006cf8 <__sflush_r+0xc0>
 8006c46:	684b      	ldr	r3, [r1, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc05      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	dc02      	bgt.n	8006c58 <__sflush_r+0x20>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	d0f9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c64:	682f      	ldr	r7, [r5, #0]
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	d032      	beq.n	8006cd0 <__sflush_r+0x98>
 8006c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	075a      	lsls	r2, r3, #29
 8006c70:	d505      	bpl.n	8006c7e <__sflush_r+0x46>
 8006c72:	6863      	ldr	r3, [r4, #4]
 8006c74:	1ac0      	subs	r0, r0, r3
 8006c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c78:	b10b      	cbz	r3, 8006c7e <__sflush_r+0x46>
 8006c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c7c:	1ac0      	subs	r0, r0, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4602      	mov	r2, r0
 8006c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c84:	6a21      	ldr	r1, [r4, #32]
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b0      	blx	r6
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	d106      	bne.n	8006c9e <__sflush_r+0x66>
 8006c90:	6829      	ldr	r1, [r5, #0]
 8006c92:	291d      	cmp	r1, #29
 8006c94:	d82c      	bhi.n	8006cf0 <__sflush_r+0xb8>
 8006c96:	4a2a      	ldr	r2, [pc, #168]	; (8006d40 <__sflush_r+0x108>)
 8006c98:	40ca      	lsrs	r2, r1
 8006c9a:	07d6      	lsls	r6, r2, #31
 8006c9c:	d528      	bpl.n	8006cf0 <__sflush_r+0xb8>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	6062      	str	r2, [r4, #4]
 8006ca2:	04d9      	lsls	r1, r3, #19
 8006ca4:	6922      	ldr	r2, [r4, #16]
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	d504      	bpl.n	8006cb4 <__sflush_r+0x7c>
 8006caa:	1c42      	adds	r2, r0, #1
 8006cac:	d101      	bne.n	8006cb2 <__sflush_r+0x7a>
 8006cae:	682b      	ldr	r3, [r5, #0]
 8006cb0:	b903      	cbnz	r3, 8006cb4 <__sflush_r+0x7c>
 8006cb2:	6560      	str	r0, [r4, #84]	; 0x54
 8006cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb6:	602f      	str	r7, [r5, #0]
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	d0ca      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d002      	beq.n	8006cca <__sflush_r+0x92>
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 f8fd 	bl	8006ec4 <_free_r>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8006cce:	e7c1      	b.n	8006c54 <__sflush_r+0x1c>
 8006cd0:	6a21      	ldr	r1, [r4, #32]
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b0      	blx	r6
 8006cd8:	1c41      	adds	r1, r0, #1
 8006cda:	d1c7      	bne.n	8006c6c <__sflush_r+0x34>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c4      	beq.n	8006c6c <__sflush_r+0x34>
 8006ce2:	2b1d      	cmp	r3, #29
 8006ce4:	d001      	beq.n	8006cea <__sflush_r+0xb2>
 8006ce6:	2b16      	cmp	r3, #22
 8006ce8:	d101      	bne.n	8006cee <__sflush_r+0xb6>
 8006cea:	602f      	str	r7, [r5, #0]
 8006cec:	e7b1      	b.n	8006c52 <__sflush_r+0x1a>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	e7ad      	b.n	8006c54 <__sflush_r+0x1c>
 8006cf8:	690f      	ldr	r7, [r1, #16]
 8006cfa:	2f00      	cmp	r7, #0
 8006cfc:	d0a9      	beq.n	8006c52 <__sflush_r+0x1a>
 8006cfe:	0793      	lsls	r3, r2, #30
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	bf08      	it	eq
 8006d04:	694b      	ldreq	r3, [r1, #20]
 8006d06:	600f      	str	r7, [r1, #0]
 8006d08:	bf18      	it	ne
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	eba6 0807 	sub.w	r8, r6, r7
 8006d10:	608b      	str	r3, [r1, #8]
 8006d12:	f1b8 0f00 	cmp.w	r8, #0
 8006d16:	dd9c      	ble.n	8006c52 <__sflush_r+0x1a>
 8006d18:	6a21      	ldr	r1, [r4, #32]
 8006d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d1c:	4643      	mov	r3, r8
 8006d1e:	463a      	mov	r2, r7
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b0      	blx	r6
 8006d24:	2800      	cmp	r0, #0
 8006d26:	dc06      	bgt.n	8006d36 <__sflush_r+0xfe>
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	e78e      	b.n	8006c54 <__sflush_r+0x1c>
 8006d36:	4407      	add	r7, r0
 8006d38:	eba8 0800 	sub.w	r8, r8, r0
 8006d3c:	e7e9      	b.n	8006d12 <__sflush_r+0xda>
 8006d3e:	bf00      	nop
 8006d40:	20400001 	.word	0x20400001

08006d44 <_fflush_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	690b      	ldr	r3, [r1, #16]
 8006d48:	4605      	mov	r5, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b913      	cbnz	r3, 8006d54 <_fflush_r+0x10>
 8006d4e:	2500      	movs	r5, #0
 8006d50:	4628      	mov	r0, r5
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	b118      	cbz	r0, 8006d5e <_fflush_r+0x1a>
 8006d56:	6983      	ldr	r3, [r0, #24]
 8006d58:	b90b      	cbnz	r3, 8006d5e <_fflush_r+0x1a>
 8006d5a:	f7ff fa15 	bl	8006188 <__sinit>
 8006d5e:	4b14      	ldr	r3, [pc, #80]	; (8006db0 <_fflush_r+0x6c>)
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d11b      	bne.n	8006d9c <_fflush_r+0x58>
 8006d64:	686c      	ldr	r4, [r5, #4]
 8006d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0ef      	beq.n	8006d4e <_fflush_r+0xa>
 8006d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d70:	07d0      	lsls	r0, r2, #31
 8006d72:	d404      	bmi.n	8006d7e <_fflush_r+0x3a>
 8006d74:	0599      	lsls	r1, r3, #22
 8006d76:	d402      	bmi.n	8006d7e <_fflush_r+0x3a>
 8006d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d7a:	f7ff faa3 	bl	80062c4 <__retarget_lock_acquire_recursive>
 8006d7e:	4628      	mov	r0, r5
 8006d80:	4621      	mov	r1, r4
 8006d82:	f7ff ff59 	bl	8006c38 <__sflush_r>
 8006d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d88:	07da      	lsls	r2, r3, #31
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	d4e0      	bmi.n	8006d50 <_fflush_r+0xc>
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	059b      	lsls	r3, r3, #22
 8006d92:	d4dd      	bmi.n	8006d50 <_fflush_r+0xc>
 8006d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d96:	f7ff fa96 	bl	80062c6 <__retarget_lock_release_recursive>
 8006d9a:	e7d9      	b.n	8006d50 <_fflush_r+0xc>
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <_fflush_r+0x70>)
 8006d9e:	429c      	cmp	r4, r3
 8006da0:	d101      	bne.n	8006da6 <_fflush_r+0x62>
 8006da2:	68ac      	ldr	r4, [r5, #8]
 8006da4:	e7df      	b.n	8006d66 <_fflush_r+0x22>
 8006da6:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <_fflush_r+0x74>)
 8006da8:	429c      	cmp	r4, r3
 8006daa:	bf08      	it	eq
 8006dac:	68ec      	ldreq	r4, [r5, #12]
 8006dae:	e7da      	b.n	8006d66 <_fflush_r+0x22>
 8006db0:	080071d0 	.word	0x080071d0
 8006db4:	080071f0 	.word	0x080071f0
 8006db8:	080071b0 	.word	0x080071b0

08006dbc <_lseek_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d07      	ldr	r5, [pc, #28]	; (8006ddc <_lseek_r+0x20>)
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	4608      	mov	r0, r1
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f7f9 feda 	bl	8000b84 <_lseek>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_lseek_r+0x1e>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_lseek_r+0x1e>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	200001c8 	.word	0x200001c8

08006de0 <__swhatbuf_r>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	460e      	mov	r6, r1
 8006de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	b096      	sub	sp, #88	; 0x58
 8006dec:	4614      	mov	r4, r2
 8006dee:	461d      	mov	r5, r3
 8006df0:	da08      	bge.n	8006e04 <__swhatbuf_r+0x24>
 8006df2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	602a      	str	r2, [r5, #0]
 8006dfa:	061a      	lsls	r2, r3, #24
 8006dfc:	d410      	bmi.n	8006e20 <__swhatbuf_r+0x40>
 8006dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e02:	e00e      	b.n	8006e22 <__swhatbuf_r+0x42>
 8006e04:	466a      	mov	r2, sp
 8006e06:	f000 f8bb 	bl	8006f80 <_fstat_r>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	dbf1      	blt.n	8006df2 <__swhatbuf_r+0x12>
 8006e0e:	9a01      	ldr	r2, [sp, #4]
 8006e10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e18:	425a      	negs	r2, r3
 8006e1a:	415a      	adcs	r2, r3
 8006e1c:	602a      	str	r2, [r5, #0]
 8006e1e:	e7ee      	b.n	8006dfe <__swhatbuf_r+0x1e>
 8006e20:	2340      	movs	r3, #64	; 0x40
 8006e22:	2000      	movs	r0, #0
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	b016      	add	sp, #88	; 0x58
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e2c <__smakebuf_r>:
 8006e2c:	898b      	ldrh	r3, [r1, #12]
 8006e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e30:	079d      	lsls	r5, r3, #30
 8006e32:	4606      	mov	r6, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	d507      	bpl.n	8006e48 <__smakebuf_r+0x1c>
 8006e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	6123      	str	r3, [r4, #16]
 8006e40:	2301      	movs	r3, #1
 8006e42:	6163      	str	r3, [r4, #20]
 8006e44:	b002      	add	sp, #8
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	ab01      	add	r3, sp, #4
 8006e4a:	466a      	mov	r2, sp
 8006e4c:	f7ff ffc8 	bl	8006de0 <__swhatbuf_r>
 8006e50:	9900      	ldr	r1, [sp, #0]
 8006e52:	4605      	mov	r5, r0
 8006e54:	4630      	mov	r0, r6
 8006e56:	f7ff fa57 	bl	8006308 <_malloc_r>
 8006e5a:	b948      	cbnz	r0, 8006e70 <__smakebuf_r+0x44>
 8006e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e60:	059a      	lsls	r2, r3, #22
 8006e62:	d4ef      	bmi.n	8006e44 <__smakebuf_r+0x18>
 8006e64:	f023 0303 	bic.w	r3, r3, #3
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	e7e3      	b.n	8006e38 <__smakebuf_r+0xc>
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <__smakebuf_r+0x7c>)
 8006e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	6020      	str	r0, [r4, #0]
 8006e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	6163      	str	r3, [r4, #20]
 8006e82:	9b01      	ldr	r3, [sp, #4]
 8006e84:	6120      	str	r0, [r4, #16]
 8006e86:	b15b      	cbz	r3, 8006ea0 <__smakebuf_r+0x74>
 8006e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f000 f889 	bl	8006fa4 <_isatty_r>
 8006e92:	b128      	cbz	r0, 8006ea0 <__smakebuf_r+0x74>
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	89a0      	ldrh	r0, [r4, #12]
 8006ea2:	4305      	orrs	r5, r0
 8006ea4:	81a5      	strh	r5, [r4, #12]
 8006ea6:	e7cd      	b.n	8006e44 <__smakebuf_r+0x18>
 8006ea8:	08006121 	.word	0x08006121

08006eac <__malloc_lock>:
 8006eac:	4801      	ldr	r0, [pc, #4]	; (8006eb4 <__malloc_lock+0x8>)
 8006eae:	f7ff ba09 	b.w	80062c4 <__retarget_lock_acquire_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	200001bc 	.word	0x200001bc

08006eb8 <__malloc_unlock>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__malloc_unlock+0x8>)
 8006eba:	f7ff ba04 	b.w	80062c6 <__retarget_lock_release_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	200001bc 	.word	0x200001bc

08006ec4 <_free_r>:
 8006ec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ec6:	2900      	cmp	r1, #0
 8006ec8:	d044      	beq.n	8006f54 <_free_r+0x90>
 8006eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ece:	9001      	str	r0, [sp, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ed6:	bfb8      	it	lt
 8006ed8:	18e4      	addlt	r4, r4, r3
 8006eda:	f7ff ffe7 	bl	8006eac <__malloc_lock>
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <_free_r+0x94>)
 8006ee0:	9801      	ldr	r0, [sp, #4]
 8006ee2:	6813      	ldr	r3, [r2, #0]
 8006ee4:	b933      	cbnz	r3, 8006ef4 <_free_r+0x30>
 8006ee6:	6063      	str	r3, [r4, #4]
 8006ee8:	6014      	str	r4, [r2, #0]
 8006eea:	b003      	add	sp, #12
 8006eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ef0:	f7ff bfe2 	b.w	8006eb8 <__malloc_unlock>
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	d908      	bls.n	8006f0a <_free_r+0x46>
 8006ef8:	6825      	ldr	r5, [r4, #0]
 8006efa:	1961      	adds	r1, r4, r5
 8006efc:	428b      	cmp	r3, r1
 8006efe:	bf01      	itttt	eq
 8006f00:	6819      	ldreq	r1, [r3, #0]
 8006f02:	685b      	ldreq	r3, [r3, #4]
 8006f04:	1949      	addeq	r1, r1, r5
 8006f06:	6021      	streq	r1, [r4, #0]
 8006f08:	e7ed      	b.n	8006ee6 <_free_r+0x22>
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	b10b      	cbz	r3, 8006f14 <_free_r+0x50>
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	d9fa      	bls.n	8006f0a <_free_r+0x46>
 8006f14:	6811      	ldr	r1, [r2, #0]
 8006f16:	1855      	adds	r5, r2, r1
 8006f18:	42a5      	cmp	r5, r4
 8006f1a:	d10b      	bne.n	8006f34 <_free_r+0x70>
 8006f1c:	6824      	ldr	r4, [r4, #0]
 8006f1e:	4421      	add	r1, r4
 8006f20:	1854      	adds	r4, r2, r1
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	d1e0      	bne.n	8006eea <_free_r+0x26>
 8006f28:	681c      	ldr	r4, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	6053      	str	r3, [r2, #4]
 8006f2e:	4421      	add	r1, r4
 8006f30:	6011      	str	r1, [r2, #0]
 8006f32:	e7da      	b.n	8006eea <_free_r+0x26>
 8006f34:	d902      	bls.n	8006f3c <_free_r+0x78>
 8006f36:	230c      	movs	r3, #12
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	e7d6      	b.n	8006eea <_free_r+0x26>
 8006f3c:	6825      	ldr	r5, [r4, #0]
 8006f3e:	1961      	adds	r1, r4, r5
 8006f40:	428b      	cmp	r3, r1
 8006f42:	bf04      	itt	eq
 8006f44:	6819      	ldreq	r1, [r3, #0]
 8006f46:	685b      	ldreq	r3, [r3, #4]
 8006f48:	6063      	str	r3, [r4, #4]
 8006f4a:	bf04      	itt	eq
 8006f4c:	1949      	addeq	r1, r1, r5
 8006f4e:	6021      	streq	r1, [r4, #0]
 8006f50:	6054      	str	r4, [r2, #4]
 8006f52:	e7ca      	b.n	8006eea <_free_r+0x26>
 8006f54:	b003      	add	sp, #12
 8006f56:	bd30      	pop	{r4, r5, pc}
 8006f58:	200001c0 	.word	0x200001c0

08006f5c <_read_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_read_r+0x20>)
 8006f60:	4604      	mov	r4, r0
 8006f62:	4608      	mov	r0, r1
 8006f64:	4611      	mov	r1, r2
 8006f66:	2200      	movs	r2, #0
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7f9 fdaa 	bl	8000ac4 <_read>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_read_r+0x1e>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_read_r+0x1e>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	200001c8 	.word	0x200001c8

08006f80 <_fstat_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d07      	ldr	r5, [pc, #28]	; (8006fa0 <_fstat_r+0x20>)
 8006f84:	2300      	movs	r3, #0
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	f7f9 fdde 	bl	8000b4e <_fstat>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d102      	bne.n	8006f9c <_fstat_r+0x1c>
 8006f96:	682b      	ldr	r3, [r5, #0]
 8006f98:	b103      	cbz	r3, 8006f9c <_fstat_r+0x1c>
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200001c8 	.word	0x200001c8

08006fa4 <_isatty_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d06      	ldr	r5, [pc, #24]	; (8006fc0 <_isatty_r+0x1c>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	602b      	str	r3, [r5, #0]
 8006fb0:	f7f9 fddd 	bl	8000b6e <_isatty>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_isatty_r+0x1a>
 8006fb8:	682b      	ldr	r3, [r5, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_isatty_r+0x1a>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	200001c8 	.word	0x200001c8

08006fc4 <_init>:
 8006fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc6:	bf00      	nop
 8006fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fca:	bc08      	pop	{r3}
 8006fcc:	469e      	mov	lr, r3
 8006fce:	4770      	bx	lr

08006fd0 <_fini>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr
