
STM32_EXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007030  08007030  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007030  08007030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007038  08007038  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  080070b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080070b0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f29f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c0  00000000  00000000  0002f33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00031600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00032370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017690  00000000  00000000  00032ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123a9  00000000  00000000  0004a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f705  00000000  00000000  0005ca31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f0c  00000000  00000000  000ec188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dcc 	.word	0x08006dcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006dcc 	.word	0x08006dcc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]
 800059e:	4b46      	ldr	r3, [pc, #280]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a45      	ldr	r2, [pc, #276]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b43      	ldr	r3, [pc, #268]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	4b3f      	ldr	r3, [pc, #252]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a3e      	ldr	r2, [pc, #248]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b3c      	ldr	r3, [pc, #240]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	4b38      	ldr	r3, [pc, #224]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a37      	ldr	r2, [pc, #220]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b35      	ldr	r3, [pc, #212]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <MX_GPIO_Init+0x134>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_GPIO_Init+0x134>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000610:	482a      	ldr	r0, [pc, #168]	; (80006bc <MX_GPIO_Init+0x138>)
 8000612:	f001 fa63 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4825      	ldr	r0, [pc, #148]	; (80006c0 <MX_GPIO_Init+0x13c>)
 800062a:	f000 ffbd 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062e:	2301      	movs	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000632:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	4820      	ldr	r0, [pc, #128]	; (80006c4 <MX_GPIO_Init+0x140>)
 8000644:	f000 ffb0 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000648:	230a      	movs	r3, #10
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800064c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000652:	2301      	movs	r3, #1
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4819      	ldr	r0, [pc, #100]	; (80006c4 <MX_GPIO_Init+0x140>)
 800065e:	f000 ffa3 	bl	80015a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000662:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <MX_GPIO_Init+0x138>)
 800067c:	f000 ff94 	bl	80015a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fead 	bl	80013e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800068a:	2006      	movs	r0, #6
 800068c:	f000 fed6 	bl	800143c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f000 fea5 	bl	80013e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800069a:	2007      	movs	r0, #7
 800069c:	f000 fece 	bl	800143c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2009      	movs	r0, #9
 80006a6:	f000 fe9d 	bl	80013e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006aa:	2009      	movs	r0, #9
 80006ac:	f000 fec6 	bl	800143c <HAL_NVIC_EnableIRQ>

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400

080006c8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006d0:	1d39      	adds	r1, r7, #4
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	2201      	movs	r2, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <__io_putchar+0x20>)
 80006da:	f004 fbab 	bl	8004e34 <HAL_UART_Transmit>
  return ch;
 80006de:	687b      	ldr	r3, [r7, #4]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000016c 	.word	0x2000016c

080006ec <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
	i++;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <HAL_GPIO_EXTI_Callback+0x74>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	4a18      	ldr	r2, [pc, #96]	; (8000760 <HAL_GPIO_EXTI_Callback+0x74>)
 80006fe:	6013      	str	r3, [r2, #0]
	if(GPIO_Pin == GPIO_PIN_0)
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10b      	bne.n	800071e <HAL_GPIO_EXTI_Callback+0x32>
	{
		printf("\nnoise: %d", i);
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_GPIO_EXTI_Callback+0x74>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	4815      	ldr	r0, [pc, #84]	; (8000764 <HAL_GPIO_EXTI_Callback+0x78>)
 800070e:	f005 fbcf 	bl	8005eb0 <iprintf>
		HAL_GPIO_TogglePin(LED_PORT, LED_GREEN);
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	4814      	ldr	r0, [pc, #80]	; (8000768 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000718:	f001 fa12 	bl	8001b40 <HAL_GPIO_TogglePin>
		printf("\nnoise: %d", i);
		HAL_GPIO_TogglePin(LED_PORT, LED_RED);
//		HAL_Delay(1);
	}

}
 800071c:	e01c      	b.n	8000758 <HAL_GPIO_EXTI_Callback+0x6c>
	else if ( GPIO_Pin == GPIO_PIN_1)
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d10b      	bne.n	800073c <HAL_GPIO_EXTI_Callback+0x50>
		printf("\nnoise: %d", i);
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <HAL_GPIO_EXTI_Callback+0x74>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <HAL_GPIO_EXTI_Callback+0x78>)
 800072c:	f005 fbc0 	bl	8005eb0 <iprintf>
		HAL_GPIO_TogglePin(LED_PORT, LED_ORANGE);
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000736:	f001 fa03 	bl	8001b40 <HAL_GPIO_TogglePin>
}
 800073a:	e00d      	b.n	8000758 <HAL_GPIO_EXTI_Callback+0x6c>
	else if(GPIO_Pin == GPIO_PIN_3)
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	2b08      	cmp	r3, #8
 8000740:	d10a      	bne.n	8000758 <HAL_GPIO_EXTI_Callback+0x6c>
		printf("\nnoise: %d", i);
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <HAL_GPIO_EXTI_Callback+0x74>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <HAL_GPIO_EXTI_Callback+0x78>)
 800074a:	f005 fbb1 	bl	8005eb0 <iprintf>
		HAL_GPIO_TogglePin(LED_PORT, LED_RED);
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000754:	f001 f9f4 	bl	8001b40 <HAL_GPIO_TogglePin>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000008c 	.word	0x2000008c
 8000764:	08006de4 	.word	0x08006de4
 8000768:	40020c00 	.word	0x40020c00

0800076c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d104      	bne.n	8000786 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(LED_PORT, LED_BLUE);
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000782:	f001 f9dd 	bl	8001b40 <HAL_GPIO_TogglePin>
	}
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000094 	.word	0x20000094
 8000794:	40020c00 	.word	0x40020c00

08000798 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
//	if (htim == &htim3)
//	{
	if(htim->Instance ==TIM3)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_TIM_IC_CaptureCallback+0x34>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d10c      	bne.n	80007c4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		HAL_GPIO_TogglePin(LED_PORT, LED_RED);
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80007b0:	f001 f9c6 	bl	8001b40 <HAL_GPIO_TogglePin>
		uint32_t capture_value = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1);
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ba:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
//	}
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40000400 	.word	0x40000400
 80007d0:	40020c00 	.word	0x40020c00
 80007d4:	20000094 	.word	0x20000094

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 fca0 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f83a 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f7ff fece 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007e8:	f000 fbf6 	bl	8000fd8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007ec:	f000 f9f2 	bl	8000bd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007f0:	f000 fa3e 	bl	8000c70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80007f4:	f000 faae 	bl	8000d54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <main+0x60>)
 80007fa:	f002 f897 	bl	800292c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80007fe:	2100      	movs	r1, #0
 8000800:	480e      	ldr	r0, [pc, #56]	; (800083c <main+0x64>)
 8000802:	f002 fc47 	bl	8003094 <HAL_TIM_IC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000806:	2100      	movs	r1, #0
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <main+0x68>)
 800080a:	f002 f9f1 	bl	8002bf0 <HAL_TIM_OC_Start_IT>

    /* USER CODE BEGIN 3 */
//	  uint8_t status = HAL_GPIO_ReadPin(BUTTON_PORT,BUTTON_PIN);
//	 	 printf("\n status: %d", status);
//	  HAL_GPIO_WritePin(LED_PORT, LED_GREEN, status);
	  printf("\n Timer2: %d", TIM2->CNT);
 800080e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <main+0x6c>)
 8000818:	f005 fb4a 	bl	8005eb0 <iprintf>
	  printf("\n Timer3: %d", TIM3->CNT);
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <main+0x70>)
 800081e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	480a      	ldr	r0, [pc, #40]	; (800084c <main+0x74>)
 8000824:	f005 fb44 	bl	8005eb0 <iprintf>
	  printf("\n Timer4: %d", TIM4->CNT);
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <main+0x78>)
 800082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	4809      	ldr	r0, [pc, #36]	; (8000854 <main+0x7c>)
 8000830:	f005 fb3e 	bl	8005eb0 <iprintf>
	  printf("\n Timer2: %d", TIM2->CNT);
 8000834:	e7eb      	b.n	800080e <main+0x36>
 8000836:	bf00      	nop
 8000838:	20000094 	.word	0x20000094
 800083c:	200000dc 	.word	0x200000dc
 8000840:	20000124 	.word	0x20000124
 8000844:	08006df0 	.word	0x08006df0
 8000848:	40000400 	.word	0x40000400
 800084c:	08006e00 	.word	0x08006e00
 8000850:	40000800 	.word	0x40000800
 8000854:	08006e10 	.word	0x08006e10

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fb1a 	bl	8005ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b27      	ldr	r3, [pc, #156]	; (8000920 <SystemClock_Config+0xc8>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a26      	ldr	r2, [pc, #152]	; (8000920 <SystemClock_Config+0xc8>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <SystemClock_Config+0xc8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <SystemClock_Config+0xcc>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a20      	ldr	r2, [pc, #128]	; (8000924 <SystemClock_Config+0xcc>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <SystemClock_Config+0xcc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80008cc:	23c8      	movs	r3, #200	; 0xc8
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 f96f 	bl	8001bc0 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 f81e 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fc81 	bl	8002210 <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000914:	f000 f808 	bl	8000928 <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	; 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>

08000932 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 fbee 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f001 f8cd 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80009fe:	2002      	movs	r0, #2
 8000a00:	f001 f8c6 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f001 f8bf 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <TIM2_IRQHandler+0x10>)
 8000a1e:	f002 fcd7 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000094 	.word	0x20000094

08000a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM3_IRQHandler+0x10>)
 8000a32:	f002 fccd 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000dc 	.word	0x200000dc

08000a40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <TIM4_IRQHandler+0x10>)
 8000a46:	f002 fcc3 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000124 	.word	0x20000124

08000a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <USART2_IRQHandler+0x10>)
 8000a5a:	f004 fa7d 	bl	8004f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000016c 	.word	0x2000016c

08000a68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e00a      	b.n	8000a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4601      	mov	r1, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf0      	blt.n	8000a7a <_read+0x12>
	}

return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e009      	b.n	8000ac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe03 	bl	80006c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf1      	blt.n	8000ab4 <_write+0x12>
	}
	return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_close>:

int _close(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b02:	605a      	str	r2, [r3, #4]
	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_isatty>:

int _isatty(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	return 1;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f005 f96a 	bl	8005e4c <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20020000 	.word	0x20020000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	20000090 	.word	0x20000090
 8000bac:	200001c8 	.word	0x200001c8

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000bfa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000c08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c1a:	4814      	ldr	r0, [pc, #80]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000c1c:	f001 fdc0 	bl	80027a0 <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c26:	f7ff fe7f 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4619      	mov	r1, r3
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000c38:	f002 ff8c 	bl	8003b54 <HAL_TIM_ConfigClockSource>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c42:	f7ff fe71 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_TIM2_Init+0x98>)
 8000c54:	f003 ff66 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c5e:	f7ff fe63 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000094 	.word	0x20000094

08000c70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000c9c:	4a2c      	ldr	r2, [pc, #176]	; (8000d50 <MX_TIM3_Init+0xe0>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000ca2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ca6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000cb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc2:	4822      	ldr	r0, [pc, #136]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000cc4:	f001 fd6c 	bl	80027a0 <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000cce:	f7ff fe2b 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	481b      	ldr	r0, [pc, #108]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000ce0:	f002 ff38 	bl	8003b54 <HAL_TIM_ConfigClockSource>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cea:	f7ff fe1d 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000cee:	4817      	ldr	r0, [pc, #92]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000cf0:	f002 f900 	bl	8002ef4 <HAL_TIM_IC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000cfa:	f7ff fe15 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480f      	ldr	r0, [pc, #60]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000d0e:	f003 ff09 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000d18:	f7ff fe06 	bl	8000928 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_TIM3_Init+0xdc>)
 8000d34:	f002 fd8a 	bl	800384c <HAL_TIM_IC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000d3e:	f7ff fdf3 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000dc 	.word	0x200000dc
 8000d50:	40000400 	.word	0x40000400

08000d54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d84:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000d86:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <MX_TIM4_Init+0xf8>)
 8000d88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000d8c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49;
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000d9a:	2231      	movs	r2, #49	; 0x31
 8000d9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000dac:	f001 fcf8 	bl	80027a0 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000db6:	f7ff fdb7 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4820      	ldr	r0, [pc, #128]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000dc8:	f002 fec4 	bl	8003b54 <HAL_TIM_ConfigClockSource>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000dd2:	f7ff fda9 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000dd8:	f001 fe3a 	bl	8002a50 <HAL_TIM_OC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000de2:	f7ff fda1 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	4619      	mov	r1, r3
 8000df4:	4814      	ldr	r0, [pc, #80]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000df6:	f003 fe95 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e00:	f7ff fd92 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e04:	2330      	movs	r3, #48	; 0x30
 8000e06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 24;
 8000e08:	2318      	movs	r3, #24
 8000e0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480b      	ldr	r0, [pc, #44]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000e1c:	f002 fbe0 	bl	80035e0 <HAL_TIM_OC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e26:	f7ff fd7f 	bl	8000928 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	699a      	ldr	r2, [r3, #24]
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f042 0208 	orr.w	r2, r2, #8
 8000e38:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM4_Init+0xf4>)
 8000e3c:	f000 f892 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000e40:	bf00      	nop
 8000e42:	3738      	adds	r7, #56	; 0x38
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000124 	.word	0x20000124
 8000e4c:	40000800 	.word	0x40000800

08000e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e70:	d116      	bne.n	8000ea0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a36      	ldr	r2, [pc, #216]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	201c      	movs	r0, #28
 8000e94:	f000 faa6 	bl	80013e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f000 facf 	bl	800143c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000e9e:	e054      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	; (8000f58 <HAL_TIM_Base_MspInit+0x108>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d134      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <HAL_TIM_Base_MspInit+0x10c>)
 8000efe:	f000 fb53 	bl	80015a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201d      	movs	r0, #29
 8000f08:	f000 fa6c 	bl	80013e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f0c:	201d      	movs	r0, #29
 8000f0e:	f000 fa95 	bl	800143c <HAL_NVIC_EnableIRQ>
}
 8000f12:	e01a      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <HAL_TIM_Base_MspInit+0x110>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d115      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_TIM_Base_MspInit+0x104>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	201e      	movs	r0, #30
 8000f40:	f000 fa50 	bl	80013e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f44:	201e      	movs	r0, #30
 8000f46:	f000 fa79 	bl	800143c <HAL_NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3730      	adds	r7, #48	; 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40000400 	.word	0x40000400
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40000800 	.word	0x40000800

08000f64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <HAL_TIM_MspPostInit+0x68>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d11d      	bne.n	8000fc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_TIM_MspPostInit+0x70>)
 8000fbe:	f000 faf3 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3720      	adds	r7, #32
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40000800 	.word	0x40000800
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_USART2_UART_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8001010:	f003 fe5a 	bl	8004cc8 <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800101a:	f7ff fc85 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000016c 	.word	0x2000016c
 8001028:	40004400 	.word	0x40004400

0800102c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_UART_MspInit+0x94>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d133      	bne.n	80010b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_UART_MspInit+0x98>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_UART_MspInit+0x98>)
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_UART_MspInit+0x98>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_UART_MspInit+0x98>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_UART_MspInit+0x98>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_UART_MspInit+0x98>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001086:	230c      	movs	r3, #12
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001096:	2307      	movs	r3, #7
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <HAL_UART_MspInit+0x9c>)
 80010a2:	f000 fa81 	bl	80015a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2026      	movs	r0, #38	; 0x26
 80010ac:	f000 f99a 	bl	80013e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010b0:	2026      	movs	r0, #38	; 0x26
 80010b2:	f000 f9c3 	bl	800143c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020000 	.word	0x40020000

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010d2:	490e      	ldr	r1, [pc, #56]	; (800110c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d4:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d8:	e002      	b.n	80010e0 <LoopCopyDataInit>

080010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010de:	3304      	adds	r3, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e4:	d3f9      	bcc.n	80010da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e8:	4c0b      	ldr	r4, [pc, #44]	; (8001118 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ec:	e001      	b.n	80010f2 <LoopFillZerobss>

080010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f0:	3204      	adds	r2, #4

080010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f4:	d3fb      	bcc.n	80010ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f6:	f7ff fd5b 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f004 fead 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fb6b 	bl	80007d8 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001110:	08007040 	.word	0x08007040
  ldr r2, =_sbss
 8001114:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001118:	200001c4 	.word	0x200001c4

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f92b 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	200f      	movs	r0, #15
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fbf8 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f972 	bl	800146c <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f920 	bl	80013e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	200001b0 	.word	0x200001b0

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200001b0 	.word	0x200001b0

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800122c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	; (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	; (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	; (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d00f      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d00c      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d009      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d006      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d003      	beq.n	80013d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80013ca:	2190      	movs	r1, #144	; 0x90
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80013ce:	f7ff fab0 	bl	8000932 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff16 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	08006e20 	.word	0x08006e20

080013e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d903      	bls.n	8001404 <HAL_NVIC_SetPriority+0x20>
 80013fc:	21a8      	movs	r1, #168	; 0xa8
 80013fe:	480e      	ldr	r0, [pc, #56]	; (8001438 <HAL_NVIC_SetPriority+0x54>)
 8001400:	f7ff fa97 	bl	8000932 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	d903      	bls.n	8001412 <HAL_NVIC_SetPriority+0x2e>
 800140a:	21a9      	movs	r1, #169	; 0xa9
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <HAL_NVIC_SetPriority+0x54>)
 800140e:	f7ff fa90 	bl	8000932 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001412:	f7ff ff1b 	bl	800124c <__NVIC_GetPriorityGrouping>
 8001416:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f7ff ff6b 	bl	80012f8 <NVIC_EncodePriority>
 8001422:	4602      	mov	r2, r0
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff3a 	bl	80012a4 <__NVIC_SetPriority>
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	08006e20 	.word	0x08006e20

0800143c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	da03      	bge.n	8001456 <HAL_NVIC_EnableIRQ+0x1a>
 800144e:	21bc      	movs	r1, #188	; 0xbc
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_NVIC_EnableIRQ+0x2c>)
 8001452:	f7ff fa6e 	bl	8000932 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff04 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	08006e20 	.word	0x08006e20

0800146c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff73 	bl	8001360 <SysTick_Config>
 800147a:	4603      	mov	r3, r0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001492:	f7ff feab 	bl	80011ec <HAL_GetTick>
 8001496:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d008      	beq.n	80014b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e052      	b.n	800155c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0216 	bic.w	r2, r2, #22
 80014c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d103      	bne.n	80014e6 <HAL_DMA_Abort+0x62>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0208 	bic.w	r2, r2, #8
 80014f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001506:	e013      	b.n	8001530 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001508:	f7ff fe70 	bl	80011ec <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b05      	cmp	r3, #5
 8001514:	d90c      	bls.n	8001530 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2220      	movs	r2, #32
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e015      	b.n	800155c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1e4      	bne.n	8001508 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	223f      	movs	r2, #63	; 0x3f
 8001544:	409a      	lsls	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d004      	beq.n	8001582 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00c      	b.n	800159c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2205      	movs	r2, #5
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a33      	ldr	r2, [pc, #204]	; (8001690 <HAL_GPIO_Init+0xe8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d017      	beq.n	80015f6 <HAL_GPIO_Init+0x4e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_GPIO_Init+0xec>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x4e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a31      	ldr	r2, [pc, #196]	; (8001698 <HAL_GPIO_Init+0xf0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00f      	beq.n	80015f6 <HAL_GPIO_Init+0x4e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_GPIO_Init+0xf4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00b      	beq.n	80015f6 <HAL_GPIO_Init+0x4e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a2f      	ldr	r2, [pc, #188]	; (80016a0 <HAL_GPIO_Init+0xf8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d007      	beq.n	80015f6 <HAL_GPIO_Init+0x4e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <HAL_GPIO_Init+0xfc>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x4e>
 80015ee:	21ac      	movs	r1, #172	; 0xac
 80015f0:	482d      	ldr	r0, [pc, #180]	; (80016a8 <HAL_GPIO_Init+0x100>)
 80015f2:	f7ff f99e 	bl	8000932 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_GPIO_Init+0x64>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x6c>
 800160c:	21ad      	movs	r1, #173	; 0xad
 800160e:	4826      	ldr	r0, [pc, #152]	; (80016a8 <HAL_GPIO_Init+0x100>)
 8001610:	f7ff f98f 	bl	8000932 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d035      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d031      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b11      	cmp	r3, #17
 800162a:	d02d      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d029      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b12      	cmp	r3, #18
 800163a:	d025      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001644:	d020      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800164e:	d01b      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001658:	d016      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001662:	d011      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800166c:	d00c      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0xe0>
 8001680:	21ae      	movs	r1, #174	; 0xae
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <HAL_GPIO_Init+0x100>)
 8001684:	f7ff f955 	bl	8000932 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	e20c      	b.n	8001aa8 <HAL_GPIO_Init+0x500>
 800168e:	bf00      	nop
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021c00 	.word	0x40021c00
 80016a8:	08006e5c 	.word	0x08006e5c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	f040 81ec 	bne.w	8001aa2 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d005      	beq.n	80016e2 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d144      	bne.n	800176c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00f      	beq.n	800170a <HAL_GPIO_Init+0x162>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d00b      	beq.n	800170a <HAL_GPIO_Init+0x162>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x162>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x162>
 8001702:	21c0      	movs	r1, #192	; 0xc0
 8001704:	4884      	ldr	r0, [pc, #528]	; (8001918 <HAL_GPIO_Init+0x370>)
 8001706:	f7ff f914 	bl	8000932 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 0201 	and.w	r2, r3, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b03      	cmp	r3, #3
 8001776:	d027      	beq.n	80017c8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00b      	beq.n	8001798 <HAL_GPIO_Init+0x1f0>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d007      	beq.n	8001798 <HAL_GPIO_Init+0x1f0>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x1f0>
 8001790:	21d1      	movs	r1, #209	; 0xd1
 8001792:	4861      	ldr	r0, [pc, #388]	; (8001918 <HAL_GPIO_Init+0x370>)
 8001794:	f7ff f8cd 	bl	8000932 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	f040 80a3 	bne.w	800191c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d077      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b09      	cmp	r3, #9
 80017e4:	d073      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d06f      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06b      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d067      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d063      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d05f      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d05b      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d057      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d053      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d04f      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d04b      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b04      	cmp	r3, #4
 800183c:	d047      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b04      	cmp	r3, #4
 8001844:	d043      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d03f      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d03b      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d037      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d033      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b06      	cmp	r3, #6
 800186c:	d02f      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d02b      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b06      	cmp	r3, #6
 800187c:	d027      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b07      	cmp	r3, #7
 8001884:	d023      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b07      	cmp	r3, #7
 800188c:	d01f      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b07      	cmp	r3, #7
 8001894:	d01b      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d00f      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	d00b      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b0c      	cmp	r3, #12
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x326>
 80018c6:	21de      	movs	r1, #222	; 0xde
 80018c8:	4813      	ldr	r0, [pc, #76]	; (8001918 <HAL_GPIO_Init+0x370>)
 80018ca:	f7ff f832 	bl	8000932 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	08da      	lsrs	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3208      	adds	r2, #8
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001916:	e001      	b.n	800191c <HAL_GPIO_Init+0x374>
 8001918:	08006e5c 	.word	0x08006e5c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a2 	beq.w	8001aa2 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_GPIO_Init+0x514>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a55      	ldr	r2, [pc, #340]	; (8001abc <HAL_GPIO_Init+0x514>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_GPIO_Init+0x514>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a51      	ldr	r2, [pc, #324]	; (8001ac0 <HAL_GPIO_Init+0x518>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a48      	ldr	r2, [pc, #288]	; (8001ac4 <HAL_GPIO_Init+0x51c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x432>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a47      	ldr	r2, [pc, #284]	; (8001ac8 <HAL_GPIO_Init+0x520>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x42e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_GPIO_Init+0x524>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x42a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a45      	ldr	r2, [pc, #276]	; (8001ad0 <HAL_GPIO_Init+0x528>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x426>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a44      	ldr	r2, [pc, #272]	; (8001ad4 <HAL_GPIO_Init+0x52c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x422>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x434>
 80019ca:	2307      	movs	r3, #7
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x434>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x434>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x434>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x434>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4934      	ldr	r1, [pc, #208]	; (8001ac0 <HAL_GPIO_Init+0x518>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_GPIO_Init+0x530>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f adfe 	bls.w	80016ac <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3720      	adds	r7, #32
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40013c00 	.word	0x40013c00

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <HAL_GPIO_WritePin+0x20>
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	041b      	lsls	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_GPIO_WritePin+0x2a>
 8001afc:	f240 119d 	movw	r1, #413	; 0x19d
 8001b00:	480e      	ldr	r0, [pc, #56]	; (8001b3c <HAL_GPIO_WritePin+0x60>)
 8001b02:	f7fe ff16 	bl	8000932 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b06:	787b      	ldrb	r3, [r7, #1]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_WritePin+0x40>
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d004      	beq.n	8001b1c <HAL_GPIO_WritePin+0x40>
 8001b12:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001b16:	4809      	ldr	r0, [pc, #36]	; (8001b3c <HAL_GPIO_WritePin+0x60>)
 8001b18:	f7fe ff0b 	bl	8000932 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	619a      	str	r2, [r3, #24]
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08006e5c 	.word	0x08006e5c

08001b40 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d004      	beq.n	8001b5c <HAL_GPIO_TogglePin+0x1c>
 8001b52:	887b      	ldrh	r3, [r7, #2]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_GPIO_TogglePin+0x26>
 8001b5c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001b60:	480a      	ldr	r0, [pc, #40]	; (8001b8c <HAL_GPIO_TogglePin+0x4c>)
 8001b62:	f7fe fee6 	bl	8000932 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08006e5c 	.word	0x08006e5c

08001b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fd9c 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40013c00 	.word	0x40013c00

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e314      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	d903      	bls.n	8001be2 <HAL_RCC_OscConfig+0x22>
 8001bda:	21e6      	movs	r1, #230	; 0xe6
 8001bdc:	4897      	ldr	r0, [pc, #604]	; (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001bde:	f7fe fea8 	bl	8000932 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8088 	beq.w	8001d00 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_OscConfig+0x54>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d008      	beq.n	8001c14 <HAL_RCC_OscConfig+0x54>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0a:	d003      	beq.n	8001c14 <HAL_RCC_OscConfig+0x54>
 8001c0c:	21eb      	movs	r1, #235	; 0xeb
 8001c0e:	488b      	ldr	r0, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001c10:	f7fe fe8f 	bl	8000932 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c14:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d00c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c20:	4b87      	ldr	r3, [pc, #540]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d112      	bne.n	8001c52 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2c:	4b84      	ldr	r3, [pc, #528]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c38:	d10b      	bne.n	8001c52 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3a:	4b81      	ldr	r3, [pc, #516]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d05b      	beq.n	8001cfe <HAL_RCC_OscConfig+0x13e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d157      	bne.n	8001cfe <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e2d4      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0xaa>
 8001c5c:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e01d      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c72:	d10c      	bne.n	8001c8e <HAL_RCC_OscConfig+0xce>
 8001c74:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a71      	ldr	r2, [pc, #452]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e00b      	b.n	8001ca6 <HAL_RCC_OscConfig+0xe6>
 8001c8e:	4b6c      	ldr	r3, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a6b      	ldr	r2, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b69      	ldr	r3, [pc, #420]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d013      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff fa9d 	bl	80011ec <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fa99 	bl	80011ec <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e299      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
 8001cd4:	e014      	b.n	8001d00 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fa89 	bl	80011ec <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cde:	f7ff fa85 	bl	80011ec <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b64      	cmp	r3, #100	; 0x64
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e285      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x11e>
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d079      	beq.n	8001e00 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_OscConfig+0x166>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d004      	beq.n	8001d26 <HAL_RCC_OscConfig+0x166>
 8001d1c:	f240 111d 	movw	r1, #285	; 0x11d
 8001d20:	4846      	ldr	r0, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d22:	f7fe fe06 	bl	8000932 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b1f      	cmp	r3, #31
 8001d2c:	d904      	bls.n	8001d38 <HAL_RCC_OscConfig+0x178>
 8001d2e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001d32:	4842      	ldr	r0, [pc, #264]	; (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001d34:	f7fe fdfd 	bl	8000932 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d44:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d11c      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d50:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d116      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e243      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	492f      	ldr	r1, [pc, #188]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d88:	e03a      	b.n	8001e00 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_RCC_OscConfig+0x284>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7ff fa28 	bl	80011ec <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fa24 	bl	80011ec <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e224      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	491c      	ldr	r1, [pc, #112]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
 8001dd2:	e015      	b.n	8001e00 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x284>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fa07 	bl	80011ec <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fa03 	bl	80011ec <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e203      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_OscConfig+0x280>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d045      	beq.n	8001e98 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_RCC_OscConfig+0x266>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d004      	beq.n	8001e26 <HAL_RCC_OscConfig+0x266>
 8001e1c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001e20:	4806      	ldr	r0, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x27c>)
 8001e22:	f7fe fd86 	bl	8000932 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01e      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_OscConfig+0x288>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f9da 	bl	80011ec <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e010      	b.n	8001e5e <HAL_RCC_OscConfig+0x29e>
 8001e3c:	08006e98 	.word	0x08006e98
 8001e40:	40023800 	.word	0x40023800
 8001e44:	42470000 	.word	0x42470000
 8001e48:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7ff f9ce 	bl	80011ec <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1ce      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x28c>
 8001e6a:	e015      	b.n	8001e98 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6c:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_RCC_OscConfig+0x41c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7ff f9bb 	bl	80011ec <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff f9b7 	bl	80011ec <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1b7      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80b0 	beq.w	8002006 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x30c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d008      	beq.n	8001ecc <HAL_RCC_OscConfig+0x30c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d004      	beq.n	8001ecc <HAL_RCC_OscConfig+0x30c>
 8001ec2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8001ec6:	4846      	ldr	r0, [pc, #280]	; (8001fe0 <HAL_RCC_OscConfig+0x420>)
 8001ec8:	f7fe fd33 	bl	8000932 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10f      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <HAL_RCC_OscConfig+0x424>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d118      	bne.n	8001f36 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f04:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_RCC_OscConfig+0x424>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <HAL_RCC_OscConfig+0x424>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7ff f96c 	bl	80011ec <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7ff f968 	bl	80011ec <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e168      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_RCC_OscConfig+0x424>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0x38c>
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x3c6>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3ae>
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x3c6>
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f92d 	bl	80011ec <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff f929 	bl	80011ec <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e127      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_OscConfig+0x418>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3d6>
 8001fb8:	e01c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff f917 	bl	80011ec <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	e012      	b.n	8001fe8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff f913 	bl	80011ec <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d909      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e111      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	42470e80 	.word	0x42470e80
 8001fe0:	08006e98 	.word	0x08006e98
 8001fe4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe8:	4b86      	ldr	r3, [pc, #536]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1e6      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a81      	ldr	r2, [pc, #516]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00c      	beq.n	8002028 <HAL_RCC_OscConfig+0x468>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d008      	beq.n	8002028 <HAL_RCC_OscConfig+0x468>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d004      	beq.n	8002028 <HAL_RCC_OscConfig+0x468>
 800201e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002022:	4879      	ldr	r0, [pc, #484]	; (8002208 <HAL_RCC_OscConfig+0x648>)
 8002024:	f7fe fc85 	bl	8000932 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80e4 	beq.w	80021fa <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002032:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	f000 80a5 	beq.w	800218a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b02      	cmp	r3, #2
 8002046:	f040 8089 	bne.w	800215c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_OscConfig+0x4a6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205a:	d004      	beq.n	8002066 <HAL_RCC_OscConfig+0x4a6>
 800205c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002060:	4869      	ldr	r0, [pc, #420]	; (8002208 <HAL_RCC_OscConfig+0x648>)
 8002062:	f7fe fc66 	bl	8000932 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	2b3f      	cmp	r3, #63	; 0x3f
 800206c:	d904      	bls.n	8002078 <HAL_RCC_OscConfig+0x4b8>
 800206e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002072:	4865      	ldr	r0, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x648>)
 8002074:	f7fe fc5d 	bl	8000932 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	2b31      	cmp	r3, #49	; 0x31
 800207e:	d904      	bls.n	800208a <HAL_RCC_OscConfig+0x4ca>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002088:	d904      	bls.n	8002094 <HAL_RCC_OscConfig+0x4d4>
 800208a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800208e:	485e      	ldr	r0, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x648>)
 8002090:	f7fe fc4f 	bl	8000932 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	2b02      	cmp	r3, #2
 800209a:	d010      	beq.n	80020be <HAL_RCC_OscConfig+0x4fe>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d00c      	beq.n	80020be <HAL_RCC_OscConfig+0x4fe>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d008      	beq.n	80020be <HAL_RCC_OscConfig+0x4fe>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d004      	beq.n	80020be <HAL_RCC_OscConfig+0x4fe>
 80020b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80020b8:	4853      	ldr	r0, [pc, #332]	; (8002208 <HAL_RCC_OscConfig+0x648>)
 80020ba:	f7fe fc3a 	bl	8000932 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d903      	bls.n	80020ce <HAL_RCC_OscConfig+0x50e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	d904      	bls.n	80020d8 <HAL_RCC_OscConfig+0x518>
 80020ce:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80020d2:	484d      	ldr	r0, [pc, #308]	; (8002208 <HAL_RCC_OscConfig+0x648>)
 80020d4:	f7fe fc2d 	bl	8000932 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x64c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff f885 	bl	80011ec <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff f881 	bl	80011ec <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e081      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f8:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	3b01      	subs	r3, #1
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	4936      	ldr	r1, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x64c>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff f85a 	bl	80011ec <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff f856 	bl	80011ec <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e056      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x57c>
 800215a:	e04e      	b.n	80021fa <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_RCC_OscConfig+0x64c>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff f843 	bl	80011ec <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7ff f83f 	bl	80011ec <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e03f      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217c:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x5aa>
 8002188:	e037      	b.n	80021fa <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e032      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x644>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d028      	beq.n	80021f6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d121      	bne.n	80021f6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d11a      	bne.n	80021f6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c6:	4013      	ands	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d111      	bne.n	80021f6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	08006e98 	.word	0x08006e98
 800220c:	42470060 	.word	0x42470060

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e174      	b.n	800250e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_RCC_ClockConfig+0x24>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d904      	bls.n	800223e <HAL_RCC_ClockConfig+0x2e>
 8002234:	f240 215a 	movw	r1, #602	; 0x25a
 8002238:	487b      	ldr	r0, [pc, #492]	; (8002428 <HAL_RCC_ClockConfig+0x218>)
 800223a:	f7fe fb7a 	bl	8000932 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d019      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d016      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d013      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b03      	cmp	r3, #3
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d00d      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d00a      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d007      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b07      	cmp	r3, #7
 800226c:	d004      	beq.n	8002278 <HAL_RCC_ClockConfig+0x68>
 800226e:	f240 215b 	movw	r1, #603	; 0x25b
 8002272:	486d      	ldr	r0, [pc, #436]	; (8002428 <HAL_RCC_ClockConfig+0x218>)
 8002274:	f7fe fb5d 	bl	8000932 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b6c      	ldr	r3, [pc, #432]	; (800242c <HAL_RCC_ClockConfig+0x21c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d90c      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b69      	ldr	r3, [pc, #420]	; (800242c <HAL_RCC_ClockConfig+0x21c>)
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_ClockConfig+0x21c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e136      	b.n	800250e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d049      	beq.n	8002340 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a5c      	ldr	r2, [pc, #368]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80022be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d0:	4b57      	ldr	r3, [pc, #348]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a56      	ldr	r2, [pc, #344]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80022d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d024      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b90      	cmp	r3, #144	; 0x90
 80022f2:	d01c      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2ba0      	cmp	r3, #160	; 0xa0
 80022fa:	d018      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2bb0      	cmp	r3, #176	; 0xb0
 8002302:	d014      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2bc0      	cmp	r3, #192	; 0xc0
 800230a:	d010      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2bd0      	cmp	r3, #208	; 0xd0
 8002312:	d00c      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2be0      	cmp	r3, #224	; 0xe0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2bf0      	cmp	r3, #240	; 0xf0
 8002322:	d004      	beq.n	800232e <HAL_RCC_ClockConfig+0x11e>
 8002324:	f240 217e 	movw	r1, #638	; 0x27e
 8002328:	483f      	ldr	r0, [pc, #252]	; (8002428 <HAL_RCC_ClockConfig+0x218>)
 800232a:	f7fe fb02 	bl	8000932 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232e:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	493d      	ldr	r1, [pc, #244]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d059      	beq.n	8002400 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d00c      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d004      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
 800236c:	f240 2185 	movw	r1, #645	; 0x285
 8002370:	482d      	ldr	r0, [pc, #180]	; (8002428 <HAL_RCC_ClockConfig+0x218>)
 8002372:	f7fe fade 	bl	8000932 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d119      	bne.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0bf      	b.n	800250e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d003      	beq.n	800239e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	2b03      	cmp	r3, #3
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e0af      	b.n	800250e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0a7      	b.n	800250e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4919      	ldr	r1, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe ff0c 	bl	80011ec <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe ff08 	bl	80011ec <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e08f      	b.n	800250e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_ClockConfig+0x220>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x21c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d212      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_RCC_ClockConfig+0x21c>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_RCC_ClockConfig+0x21c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d007      	beq.n	8002434 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e072      	b.n	800250e <HAL_RCC_ClockConfig+0x2fe>
 8002428:	08006e98 	.word	0x08006e98
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d025      	beq.n	800248c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d018      	beq.n	800247a <HAL_RCC_ClockConfig+0x26a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002450:	d013      	beq.n	800247a <HAL_RCC_ClockConfig+0x26a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800245a:	d00e      	beq.n	800247a <HAL_RCC_ClockConfig+0x26a>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x26a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800246e:	d004      	beq.n	800247a <HAL_RCC_ClockConfig+0x26a>
 8002470:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002474:	4828      	ldr	r0, [pc, #160]	; (8002518 <HAL_RCC_ClockConfig+0x308>)
 8002476:	f7fe fa5c 	bl	8000932 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_ClockConfig+0x30c>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4925      	ldr	r1, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x30c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d026      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x2c2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a8:	d013      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x2c2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80024b2:	d00e      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x2c2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x2c2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80024c6:	d004      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x2c2>
 80024c8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80024cc:	4812      	ldr	r0, [pc, #72]	; (8002518 <HAL_RCC_ClockConfig+0x308>)
 80024ce:	f7fe fa30 	bl	8000932 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x30c>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x30c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x30c>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x310>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x314>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x318>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fe2c 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	08006e98 	.word	0x08006e98
 800251c:	40023800 	.word	0x40023800
 8002520:	08006f80 	.word	0x08006f80
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002530:	b094      	sub	sp, #80	; 0x50
 8002532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	647b      	str	r3, [r7, #68]	; 0x44
 8002538:	2300      	movs	r3, #0
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800253c:	2300      	movs	r3, #0
 800253e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d00d      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002550:	2b08      	cmp	r3, #8
 8002552:	f200 80e1 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x34>
 800255a:	2b04      	cmp	r3, #4
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x3a>
 800255e:	e0db      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002560:	4b73      	ldr	r3, [pc, #460]	; (8002730 <HAL_RCC_GetSysClockFreq+0x204>)
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002564:	e0db      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCC_GetSysClockFreq+0x208>)
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800256a:	e0d8      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002574:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002576:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d063      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	2200      	movs	r2, #0
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
 800258c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
 800259a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b0:	0150      	lsls	r0, r2, #5
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4621      	mov	r1, r4
 80025b8:	1a51      	subs	r1, r2, r1
 80025ba:	6139      	str	r1, [r7, #16]
 80025bc:	4629      	mov	r1, r5
 80025be:	eb63 0301 	sbc.w	r3, r3, r1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d0:	4659      	mov	r1, fp
 80025d2:	018b      	lsls	r3, r1, #6
 80025d4:	4651      	mov	r1, sl
 80025d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025da:	4651      	mov	r1, sl
 80025dc:	018a      	lsls	r2, r1, #6
 80025de:	4651      	mov	r1, sl
 80025e0:	ebb2 0801 	subs.w	r8, r2, r1
 80025e4:	4659      	mov	r1, fp
 80025e6:	eb63 0901 	sbc.w	r9, r3, r1
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025fe:	4690      	mov	r8, r2
 8002600:	4699      	mov	r9, r3
 8002602:	4623      	mov	r3, r4
 8002604:	eb18 0303 	adds.w	r3, r8, r3
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	462b      	mov	r3, r5
 800260c:	eb49 0303 	adc.w	r3, r9, r3
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800261e:	4629      	mov	r1, r5
 8002620:	024b      	lsls	r3, r1, #9
 8002622:	4621      	mov	r1, r4
 8002624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002628:	4621      	mov	r1, r4
 800262a:	024a      	lsls	r2, r1, #9
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002632:	2200      	movs	r2, #0
 8002634:	62bb      	str	r3, [r7, #40]	; 0x28
 8002636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800263c:	f7fd fe20 	bl	8000280 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002648:	e058      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	2200      	movs	r2, #0
 8002652:	4618      	mov	r0, r3
 8002654:	4611      	mov	r1, r2
 8002656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	f04f 0000 	mov.w	r0, #0
 800266c:	f04f 0100 	mov.w	r1, #0
 8002670:	0159      	lsls	r1, r3, #5
 8002672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002676:	0150      	lsls	r0, r2, #5
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4641      	mov	r1, r8
 800267e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002682:	4649      	mov	r1, r9
 8002684:	eb63 0b01 	sbc.w	fp, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800269c:	ebb2 040a 	subs.w	r4, r2, sl
 80026a0:	eb63 050b 	sbc.w	r5, r3, fp
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	00eb      	lsls	r3, r5, #3
 80026ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026b2:	00e2      	lsls	r2, r4, #3
 80026b4:	4614      	mov	r4, r2
 80026b6:	461d      	mov	r5, r3
 80026b8:	4643      	mov	r3, r8
 80026ba:	18e3      	adds	r3, r4, r3
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	464b      	mov	r3, r9
 80026c0:	eb45 0303 	adc.w	r3, r5, r3
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d2:	4629      	mov	r1, r5
 80026d4:	028b      	lsls	r3, r1, #10
 80026d6:	4621      	mov	r1, r4
 80026d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026dc:	4621      	mov	r1, r4
 80026de:	028a      	lsls	r2, r1, #10
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e6:	2200      	movs	r2, #0
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	61fa      	str	r2, [r7, #28]
 80026ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f0:	f7fd fdc6 	bl	8000280 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4613      	mov	r3, r2
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_GetSysClockFreq+0x200>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	3301      	adds	r3, #1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800270c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800270e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002716:	e002      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetSysClockFreq+0x204>)
 800271a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800271c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002720:	4618      	mov	r0, r3
 8002722:	3750      	adds	r7, #80	; 0x50
 8002724:	46bd      	mov	sp, r7
 8002726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	00f42400 	.word	0x00f42400
 8002734:	007a1200 	.word	0x007a1200

08002738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_RCC_GetHCLKFreq+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000000 	.word	0x20000000

08002750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002754:	f7ff fff0 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0a9b      	lsrs	r3, r3, #10
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4903      	ldr	r1, [pc, #12]	; (8002774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	08006f90 	.word	0x08006f90

08002778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800277c:	f7ff ffdc 	bl	8002738 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0b5b      	lsrs	r3, r3, #13
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_GetPCLK2Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	08006f90 	.word	0x08006f90

080027a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0a7      	b.n	8002902 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a55      	ldr	r2, [pc, #340]	; (800290c <HAL_TIM_Base_Init+0x16c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d027      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d022      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a51      	ldr	r2, [pc, #324]	; (8002910 <HAL_TIM_Base_Init+0x170>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d01d      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a4f      	ldr	r2, [pc, #316]	; (8002914 <HAL_TIM_Base_Init+0x174>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d018      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a4e      	ldr	r2, [pc, #312]	; (8002918 <HAL_TIM_Base_Init+0x178>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d013      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a4c      	ldr	r2, [pc, #304]	; (800291c <HAL_TIM_Base_Init+0x17c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00e      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a4b      	ldr	r2, [pc, #300]	; (8002920 <HAL_TIM_Base_Init+0x180>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d009      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a49      	ldr	r2, [pc, #292]	; (8002924 <HAL_TIM_Base_Init+0x184>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_TIM_Base_Init+0x6c>
 8002802:	f240 1113 	movw	r1, #275	; 0x113
 8002806:	4848      	ldr	r0, [pc, #288]	; (8002928 <HAL_TIM_Base_Init+0x188>)
 8002808:	f7fe f893 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d014      	beq.n	800283e <HAL_TIM_Base_Init+0x9e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b10      	cmp	r3, #16
 800281a:	d010      	beq.n	800283e <HAL_TIM_Base_Init+0x9e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b20      	cmp	r3, #32
 8002822:	d00c      	beq.n	800283e <HAL_TIM_Base_Init+0x9e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d008      	beq.n	800283e <HAL_TIM_Base_Init+0x9e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b60      	cmp	r3, #96	; 0x60
 8002832:	d004      	beq.n	800283e <HAL_TIM_Base_Init+0x9e>
 8002834:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002838:	483b      	ldr	r0, [pc, #236]	; (8002928 <HAL_TIM_Base_Init+0x188>)
 800283a:	f7fe f87a 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <HAL_TIM_Base_Init+0xc4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800284e:	d009      	beq.n	8002864 <HAL_TIM_Base_Init+0xc4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002858:	d004      	beq.n	8002864 <HAL_TIM_Base_Init+0xc4>
 800285a:	f240 1115 	movw	r1, #277	; 0x115
 800285e:	4832      	ldr	r0, [pc, #200]	; (8002928 <HAL_TIM_Base_Init+0x188>)
 8002860:	f7fe f867 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_TIM_Base_Init+0xde>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d004      	beq.n	800287e <HAL_TIM_Base_Init+0xde>
 8002874:	f44f 718b 	mov.w	r1, #278	; 0x116
 8002878:	482b      	ldr	r0, [pc, #172]	; (8002928 <HAL_TIM_Base_Init+0x188>)
 800287a:	f7fe f85a 	bl	8000932 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fadc 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f001 fc80 	bl	80041b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40000c00 	.word	0x40000c00
 800291c:	40014000 	.word	0x40014000
 8002920:	40014400 	.word	0x40014400
 8002924:	40014800 	.word	0x40014800
 8002928:	08006ed0 	.word	0x08006ed0

0800292c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a3d      	ldr	r2, [pc, #244]	; (8002a30 <HAL_TIM_Base_Start_IT+0x104>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d027      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002946:	d022      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a39      	ldr	r2, [pc, #228]	; (8002a34 <HAL_TIM_Base_Start_IT+0x108>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01d      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a38      	ldr	r2, [pc, #224]	; (8002a38 <HAL_TIM_Base_Start_IT+0x10c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d018      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a36      	ldr	r2, [pc, #216]	; (8002a3c <HAL_TIM_Base_Start_IT+0x110>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a35      	ldr	r2, [pc, #212]	; (8002a40 <HAL_TIM_Base_Start_IT+0x114>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a33      	ldr	r2, [pc, #204]	; (8002a44 <HAL_TIM_Base_Start_IT+0x118>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <HAL_TIM_Base_Start_IT+0x11c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_TIM_Base_Start_IT+0x62>
 8002984:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002988:	4830      	ldr	r0, [pc, #192]	; (8002a4c <HAL_TIM_Base_Start_IT+0x120>)
 800298a:	f7fd ffd2 	bl	8000932 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e044      	b.n	8002a28 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2202      	movs	r2, #2
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_TIM_Base_Start_IT+0x104>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0xc6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d013      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0xc6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_TIM_Base_Start_IT+0x108>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0xc6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_TIM_Base_Start_IT+0x10c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0xc6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <HAL_TIM_Base_Start_IT+0x110>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_TIM_Base_Start_IT+0xc6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_TIM_Base_Start_IT+0x114>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d111      	bne.n	8002a16 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d010      	beq.n	8002a26 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	e007      	b.n	8002a26 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40010000 	.word	0x40010000
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40000800 	.word	0x40000800
 8002a3c:	40000c00 	.word	0x40000c00
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800
 8002a4c:	08006ed0 	.word	0x08006ed0

08002a50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0a7      	b.n	8002bb2 <HAL_TIM_OC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a55      	ldr	r2, [pc, #340]	; (8002bbc <HAL_TIM_OC_Init+0x16c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d027      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a74:	d022      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a51      	ldr	r2, [pc, #324]	; (8002bc0 <HAL_TIM_OC_Init+0x170>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d01d      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <HAL_TIM_OC_Init+0x174>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d018      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_TIM_OC_Init+0x178>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a4c      	ldr	r2, [pc, #304]	; (8002bcc <HAL_TIM_OC_Init+0x17c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4b      	ldr	r2, [pc, #300]	; (8002bd0 <HAL_TIM_OC_Init+0x180>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a49      	ldr	r2, [pc, #292]	; (8002bd4 <HAL_TIM_OC_Init+0x184>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_TIM_OC_Init+0x6c>
 8002ab2:	f240 2192 	movw	r1, #658	; 0x292
 8002ab6:	4848      	ldr	r0, [pc, #288]	; (8002bd8 <HAL_TIM_OC_Init+0x188>)
 8002ab8:	f7fd ff3b 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d014      	beq.n	8002aee <HAL_TIM_OC_Init+0x9e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d010      	beq.n	8002aee <HAL_TIM_OC_Init+0x9e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d00c      	beq.n	8002aee <HAL_TIM_OC_Init+0x9e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b40      	cmp	r3, #64	; 0x40
 8002ada:	d008      	beq.n	8002aee <HAL_TIM_OC_Init+0x9e>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b60      	cmp	r3, #96	; 0x60
 8002ae2:	d004      	beq.n	8002aee <HAL_TIM_OC_Init+0x9e>
 8002ae4:	f240 2193 	movw	r1, #659	; 0x293
 8002ae8:	483b      	ldr	r0, [pc, #236]	; (8002bd8 <HAL_TIM_OC_Init+0x188>)
 8002aea:	f7fd ff22 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00e      	beq.n	8002b14 <HAL_TIM_OC_Init+0xc4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afe:	d009      	beq.n	8002b14 <HAL_TIM_OC_Init+0xc4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b08:	d004      	beq.n	8002b14 <HAL_TIM_OC_Init+0xc4>
 8002b0a:	f44f 7125 	mov.w	r1, #660	; 0x294
 8002b0e:	4832      	ldr	r0, [pc, #200]	; (8002bd8 <HAL_TIM_OC_Init+0x188>)
 8002b10:	f7fd ff0f 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_TIM_OC_Init+0xde>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d004      	beq.n	8002b2e <HAL_TIM_OC_Init+0xde>
 8002b24:	f240 2195 	movw	r1, #661	; 0x295
 8002b28:	482b      	ldr	r0, [pc, #172]	; (8002bd8 <HAL_TIM_OC_Init+0x188>)
 8002b2a:	f7fd ff02 	bl	8000932 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_OC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f84a 	bl	8002bdc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f001 fb28 	bl	80041b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40010000 	.word	0x40010000
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40000800 	.word	0x40000800
 8002bc8:	40000c00 	.word	0x40000c00
 8002bcc:	40014000 	.word	0x40014000
 8002bd0:	40014400 	.word	0x40014400
 8002bd4:	40014800 	.word	0x40014800
 8002bd8:	08006ed0 	.word	0x08006ed0

08002bdc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a83      	ldr	r2, [pc, #524]	; (8002e10 <HAL_TIM_OC_Start_IT+0x220>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d10b      	bne.n	8002c20 <HAL_TIM_OC_Start_IT+0x30>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d06c      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d069      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d066      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	d063      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c28:	d10b      	bne.n	8002c42 <HAL_TIM_OC_Start_IT+0x52>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d058      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d055      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d052      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a73      	ldr	r2, [pc, #460]	; (8002e14 <HAL_TIM_OC_Start_IT+0x224>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10b      	bne.n	8002c64 <HAL_TIM_OC_Start_IT+0x74>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04a      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d047      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d044      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d041      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a6b      	ldr	r2, [pc, #428]	; (8002e18 <HAL_TIM_OC_Start_IT+0x228>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10b      	bne.n	8002c86 <HAL_TIM_OC_Start_IT+0x96>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d039      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d036      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d033      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d030      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a64      	ldr	r2, [pc, #400]	; (8002e1c <HAL_TIM_OC_Start_IT+0x22c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_TIM_OC_Start_IT+0xb8>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d028      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d025      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d022      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d01f      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a5c      	ldr	r2, [pc, #368]	; (8002e20 <HAL_TIM_OC_Start_IT+0x230>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d105      	bne.n	8002cbe <HAL_TIM_OC_Start_IT+0xce>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d014      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a58      	ldr	r2, [pc, #352]	; (8002e24 <HAL_TIM_OC_Start_IT+0x234>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <HAL_TIM_OC_Start_IT+0xde>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a55      	ldr	r2, [pc, #340]	; (8002e28 <HAL_TIM_OC_Start_IT+0x238>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d102      	bne.n	8002cde <HAL_TIM_OC_Start_IT+0xee>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_TIM_OC_Start_IT+0xf8>
 8002cde:	f240 3172 	movw	r1, #882	; 0x372
 8002ce2:	4852      	ldr	r0, [pc, #328]	; (8002e2c <HAL_TIM_OC_Start_IT+0x23c>)
 8002ce4:	f7fd fe25 	bl	8000932 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HAL_TIM_OC_Start_IT+0x112>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e022      	b.n	8002d48 <HAL_TIM_OC_Start_IT+0x158>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d109      	bne.n	8002d1c <HAL_TIM_OC_Start_IT+0x12c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e015      	b.n	8002d48 <HAL_TIM_OC_Start_IT+0x158>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d109      	bne.n	8002d36 <HAL_TIM_OC_Start_IT+0x146>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e008      	b.n	8002d48 <HAL_TIM_OC_Start_IT+0x158>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	bf14      	ite	ne
 8002d42:	2301      	movne	r3, #1
 8002d44:	2300      	moveq	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_TIM_OC_Start_IT+0x160>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0c2      	b.n	8002ed6 <HAL_TIM_OC_Start_IT+0x2e6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <HAL_TIM_OC_Start_IT+0x170>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5e:	e013      	b.n	8002d88 <HAL_TIM_OC_Start_IT+0x198>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d104      	bne.n	8002d70 <HAL_TIM_OC_Start_IT+0x180>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6e:	e00b      	b.n	8002d88 <HAL_TIM_OC_Start_IT+0x198>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d104      	bne.n	8002d80 <HAL_TIM_OC_Start_IT+0x190>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7e:	e003      	b.n	8002d88 <HAL_TIM_OC_Start_IT+0x198>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b0c      	cmp	r3, #12
 8002d8c:	d850      	bhi.n	8002e30 <HAL_TIM_OC_Start_IT+0x240>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <HAL_TIM_OC_Start_IT+0x1a4>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002dc9 	.word	0x08002dc9
 8002d98:	08002e31 	.word	0x08002e31
 8002d9c:	08002e31 	.word	0x08002e31
 8002da0:	08002e31 	.word	0x08002e31
 8002da4:	08002ddb 	.word	0x08002ddb
 8002da8:	08002e31 	.word	0x08002e31
 8002dac:	08002e31 	.word	0x08002e31
 8002db0:	08002e31 	.word	0x08002e31
 8002db4:	08002ded 	.word	0x08002ded
 8002db8:	08002e31 	.word	0x08002e31
 8002dbc:	08002e31 	.word	0x08002e31
 8002dc0:	08002e31 	.word	0x08002e31
 8002dc4:	08002dff 	.word	0x08002dff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0202 	orr.w	r2, r2, #2
 8002dd6:	60da      	str	r2, [r3, #12]
      break;
 8002dd8:	e02d      	b.n	8002e36 <HAL_TIM_OC_Start_IT+0x246>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0204 	orr.w	r2, r2, #4
 8002de8:	60da      	str	r2, [r3, #12]
      break;
 8002dea:	e024      	b.n	8002e36 <HAL_TIM_OC_Start_IT+0x246>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0208 	orr.w	r2, r2, #8
 8002dfa:	60da      	str	r2, [r3, #12]
      break;
 8002dfc:	e01b      	b.n	8002e36 <HAL_TIM_OC_Start_IT+0x246>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0210 	orr.w	r2, r2, #16
 8002e0c:	60da      	str	r2, [r3, #12]
      break;
 8002e0e:	e012      	b.n	8002e36 <HAL_TIM_OC_Start_IT+0x246>
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800
 8002e1c:	40000c00 	.word	0x40000c00
 8002e20:	40014000 	.word	0x40014000
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	08006ed0 	.word	0x08006ed0
    }

    default:
      status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      break;
 8002e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d14b      	bne.n	8002ed4 <HAL_TIM_OC_Start_IT+0x2e4>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 fe01 	bl	8004a4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a24      	ldr	r2, [pc, #144]	; (8002ee0 <HAL_TIM_OC_Start_IT+0x2f0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_OC_Start_IT+0x274>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_TIM_OC_Start_IT+0x2f0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d013      	beq.n	8002ea0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <HAL_TIM_OC_Start_IT+0x2f4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_TIM_OC_Start_IT+0x2f8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a16      	ldr	r2, [pc, #88]	; (8002eec <HAL_TIM_OC_Start_IT+0x2fc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIM_OC_Start_IT+0x2b0>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_TIM_OC_Start_IT+0x300>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d111      	bne.n	8002ec4 <HAL_TIM_OC_Start_IT+0x2d4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d010      	beq.n	8002ed4 <HAL_TIM_OC_Start_IT+0x2e4>
      {
        __HAL_TIM_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec2:	e007      	b.n	8002ed4 <HAL_TIM_OC_Start_IT+0x2e4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40014000 	.word	0x40014000

08002ef4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0a7      	b.n	8003056 <HAL_TIM_IC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <HAL_TIM_IC_Init+0x16c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d027      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d022      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a51      	ldr	r2, [pc, #324]	; (8003064 <HAL_TIM_IC_Init+0x170>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d01d      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <HAL_TIM_IC_Init+0x174>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a4e      	ldr	r2, [pc, #312]	; (800306c <HAL_TIM_IC_Init+0x178>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a4c      	ldr	r2, [pc, #304]	; (8003070 <HAL_TIM_IC_Init+0x17c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_TIM_IC_Init+0x180>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a49      	ldr	r2, [pc, #292]	; (8003078 <HAL_TIM_IC_Init+0x184>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_IC_Init+0x6c>
 8002f56:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8002f5a:	4848      	ldr	r0, [pc, #288]	; (800307c <HAL_TIM_IC_Init+0x188>)
 8002f5c:	f7fd fce9 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d014      	beq.n	8002f92 <HAL_TIM_IC_Init+0x9e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d010      	beq.n	8002f92 <HAL_TIM_IC_Init+0x9e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d00c      	beq.n	8002f92 <HAL_TIM_IC_Init+0x9e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d008      	beq.n	8002f92 <HAL_TIM_IC_Init+0x9e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b60      	cmp	r3, #96	; 0x60
 8002f86:	d004      	beq.n	8002f92 <HAL_TIM_IC_Init+0x9e>
 8002f88:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8002f8c:	483b      	ldr	r0, [pc, #236]	; (800307c <HAL_TIM_IC_Init+0x188>)
 8002f8e:	f7fd fcd0 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00e      	beq.n	8002fb8 <HAL_TIM_IC_Init+0xc4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa2:	d009      	beq.n	8002fb8 <HAL_TIM_IC_Init+0xc4>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fac:	d004      	beq.n	8002fb8 <HAL_TIM_IC_Init+0xc4>
 8002fae:	f240 71c1 	movw	r1, #1985	; 0x7c1
 8002fb2:	4832      	ldr	r0, [pc, #200]	; (800307c <HAL_TIM_IC_Init+0x188>)
 8002fb4:	f7fd fcbd 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_TIM_IC_Init+0xde>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b80      	cmp	r3, #128	; 0x80
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIM_IC_Init+0xde>
 8002fc8:	f240 71c2 	movw	r1, #1986	; 0x7c2
 8002fcc:	482b      	ldr	r0, [pc, #172]	; (800307c <HAL_TIM_IC_Init+0x188>)
 8002fce:	f7fd fcb0 	bl	8000932 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_TIM_IC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f84a 	bl	8003080 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f001 f8d6 	bl	80041b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800
 800306c:	40000c00 	.word	0x40000c00
 8003070:	40014000 	.word	0x40014000
 8003074:	40014400 	.word	0x40014400
 8003078:	40014800 	.word	0x40014800
 800307c:	08006ed0 	.word	0x08006ed0

08003080 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <HAL_TIM_IC_Start_IT+0x1e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e013      	b.n	80030da <HAL_TIM_IC_Start_IT+0x46>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d104      	bne.n	80030c2 <HAL_TIM_IC_Start_IT+0x2e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	e00b      	b.n	80030da <HAL_TIM_IC_Start_IT+0x46>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d104      	bne.n	80030d2 <HAL_TIM_IC_Start_IT+0x3e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e003      	b.n	80030da <HAL_TIM_IC_Start_IT+0x46>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_TIM_IC_Start_IT+0x58>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e013      	b.n	8003114 <HAL_TIM_IC_Start_IT+0x80>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d104      	bne.n	80030fc <HAL_TIM_IC_Start_IT+0x68>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e00b      	b.n	8003114 <HAL_TIM_IC_Start_IT+0x80>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d104      	bne.n	800310c <HAL_TIM_IC_Start_IT+0x78>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e003      	b.n	8003114 <HAL_TIM_IC_Start_IT+0x80>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003112:	b2db      	uxtb	r3, r3
 8003114:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7b      	ldr	r2, [pc, #492]	; (8003308 <HAL_TIM_IC_Start_IT+0x274>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10b      	bne.n	8003138 <HAL_TIM_IC_Start_IT+0xa4>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d06c      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d069      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d066      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d063      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003140:	d10b      	bne.n	800315a <HAL_TIM_IC_Start_IT+0xc6>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05b      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d058      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b08      	cmp	r3, #8
 8003152:	d055      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d052      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6b      	ldr	r2, [pc, #428]	; (800330c <HAL_TIM_IC_Start_IT+0x278>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10b      	bne.n	800317c <HAL_TIM_IC_Start_IT+0xe8>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04a      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d047      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d044      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d041      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_TIM_IC_Start_IT+0x27c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10b      	bne.n	800319e <HAL_TIM_IC_Start_IT+0x10a>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d039      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b04      	cmp	r3, #4
 8003190:	d036      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b08      	cmp	r3, #8
 8003196:	d033      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d030      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5c      	ldr	r2, [pc, #368]	; (8003314 <HAL_TIM_IC_Start_IT+0x280>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10b      	bne.n	80031c0 <HAL_TIM_IC_Start_IT+0x12c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d028      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d025      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d022      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d01f      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_TIM_IC_Start_IT+0x284>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d105      	bne.n	80031d6 <HAL_TIM_IC_Start_IT+0x142>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d017      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d014      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_TIM_IC_Start_IT+0x288>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d102      	bne.n	80031e6 <HAL_TIM_IC_Start_IT+0x152>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a4d      	ldr	r2, [pc, #308]	; (8003320 <HAL_TIM_IC_Start_IT+0x28c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d102      	bne.n	80031f6 <HAL_TIM_IC_Start_IT+0x162>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <HAL_TIM_IC_Start_IT+0x16c>
 80031f6:	f640 019b 	movw	r1, #2203	; 0x89b
 80031fa:	484a      	ldr	r0, [pc, #296]	; (8003324 <HAL_TIM_IC_Start_IT+0x290>)
 80031fc:	f7fd fb99 	bl	8000932 <assert_failed>

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d102      	bne.n	800320c <HAL_TIM_IC_Start_IT+0x178>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003206:	7b7b      	ldrb	r3, [r7, #13]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_TIM_IC_Start_IT+0x17c>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0d1      	b.n	80033b4 <HAL_TIM_IC_Start_IT+0x320>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_TIM_IC_Start_IT+0x18c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321e:	e013      	b.n	8003248 <HAL_TIM_IC_Start_IT+0x1b4>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d104      	bne.n	8003230 <HAL_TIM_IC_Start_IT+0x19c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322e:	e00b      	b.n	8003248 <HAL_TIM_IC_Start_IT+0x1b4>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b08      	cmp	r3, #8
 8003234:	d104      	bne.n	8003240 <HAL_TIM_IC_Start_IT+0x1ac>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323e:	e003      	b.n	8003248 <HAL_TIM_IC_Start_IT+0x1b4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <HAL_TIM_IC_Start_IT+0x1c4>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003256:	e013      	b.n	8003280 <HAL_TIM_IC_Start_IT+0x1ec>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d104      	bne.n	8003268 <HAL_TIM_IC_Start_IT+0x1d4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003266:	e00b      	b.n	8003280 <HAL_TIM_IC_Start_IT+0x1ec>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d104      	bne.n	8003278 <HAL_TIM_IC_Start_IT+0x1e4>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003276:	e003      	b.n	8003280 <HAL_TIM_IC_Start_IT+0x1ec>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d850      	bhi.n	8003328 <HAL_TIM_IC_Start_IT+0x294>
 8003286:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_TIM_IC_Start_IT+0x1f8>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032c1 	.word	0x080032c1
 8003290:	08003329 	.word	0x08003329
 8003294:	08003329 	.word	0x08003329
 8003298:	08003329 	.word	0x08003329
 800329c:	080032d3 	.word	0x080032d3
 80032a0:	08003329 	.word	0x08003329
 80032a4:	08003329 	.word	0x08003329
 80032a8:	08003329 	.word	0x08003329
 80032ac:	080032e5 	.word	0x080032e5
 80032b0:	08003329 	.word	0x08003329
 80032b4:	08003329 	.word	0x08003329
 80032b8:	08003329 	.word	0x08003329
 80032bc:	080032f7 	.word	0x080032f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0202 	orr.w	r2, r2, #2
 80032ce:	60da      	str	r2, [r3, #12]
      break;
 80032d0:	e02d      	b.n	800332e <HAL_TIM_IC_Start_IT+0x29a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0204 	orr.w	r2, r2, #4
 80032e0:	60da      	str	r2, [r3, #12]
      break;
 80032e2:	e024      	b.n	800332e <HAL_TIM_IC_Start_IT+0x29a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0208 	orr.w	r2, r2, #8
 80032f2:	60da      	str	r2, [r3, #12]
      break;
 80032f4:	e01b      	b.n	800332e <HAL_TIM_IC_Start_IT+0x29a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0210 	orr.w	r2, r2, #16
 8003304:	60da      	str	r2, [r3, #12]
      break;
 8003306:	e012      	b.n	800332e <HAL_TIM_IC_Start_IT+0x29a>
 8003308:	40010000 	.word	0x40010000
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800
 8003314:	40000c00 	.word	0x40000c00
 8003318:	40014000 	.word	0x40014000
 800331c:	40014400 	.word	0x40014400
 8003320:	40014800 	.word	0x40014800
 8003324:	08006ed0 	.word	0x08006ed0
    }

    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	bf00      	nop
  }

  if (status == HAL_OK)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d13e      	bne.n	80033b2 <HAL_TIM_IC_Start_IT+0x31e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f001 fb85 	bl	8004a4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_TIM_IC_Start_IT+0x328>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x2ea>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d013      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x2ea>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <HAL_TIM_IC_Start_IT+0x32c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x2ea>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_TIM_IC_Start_IT+0x330>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x2ea>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <HAL_TIM_IC_Start_IT+0x334>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIM_IC_Start_IT+0x2ea>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_TIM_IC_Start_IT+0x338>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_TIM_IC_Start_IT+0x30e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b06      	cmp	r3, #6
 800338e:	d010      	beq.n	80033b2 <HAL_TIM_IC_Start_IT+0x31e>
      {
        __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	e007      	b.n	80033b2 <HAL_TIM_IC_Start_IT+0x31e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40014000 	.word	0x40014000

080033d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0202 	mvn.w	r2, #2
 80033fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd f9c0 	bl	8000798 <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 feaa 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 feb1 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b04      	cmp	r3, #4
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0204 	mvn.w	r2, #4
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd f996 	bl	8000798 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fe80 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fe87 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b08      	cmp	r3, #8
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b08      	cmp	r3, #8
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0208 	mvn.w	r2, #8
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2204      	movs	r2, #4
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd f96c 	bl	8000798 <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fe56 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fe5d 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0210 	mvn.w	r2, #16
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2208      	movs	r2, #8
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd f942 	bl	8000798 <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fe2c 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fe33 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0201 	mvn.w	r2, #1
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd f90c 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f001 fb9a 	bl	8004cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fdf8 	bl	800419c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0220 	mvn.w	r2, #32
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 fb64 	bl	8004ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_TIM_OC_ConfigChannel+0x38>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d00d      	beq.n	8003618 <HAL_TIM_OC_ConfigChannel+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d00a      	beq.n	8003618 <HAL_TIM_OC_ConfigChannel+0x38>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d007      	beq.n	8003618 <HAL_TIM_OC_ConfigChannel+0x38>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b3c      	cmp	r3, #60	; 0x3c
 800360c:	d004      	beq.n	8003618 <HAL_TIM_OC_ConfigChannel+0x38>
 800360e:	f640 71c5 	movw	r1, #4037	; 0xfc5
 8003612:	4886      	ldr	r0, [pc, #536]	; (800382c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003614:	f7fd f98d 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d018      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x72>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b10      	cmp	r3, #16
 8003626:	d014      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x72>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b20      	cmp	r3, #32
 800362e:	d010      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x72>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d00c      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x72>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b50      	cmp	r3, #80	; 0x50
 800363e:	d008      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x72>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d004      	beq.n	8003652 <HAL_TIM_OC_ConfigChannel+0x72>
 8003648:	f640 71c6 	movw	r1, #4038	; 0xfc6
 800364c:	4877      	ldr	r0, [pc, #476]	; (800382c <HAL_TIM_OC_ConfigChannel+0x24c>)
 800364e:	f7fd f970 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_TIM_OC_ConfigChannel+0x8c>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d004      	beq.n	800366c <HAL_TIM_OC_ConfigChannel+0x8c>
 8003662:	f640 71c7 	movw	r1, #4039	; 0xfc7
 8003666:	4871      	ldr	r0, [pc, #452]	; (800382c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003668:	f7fd f963 	bl	8000932 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_TIM_OC_ConfigChannel+0x9a>
 8003676:	2302      	movs	r3, #2
 8003678:	e0d4      	b.n	8003824 <HAL_TIM_OC_ConfigChannel+0x244>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	f200 80c5 	bhi.w	8003814 <HAL_TIM_OC_ConfigChannel+0x234>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <HAL_TIM_OC_ConfigChannel+0xb0>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036c5 	.word	0x080036c5
 8003694:	08003815 	.word	0x08003815
 8003698:	08003815 	.word	0x08003815
 800369c:	08003815 	.word	0x08003815
 80036a0:	0800372d 	.word	0x0800372d
 80036a4:	08003815 	.word	0x08003815
 80036a8:	08003815 	.word	0x08003815
 80036ac:	08003815 	.word	0x08003815
 80036b0:	08003781 	.word	0x08003781
 80036b4:	08003815 	.word	0x08003815
 80036b8:	08003815 	.word	0x08003815
 80036bc:	08003815 	.word	0x08003815
 80036c0:	080037cb 	.word	0x080037cb
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a59      	ldr	r2, [pc, #356]	; (8003830 <HAL_TIM_OC_ConfigChannel+0x250>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d027      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d6:	d022      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a55      	ldr	r2, [pc, #340]	; (8003834 <HAL_TIM_OC_ConfigChannel+0x254>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01d      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a54      	ldr	r2, [pc, #336]	; (8003838 <HAL_TIM_OC_ConfigChannel+0x258>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_TIM_OC_ConfigChannel+0x25c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a51      	ldr	r2, [pc, #324]	; (8003840 <HAL_TIM_OC_ConfigChannel+0x260>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a4f      	ldr	r2, [pc, #316]	; (8003844 <HAL_TIM_OC_ConfigChannel+0x264>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <HAL_TIM_OC_ConfigChannel+0x268>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIM_OC_ConfigChannel+0x13e>
 8003714:	f640 71d1 	movw	r1, #4049	; 0xfd1
 8003718:	4844      	ldr	r0, [pc, #272]	; (800382c <HAL_TIM_OC_ConfigChannel+0x24c>)
 800371a:	f7fd f90a 	bl	8000932 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fdc3 	bl	80042b0 <TIM_OC1_SetConfig>
      break;
 800372a:	e076      	b.n	800381a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3f      	ldr	r2, [pc, #252]	; (8003830 <HAL_TIM_OC_ConfigChannel+0x250>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01d      	beq.n	8003772 <HAL_TIM_OC_ConfigChannel+0x192>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d018      	beq.n	8003772 <HAL_TIM_OC_ConfigChannel+0x192>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <HAL_TIM_OC_ConfigChannel+0x254>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_TIM_OC_ConfigChannel+0x192>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a3a      	ldr	r2, [pc, #232]	; (8003838 <HAL_TIM_OC_ConfigChannel+0x258>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00e      	beq.n	8003772 <HAL_TIM_OC_ConfigChannel+0x192>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a38      	ldr	r2, [pc, #224]	; (800383c <HAL_TIM_OC_ConfigChannel+0x25c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d009      	beq.n	8003772 <HAL_TIM_OC_ConfigChannel+0x192>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a37      	ldr	r2, [pc, #220]	; (8003840 <HAL_TIM_OC_ConfigChannel+0x260>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_TIM_OC_ConfigChannel+0x192>
 8003768:	f640 71db 	movw	r1, #4059	; 0xfdb
 800376c:	482f      	ldr	r0, [pc, #188]	; (800382c <HAL_TIM_OC_ConfigChannel+0x24c>)
 800376e:	f7fd f8e0 	bl	8000932 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fe29 	bl	80043d0 <TIM_OC2_SetConfig>
      break;
 800377e:	e04c      	b.n	800381a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <HAL_TIM_OC_ConfigChannel+0x250>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d018      	beq.n	80037bc <HAL_TIM_OC_ConfigChannel+0x1dc>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003792:	d013      	beq.n	80037bc <HAL_TIM_OC_ConfigChannel+0x1dc>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <HAL_TIM_OC_ConfigChannel+0x254>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00e      	beq.n	80037bc <HAL_TIM_OC_ConfigChannel+0x1dc>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <HAL_TIM_OC_ConfigChannel+0x258>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_TIM_OC_ConfigChannel+0x1dc>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_TIM_OC_ConfigChannel+0x25c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_TIM_OC_ConfigChannel+0x1dc>
 80037b2:	f640 71e5 	movw	r1, #4069	; 0xfe5
 80037b6:	481d      	ldr	r0, [pc, #116]	; (800382c <HAL_TIM_OC_ConfigChannel+0x24c>)
 80037b8:	f7fd f8bb 	bl	8000932 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fe98 	bl	80044f8 <TIM_OC3_SetConfig>
      break;
 80037c8:	e027      	b.n	800381a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIM_OC_ConfigChannel+0x250>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d018      	beq.n	8003806 <HAL_TIM_OC_ConfigChannel+0x226>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037dc:	d013      	beq.n	8003806 <HAL_TIM_OC_ConfigChannel+0x226>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a14      	ldr	r2, [pc, #80]	; (8003834 <HAL_TIM_OC_ConfigChannel+0x254>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_TIM_OC_ConfigChannel+0x226>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a12      	ldr	r2, [pc, #72]	; (8003838 <HAL_TIM_OC_ConfigChannel+0x258>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_TIM_OC_ConfigChannel+0x226>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a11      	ldr	r2, [pc, #68]	; (800383c <HAL_TIM_OC_ConfigChannel+0x25c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_TIM_OC_ConfigChannel+0x226>
 80037fc:	f640 71ef 	movw	r1, #4079	; 0xfef
 8003800:	480a      	ldr	r0, [pc, #40]	; (800382c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8003802:	f7fd f896 	bl	8000932 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 ff07 	bl	8004620 <TIM_OC4_SetConfig>
      break;
 8003812:	e002      	b.n	800381a <HAL_TIM_OC_ConfigChannel+0x23a>
    }

    default:
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
      break;
 8003818:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003822:	7dfb      	ldrb	r3, [r7, #23]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	08006ed0 	.word	0x08006ed0
 8003830:	40010000 	.word	0x40010000
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800

0800384c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a8a      	ldr	r2, [pc, #552]	; (8003a8c <HAL_TIM_IC_ConfigChannel+0x240>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d027      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d022      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a86      	ldr	r2, [pc, #536]	; (8003a90 <HAL_TIM_IC_ConfigChannel+0x244>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01d      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a85      	ldr	r2, [pc, #532]	; (8003a94 <HAL_TIM_IC_ConfigChannel+0x248>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d018      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a83      	ldr	r2, [pc, #524]	; (8003a98 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d013      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a82      	ldr	r2, [pc, #520]	; (8003a9c <HAL_TIM_IC_ConfigChannel+0x250>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00e      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a80      	ldr	r2, [pc, #512]	; (8003aa0 <HAL_TIM_IC_ConfigChannel+0x254>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d009      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a7f      	ldr	r2, [pc, #508]	; (8003aa4 <HAL_TIM_IC_ConfigChannel+0x258>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <HAL_TIM_IC_ConfigChannel+0x6a>
 80038ac:	f241 0112 	movw	r1, #4114	; 0x1012
 80038b0:	487d      	ldr	r0, [pc, #500]	; (8003aa8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 80038b2:	f7fd f83e 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x8c>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d008      	beq.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x8c>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b0a      	cmp	r3, #10
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_IC_ConfigChannel+0x8c>
 80038ce:	f241 0113 	movw	r1, #4115	; 0x1013
 80038d2:	4875      	ldr	r0, [pc, #468]	; (8003aa8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 80038d4:	f7fd f82d 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d00c      	beq.n	80038fa <HAL_TIM_IC_ConfigChannel+0xae>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d008      	beq.n	80038fa <HAL_TIM_IC_ConfigChannel+0xae>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_IC_ConfigChannel+0xae>
 80038f0:	f241 0114 	movw	r1, #4116	; 0x1014
 80038f4:	486c      	ldr	r0, [pc, #432]	; (8003aa8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 80038f6:	f7fd f81c 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d010      	beq.n	8003924 <HAL_TIM_IC_ConfigChannel+0xd8>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b04      	cmp	r3, #4
 8003908:	d00c      	beq.n	8003924 <HAL_TIM_IC_ConfigChannel+0xd8>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b08      	cmp	r3, #8
 8003910:	d008      	beq.n	8003924 <HAL_TIM_IC_ConfigChannel+0xd8>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	d004      	beq.n	8003924 <HAL_TIM_IC_ConfigChannel+0xd8>
 800391a:	f241 0115 	movw	r1, #4117	; 0x1015
 800391e:	4862      	ldr	r0, [pc, #392]	; (8003aa8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003920:	f7fd f807 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d904      	bls.n	8003936 <HAL_TIM_IC_ConfigChannel+0xea>
 800392c:	f241 0116 	movw	r1, #4118	; 0x1016
 8003930:	485d      	ldr	r0, [pc, #372]	; (8003aa8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003932:	f7fc fffe 	bl	8000932 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_TIM_IC_ConfigChannel+0xf8>
 8003940:	2302      	movs	r3, #2
 8003942:	e0f8      	b.n	8003b36 <HAL_TIM_IC_ConfigChannel+0x2ea>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11b      	bne.n	800398a <HAL_TIM_IC_ConfigChannel+0x13e>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f000 febb 	bl	80046dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 020c 	bic.w	r2, r2, #12
 8003974:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6999      	ldr	r1, [r3, #24]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	619a      	str	r2, [r3, #24]
 8003988:	e0d0      	b.n	8003b2c <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d13f      	bne.n	8003a10 <HAL_TIM_IC_ConfigChannel+0x1c4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a3d      	ldr	r2, [pc, #244]	; (8003a8c <HAL_TIM_IC_ConfigChannel+0x240>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01d      	beq.n	80039d6 <HAL_TIM_IC_ConfigChannel+0x18a>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a2:	d018      	beq.n	80039d6 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a39      	ldr	r2, [pc, #228]	; (8003a90 <HAL_TIM_IC_ConfigChannel+0x244>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a38      	ldr	r2, [pc, #224]	; (8003a94 <HAL_TIM_IC_ConfigChannel+0x248>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00e      	beq.n	80039d6 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <HAL_TIM_IC_ConfigChannel+0x24c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d009      	beq.n	80039d6 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a35      	ldr	r2, [pc, #212]	; (8003a9c <HAL_TIM_IC_ConfigChannel+0x250>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d004      	beq.n	80039d6 <HAL_TIM_IC_ConfigChannel+0x18a>
 80039cc:	f241 012c 	movw	r1, #4140	; 0x102c
 80039d0:	4835      	ldr	r0, [pc, #212]	; (8003aa8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 80039d2:	f7fc ffae 	bl	8000932 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f000 ff10 	bl	800480a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6999      	ldr	r1, [r3, #24]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	021a      	lsls	r2, r3, #8
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	619a      	str	r2, [r3, #24]
 8003a0e:	e08d      	b.n	8003b2c <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d14a      	bne.n	8003aac <HAL_TIM_IC_ConfigChannel+0x260>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <HAL_TIM_IC_ConfigChannel+0x240>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d013      	beq.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_TIM_IC_ConfigChannel+0x244>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIM_IC_ConfigChannel+0x248>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <HAL_TIM_IC_ConfigChannel+0x24c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x206>
 8003a48:	f241 013c 	movw	r1, #4156	; 0x103c
 8003a4c:	4816      	ldr	r0, [pc, #88]	; (8003aa8 <HAL_TIM_IC_ConfigChannel+0x25c>)
 8003a4e:	f7fc ff70 	bl	8000932 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f000 ff3f 	bl	80048e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 020c 	bic.w	r2, r2, #12
 8003a74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69d9      	ldr	r1, [r3, #28]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	61da      	str	r2, [r3, #28]
 8003a88:	e050      	b.n	8003b2c <HAL_TIM_IC_ConfigChannel+0x2e0>
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800
 8003aa8:	08006ed0 	.word	0x08006ed0
  }
  else if (Channel == TIM_CHANNEL_4)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b0c      	cmp	r3, #12
 8003ab0:	d13a      	bne.n	8003b28 <HAL_TIM_IC_ConfigChannel+0x2dc>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <HAL_TIM_IC_ConfigChannel+0x2f4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d013      	beq.n	8003aee <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <HAL_TIM_IC_ConfigChannel+0x2f8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_TIM_IC_ConfigChannel+0x2fc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <HAL_TIM_IC_ConfigChannel+0x300>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIM_IC_ConfigChannel+0x2a2>
 8003ae4:	f241 014c 	movw	r1, #4172	; 0x104c
 8003ae8:	4819      	ldr	r0, [pc, #100]	; (8003b50 <HAL_TIM_IC_ConfigChannel+0x304>)
 8003aea:	f7fc ff22 	bl	8000932 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f000 ff2d 	bl	800495c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69d9      	ldr	r1, [r3, #28]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	021a      	lsls	r2, r3, #8
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	61da      	str	r2, [r3, #28]
 8003b26:	e001      	b.n	8003b2c <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else
  {
    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40000800 	.word	0x40000800
 8003b4c:	40000c00 	.word	0x40000c00
 8003b50:	08006ed0 	.word	0x08006ed0

08003b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_ConfigClockSource+0x1c>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e2f0      	b.n	8004152 <HAL_TIM_ConfigClockSource+0x5fe>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b88:	d029      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b70      	cmp	r3, #112	; 0x70
 8003b90:	d025      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9a:	d020      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	d01c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b50      	cmp	r3, #80	; 0x50
 8003baa:	d018      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b60      	cmp	r3, #96	; 0x60
 8003bb2:	d014      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d010      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d00c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d008      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b30      	cmp	r3, #48	; 0x30
 8003bd2:	d004      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0x8a>
 8003bd4:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8003bd8:	487c      	ldr	r0, [pc, #496]	; (8003dcc <HAL_TIM_ConfigClockSource+0x278>)
 8003bda:	f7fc feaa 	bl	8000932 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c06:	f000 80f1 	beq.w	8003dec <HAL_TIM_ConfigClockSource+0x298>
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0e:	f200 8293 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	d02d      	beq.n	8003c74 <HAL_TIM_ConfigClockSource+0x120>
 8003c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c1c:	f200 828c 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c20:	2b70      	cmp	r3, #112	; 0x70
 8003c22:	d05d      	beq.n	8003ce0 <HAL_TIM_ConfigClockSource+0x18c>
 8003c24:	2b70      	cmp	r3, #112	; 0x70
 8003c26:	f200 8287 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c2a:	2b60      	cmp	r3, #96	; 0x60
 8003c2c:	f000 81a0 	beq.w	8003f70 <HAL_TIM_ConfigClockSource+0x41c>
 8003c30:	2b60      	cmp	r3, #96	; 0x60
 8003c32:	f200 8281 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c36:	2b50      	cmp	r3, #80	; 0x50
 8003c38:	f000 8144 	beq.w	8003ec4 <HAL_TIM_ConfigClockSource+0x370>
 8003c3c:	2b50      	cmp	r3, #80	; 0x50
 8003c3e:	f200 827b 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	f000 81f6 	beq.w	8004034 <HAL_TIM_ConfigClockSource+0x4e0>
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	f200 8275 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c4e:	2b30      	cmp	r3, #48	; 0x30
 8003c50:	f000 8246 	beq.w	80040e0 <HAL_TIM_ConfigClockSource+0x58c>
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	f200 826f 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f000 8240 	beq.w	80040e0 <HAL_TIM_ConfigClockSource+0x58c>
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	f200 8269 	bhi.w	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 823a 	beq.w	80040e0 <HAL_TIM_ConfigClockSource+0x58c>
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	f000 8237 	beq.w	80040e0 <HAL_TIM_ConfigClockSource+0x58c>
 8003c72:	e261      	b.n	8004138 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a55      	ldr	r2, [pc, #340]	; (8003dd0 <HAL_TIM_ConfigClockSource+0x27c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	f000 825f 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	f000 8259 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a50      	ldr	r2, [pc, #320]	; (8003dd4 <HAL_TIM_ConfigClockSource+0x280>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	f000 8253 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a4e      	ldr	r2, [pc, #312]	; (8003dd8 <HAL_TIM_ConfigClockSource+0x284>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	f000 824d 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a4c      	ldr	r2, [pc, #304]	; (8003ddc <HAL_TIM_ConfigClockSource+0x288>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	f000 8247 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a4a      	ldr	r2, [pc, #296]	; (8003de0 <HAL_TIM_ConfigClockSource+0x28c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	f000 8241 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a48      	ldr	r2, [pc, #288]	; (8003de4 <HAL_TIM_ConfigClockSource+0x290>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	f000 823b 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a46      	ldr	r2, [pc, #280]	; (8003de8 <HAL_TIM_ConfigClockSource+0x294>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	f000 8235 	beq.w	800413e <HAL_TIM_ConfigClockSource+0x5ea>
 8003cd4:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8003cd8:	483c      	ldr	r0, [pc, #240]	; (8003dcc <HAL_TIM_ConfigClockSource+0x278>)
 8003cda:	f7fc fe2a 	bl	8000932 <assert_failed>
      break;
 8003cde:	e22e      	b.n	800413e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <HAL_TIM_ConfigClockSource+0x27c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x1d2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d018      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x1d2>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a36      	ldr	r2, [pc, #216]	; (8003dd4 <HAL_TIM_ConfigClockSource+0x280>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x1d2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a35      	ldr	r2, [pc, #212]	; (8003dd8 <HAL_TIM_ConfigClockSource+0x284>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <HAL_TIM_ConfigClockSource+0x288>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a32      	ldr	r2, [pc, #200]	; (8003de0 <HAL_TIM_ConfigClockSource+0x28c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x1d2>
 8003d1c:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8003d20:	482a      	ldr	r0, [pc, #168]	; (8003dcc <HAL_TIM_ConfigClockSource+0x278>)
 8003d22:	f7fc fe06 	bl	8000932 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d013      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x202>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d36:	d00e      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x202>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d40:	d009      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x202>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d4a:	d004      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x202>
 8003d4c:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8003d50:	481e      	ldr	r0, [pc, #120]	; (8003dcc <HAL_TIM_ConfigClockSource+0x278>)
 8003d52:	f7fc fdee 	bl	8000932 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5e:	d014      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x236>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x236>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x236>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d008      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x236>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b0a      	cmp	r3, #10
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x236>
 8003d80:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8003d84:	4811      	ldr	r0, [pc, #68]	; (8003dcc <HAL_TIM_ConfigClockSource+0x278>)
 8003d86:	f7fc fdd4 	bl	8000932 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	d904      	bls.n	8003d9c <HAL_TIM_ConfigClockSource+0x248>
 8003d92:	f241 41cf 	movw	r1, #5327	; 0x14cf
 8003d96:	480d      	ldr	r0, [pc, #52]	; (8003dcc <HAL_TIM_ConfigClockSource+0x278>)
 8003d98:	f7fc fdcb 	bl	8000932 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6899      	ldr	r1, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f000 fe2e 	bl	8004a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	609a      	str	r2, [r3, #8]
      break;
 8003dc8:	e1ba      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x5ec>
 8003dca:	bf00      	nop
 8003dcc:	08006ed0 	.word	0x08006ed0
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40000800 	.word	0x40000800
 8003ddc:	40000c00 	.word	0x40000c00
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a8a      	ldr	r2, [pc, #552]	; (800401c <HAL_TIM_ConfigClockSource+0x4c8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x2d4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d013      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a86      	ldr	r2, [pc, #536]	; (8004020 <HAL_TIM_ConfigClockSource+0x4cc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a85      	ldr	r2, [pc, #532]	; (8004024 <HAL_TIM_ConfigClockSource+0x4d0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a83      	ldr	r2, [pc, #524]	; (8004028 <HAL_TIM_ConfigClockSource+0x4d4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIM_ConfigClockSource+0x2d4>
 8003e1e:	f241 41e2 	movw	r1, #5346	; 0x14e2
 8003e22:	4882      	ldr	r0, [pc, #520]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003e24:	f7fc fd85 	bl	8000932 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x304>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d00e      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x304>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	d009      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x304>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIM_ConfigClockSource+0x304>
 8003e4e:	f241 41e5 	movw	r1, #5349	; 0x14e5
 8003e52:	4876      	ldr	r0, [pc, #472]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003e54:	f7fc fd6d 	bl	8000932 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	d014      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x338>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x338>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00c      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x338>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d008      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x338>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b0a      	cmp	r3, #10
 8003e80:	d004      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x338>
 8003e82:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8003e86:	4869      	ldr	r0, [pc, #420]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003e88:	f7fc fd53 	bl	8000932 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	d904      	bls.n	8003e9e <HAL_TIM_ConfigClockSource+0x34a>
 8003e94:	f241 41e7 	movw	r1, #5351	; 0x14e7
 8003e98:	4864      	ldr	r0, [pc, #400]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003e9a:	f7fc fd4a 	bl	8000932 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f000 fdad 	bl	8004a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec0:	609a      	str	r2, [r3, #8]
      break;
 8003ec2:	e13d      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_TIM_ConfigClockSource+0x4c8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01d      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x3b6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d018      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x3b6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a50      	ldr	r2, [pc, #320]	; (8004020 <HAL_TIM_ConfigClockSource+0x4cc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x3b6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a4f      	ldr	r2, [pc, #316]	; (8004024 <HAL_TIM_ConfigClockSource+0x4d0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x3b6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4d      	ldr	r2, [pc, #308]	; (8004028 <HAL_TIM_ConfigClockSource+0x4d4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x3b6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_TIM_ConfigClockSource+0x4dc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0x3b6>
 8003f00:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8003f04:	4849      	ldr	r0, [pc, #292]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003f06:	f7fc fd14 	bl	8000932 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f12:	d014      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d008      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b0a      	cmp	r3, #10
 8003f32:	d004      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x3ea>
 8003f34:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8003f38:	483c      	ldr	r0, [pc, #240]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003f3a:	f7fc fcfa 	bl	8000932 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	d904      	bls.n	8003f50 <HAL_TIM_ConfigClockSource+0x3fc>
 8003f46:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8003f4a:	4838      	ldr	r0, [pc, #224]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003f4c:	f7fc fcf1 	bl	8000932 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f000 fc25 	bl	80047ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2150      	movs	r1, #80	; 0x50
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fd34 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8003f6e:	e0e7      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <HAL_TIM_ConfigClockSource+0x4c8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x462>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d018      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x462>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a25      	ldr	r2, [pc, #148]	; (8004020 <HAL_TIM_ConfigClockSource+0x4cc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x462>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a24      	ldr	r2, [pc, #144]	; (8004024 <HAL_TIM_ConfigClockSource+0x4d0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x462>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a22      	ldr	r2, [pc, #136]	; (8004028 <HAL_TIM_ConfigClockSource+0x4d4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x462>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_TIM_ConfigClockSource+0x4dc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIM_ConfigClockSource+0x462>
 8003fac:	f241 5106 	movw	r1, #5382	; 0x1506
 8003fb0:	481e      	ldr	r0, [pc, #120]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003fb2:	f7fc fcbe 	bl	8000932 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbe:	d014      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x496>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d010      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x496>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00c      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x496>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d008      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x496>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b0a      	cmp	r3, #10
 8003fde:	d004      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0x496>
 8003fe0:	f241 5109 	movw	r1, #5385	; 0x1509
 8003fe4:	4811      	ldr	r0, [pc, #68]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003fe6:	f7fc fca4 	bl	8000932 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d904      	bls.n	8003ffc <HAL_TIM_ConfigClockSource+0x4a8>
 8003ff2:	f241 510a 	movw	r1, #5386	; 0x150a
 8003ff6:	480d      	ldr	r0, [pc, #52]	; (800402c <HAL_TIM_ConfigClockSource+0x4d8>)
 8003ff8:	f7fc fc9b 	bl	8000932 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	461a      	mov	r2, r3
 800400a:	f000 fc3b 	bl	8004884 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2160      	movs	r1, #96	; 0x60
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fcde 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 800401a:	e091      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x5ec>
 800401c:	40010000 	.word	0x40010000
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	08006ed0 	.word	0x08006ed0
 8004030:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a48      	ldr	r2, [pc, #288]	; (800415c <HAL_TIM_ConfigClockSource+0x608>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x526>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d018      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x526>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a44      	ldr	r2, [pc, #272]	; (8004160 <HAL_TIM_ConfigClockSource+0x60c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x526>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a43      	ldr	r2, [pc, #268]	; (8004164 <HAL_TIM_ConfigClockSource+0x610>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x526>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a41      	ldr	r2, [pc, #260]	; (8004168 <HAL_TIM_ConfigClockSource+0x614>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x526>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a40      	ldr	r2, [pc, #256]	; (800416c <HAL_TIM_ConfigClockSource+0x618>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x526>
 8004070:	f241 5116 	movw	r1, #5398	; 0x1516
 8004074:	483e      	ldr	r0, [pc, #248]	; (8004170 <HAL_TIM_ConfigClockSource+0x61c>)
 8004076:	f7fc fc5c 	bl	8000932 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004082:	d014      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x55a>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x55a>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00c      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x55a>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d008      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x55a>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b0a      	cmp	r3, #10
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x55a>
 80040a4:	f241 5119 	movw	r1, #5401	; 0x1519
 80040a8:	4831      	ldr	r0, [pc, #196]	; (8004170 <HAL_TIM_ConfigClockSource+0x61c>)
 80040aa:	f7fc fc42 	bl	8000932 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b0f      	cmp	r3, #15
 80040b4:	d904      	bls.n	80040c0 <HAL_TIM_ConfigClockSource+0x56c>
 80040b6:	f241 511a 	movw	r1, #5402	; 0x151a
 80040ba:	482d      	ldr	r0, [pc, #180]	; (8004170 <HAL_TIM_ConfigClockSource+0x61c>)
 80040bc:	f7fc fc39 	bl	8000932 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	461a      	mov	r2, r3
 80040ce:	f000 fb6d 	bl	80047ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2140      	movs	r1, #64	; 0x40
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fc7c 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 80040de:	e02f      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1d      	ldr	r2, [pc, #116]	; (800415c <HAL_TIM_ConfigClockSource+0x608>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01d      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x5d2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f2:	d018      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x5d2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <HAL_TIM_ConfigClockSource+0x60c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x5d2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_TIM_ConfigClockSource+0x610>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x5d2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <HAL_TIM_ConfigClockSource+0x614>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x5d2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_TIM_ConfigClockSource+0x618>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x5d2>
 800411c:	f241 5129 	movw	r1, #5417	; 0x1529
 8004120:	4813      	ldr	r0, [pc, #76]	; (8004170 <HAL_TIM_ConfigClockSource+0x61c>)
 8004122:	f7fc fc06 	bl	8000932 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f000 fc50 	bl	80049d6 <TIM_ITRx_SetConfig>
      break;
 8004136:	e003      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      break;
 800413c:	e000      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800413e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40014000 	.word	0x40014000
 8004170:	08006ed0 	.word	0x08006ed0

08004174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a34      	ldr	r2, [pc, #208]	; (8004294 <TIM_Base_SetConfig+0xe4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00f      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d00b      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a31      	ldr	r2, [pc, #196]	; (8004298 <TIM_Base_SetConfig+0xe8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d007      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a30      	ldr	r2, [pc, #192]	; (800429c <TIM_Base_SetConfig+0xec>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d003      	beq.n	80041e8 <TIM_Base_SetConfig+0x38>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a2f      	ldr	r2, [pc, #188]	; (80042a0 <TIM_Base_SetConfig+0xf0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d108      	bne.n	80041fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a25      	ldr	r2, [pc, #148]	; (8004294 <TIM_Base_SetConfig+0xe4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01b      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004208:	d017      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <TIM_Base_SetConfig+0xe8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d013      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <TIM_Base_SetConfig+0xec>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00f      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <TIM_Base_SetConfig+0xf0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00b      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <TIM_Base_SetConfig+0xf4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d007      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <TIM_Base_SetConfig+0xf8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <TIM_Base_SetConfig+0xfc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d108      	bne.n	800424c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a08      	ldr	r2, [pc, #32]	; (8004294 <TIM_Base_SetConfig+0xe4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d103      	bne.n	8004280 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	615a      	str	r2, [r3, #20]
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40014000 	.word	0x40014000
 80042a8:	40014400 	.word	0x40014400
 80042ac:	40014800 	.word	0x40014800

080042b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0302 	bic.w	r3, r3, #2
 80042f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <TIM_OC1_SetConfig+0x118>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d119      	bne.n	8004340 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <TIM_OC1_SetConfig+0x76>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d004      	beq.n	8004326 <TIM_OC1_SetConfig+0x76>
 800431c:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8004320:	482a      	ldr	r0, [pc, #168]	; (80043cc <TIM_OC1_SetConfig+0x11c>)
 8004322:	f7fc fb06 	bl	8000932 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0308 	bic.w	r3, r3, #8
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0304 	bic.w	r3, r3, #4
 800433e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <TIM_OC1_SetConfig+0x118>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d12d      	bne.n	80043a4 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d008      	beq.n	8004364 <TIM_OC1_SetConfig+0xb4>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d004      	beq.n	8004364 <TIM_OC1_SetConfig+0xb4>
 800435a:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 800435e:	481b      	ldr	r0, [pc, #108]	; (80043cc <TIM_OC1_SetConfig+0x11c>)
 8004360:	f7fc fae7 	bl	8000932 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d008      	beq.n	8004380 <TIM_OC1_SetConfig+0xd0>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <TIM_OC1_SetConfig+0xd0>
 8004376:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 800437a:	4814      	ldr	r0, [pc, #80]	; (80043cc <TIM_OC1_SetConfig+0x11c>)
 800437c:	f7fc fad9 	bl	8000932 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800438e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000
 80043cc:	08006ed0 	.word	0x08006ed0

080043d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0210 	bic.w	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4313      	orrs	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 0320 	bic.w	r3, r3, #32
 800441a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a31      	ldr	r2, [pc, #196]	; (80044f0 <TIM_OC2_SetConfig+0x120>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d11a      	bne.n	8004466 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <TIM_OC2_SetConfig+0x7a>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d004      	beq.n	800444a <TIM_OC2_SetConfig+0x7a>
 8004440:	f641 3112 	movw	r1, #6930	; 0x1b12
 8004444:	482b      	ldr	r0, [pc, #172]	; (80044f4 <TIM_OC2_SetConfig+0x124>)
 8004446:	f7fc fa74 	bl	8000932 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004464:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <TIM_OC2_SetConfig+0x120>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d12f      	bne.n	80044ce <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004476:	d008      	beq.n	800448a <TIM_OC2_SetConfig+0xba>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <TIM_OC2_SetConfig+0xba>
 8004480:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8004484:	481b      	ldr	r0, [pc, #108]	; (80044f4 <TIM_OC2_SetConfig+0x124>)
 8004486:	f7fc fa54 	bl	8000932 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	d008      	beq.n	80044a6 <TIM_OC2_SetConfig+0xd6>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <TIM_OC2_SetConfig+0xd6>
 800449c:	f641 3121 	movw	r1, #6945	; 0x1b21
 80044a0:	4814      	ldr	r0, [pc, #80]	; (80044f4 <TIM_OC2_SetConfig+0x124>)
 80044a2:	f7fc fa46 	bl	8000932 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40010000 	.word	0x40010000
 80044f4:	08006ed0 	.word	0x08006ed0

080044f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a31      	ldr	r2, [pc, #196]	; (8004618 <TIM_OC3_SetConfig+0x120>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d11a      	bne.n	800458c <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <TIM_OC3_SetConfig+0x78>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b08      	cmp	r3, #8
 8004564:	d004      	beq.n	8004570 <TIM_OC3_SetConfig+0x78>
 8004566:	f641 315d 	movw	r1, #7005	; 0x1b5d
 800456a:	482c      	ldr	r0, [pc, #176]	; (800461c <TIM_OC3_SetConfig+0x124>)
 800456c:	f7fc f9e1 	bl	8000932 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a22      	ldr	r2, [pc, #136]	; (8004618 <TIM_OC3_SetConfig+0x120>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d12f      	bne.n	80045f4 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459c:	d008      	beq.n	80045b0 <TIM_OC3_SetConfig+0xb8>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <TIM_OC3_SetConfig+0xb8>
 80045a6:	f641 316a 	movw	r1, #7018	; 0x1b6a
 80045aa:	481c      	ldr	r0, [pc, #112]	; (800461c <TIM_OC3_SetConfig+0x124>)
 80045ac:	f7fc f9c1 	bl	8000932 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b8:	d008      	beq.n	80045cc <TIM_OC3_SetConfig+0xd4>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <TIM_OC3_SetConfig+0xd4>
 80045c2:	f641 316b 	movw	r1, #7019	; 0x1b6b
 80045c6:	4815      	ldr	r0, [pc, #84]	; (800461c <TIM_OC3_SetConfig+0x124>)
 80045c8:	f7fc f9b3 	bl	8000932 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40010000 	.word	0x40010000
 800461c:	08006ed0 	.word	0x08006ed0

08004620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800466a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a16      	ldr	r2, [pc, #88]	; (80046d4 <TIM_OC4_SetConfig+0xb4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d117      	bne.n	80046b0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004688:	d008      	beq.n	800469c <TIM_OC4_SetConfig+0x7c>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <TIM_OC4_SetConfig+0x7c>
 8004692:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8004696:	4810      	ldr	r0, [pc, #64]	; (80046d8 <TIM_OC4_SetConfig+0xb8>)
 8004698:	f7fc f94b 	bl	8000932 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	08006ed0 	.word	0x08006ed0

080046dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a24      	ldr	r2, [pc, #144]	; (8004798 <TIM_TI1_SetConfig+0xbc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_TI1_SetConfig+0x56>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d00f      	beq.n	8004732 <TIM_TI1_SetConfig+0x56>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a21      	ldr	r2, [pc, #132]	; (800479c <TIM_TI1_SetConfig+0xc0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_TI1_SetConfig+0x56>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <TIM_TI1_SetConfig+0xc4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_TI1_SetConfig+0x56>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <TIM_TI1_SetConfig+0xc8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_TI1_SetConfig+0x56>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <TIM_TI1_SetConfig+0xcc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d101      	bne.n	8004736 <TIM_TI1_SetConfig+0x5a>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <TIM_TI1_SetConfig+0x5c>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e003      	b.n	8004756 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	b2db      	uxtb	r3, r3
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f003 030a 	and.w	r3, r3, #10
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	621a      	str	r2, [r3, #32]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40014000 	.word	0x40014000

080047ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 030a 	bic.w	r3, r3, #10
 80047e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800480a:	b480      	push	{r7}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f023 0210 	bic.w	r2, r3, #16
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	031b      	lsls	r3, r3, #12
 800484e:	b29b      	uxth	r3, r3
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800485c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	621a      	str	r2, [r3, #32]
}
 8004878:	bf00      	nop
 800487a:	371c      	adds	r7, #28
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f023 0210 	bic.w	r2, r3, #16
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	031b      	lsls	r3, r3, #12
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	621a      	str	r2, [r3, #32]
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0303 	bic.w	r3, r3, #3
 8004910:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004920:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	b2db      	uxtb	r3, r3
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004934:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	621a      	str	r2, [r3, #32]
}
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004988:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800499a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	031b      	lsls	r3, r3, #12
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80049ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	031b      	lsls	r3, r3, #12
 80049b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f043 0307 	orr.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <TIM_CCxChannelCmd+0xb8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d020      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d01c      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <TIM_CCxChannelCmd+0xbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <TIM_CCxChannelCmd+0xc0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d014      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <TIM_CCxChannelCmd+0xc4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d010      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <TIM_CCxChannelCmd+0xc8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d00c      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <TIM_CCxChannelCmd+0xcc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d008      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <TIM_CCxChannelCmd+0xd0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <TIM_CCxChannelCmd+0x56>
 8004a98:	f641 5194 	movw	r1, #7572	; 0x1d94
 8004a9c:	4820      	ldr	r0, [pc, #128]	; (8004b20 <TIM_CCxChannelCmd+0xd4>)
 8004a9e:	f7fb ff48 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d010      	beq.n	8004aca <TIM_CCxChannelCmd+0x7e>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d00d      	beq.n	8004aca <TIM_CCxChannelCmd+0x7e>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d00a      	beq.n	8004aca <TIM_CCxChannelCmd+0x7e>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d007      	beq.n	8004aca <TIM_CCxChannelCmd+0x7e>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b3c      	cmp	r3, #60	; 0x3c
 8004abe:	d004      	beq.n	8004aca <TIM_CCxChannelCmd+0x7e>
 8004ac0:	f641 5195 	movw	r1, #7573	; 0x1d95
 8004ac4:	4816      	ldr	r0, [pc, #88]	; (8004b20 <TIM_CCxChannelCmd+0xd4>)
 8004ac6:	f7fb ff34 	bl	8000932 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 031f 	and.w	r3, r3, #31
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6a1a      	ldr	r2, [r3, #32]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	401a      	ands	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800
 8004b20:	08006ed0 	.word	0x08006ed0

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a55      	ldr	r2, [pc, #340]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d018      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b40:	d013      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a51      	ldr	r2, [pc, #324]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00e      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a4f      	ldr	r2, [pc, #316]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004b60:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8004b64:	484c      	ldr	r0, [pc, #304]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004b66:	f7fb fee4 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d020      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d01c      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d018      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b30      	cmp	r3, #48	; 0x30
 8004b88:	d014      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d010      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b50      	cmp	r3, #80	; 0x50
 8004b98:	d00c      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b60      	cmp	r3, #96	; 0x60
 8004ba0:	d008      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b70      	cmp	r3, #112	; 0x70
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004baa:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8004bae:	483a      	ldr	r0, [pc, #232]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004bb0:	f7fb febf 	bl	8000932 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b80      	cmp	r3, #128	; 0x80
 8004bba:	d008      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8004bc4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8004bc8:	4833      	ldr	r0, [pc, #204]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8004bca:	f7fb feb2 	bl	8000932 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e050      	b.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d013      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d10c      	bne.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	08006f08 	.word	0x08006f08
 8004c9c:	40014000 	.word	0x40014000

08004ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0a0      	b.n	8004e1c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d02c      	beq.n	8004d3c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a4f      	ldr	r2, [pc, #316]	; (8004e24 <HAL_UART_Init+0x15c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <HAL_UART_Init+0x42>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a4d      	ldr	r2, [pc, #308]	; (8004e28 <HAL_UART_Init+0x160>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_UART_Init+0x42>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <HAL_UART_Init+0x164>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_UART_Init+0x42>
 8004d00:	f240 1173 	movw	r1, #371	; 0x173
 8004d04:	484a      	ldr	r0, [pc, #296]	; (8004e30 <HAL_UART_Init+0x168>)
 8004d06:	f7fb fe14 	bl	8000932 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d028      	beq.n	8004d64 <HAL_UART_Init+0x9c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1a:	d023      	beq.n	8004d64 <HAL_UART_Init+0x9c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d01e      	beq.n	8004d64 <HAL_UART_Init+0x9c>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2e:	d019      	beq.n	8004d64 <HAL_UART_Init+0x9c>
 8004d30:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004d34:	483e      	ldr	r0, [pc, #248]	; (8004e30 <HAL_UART_Init+0x168>)
 8004d36:	f7fb fdfc 	bl	8000932 <assert_failed>
 8004d3a:	e013      	b.n	8004d64 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <HAL_UART_Init+0x15c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_UART_Init+0x9c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a37      	ldr	r2, [pc, #220]	; (8004e28 <HAL_UART_Init+0x160>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_UART_Init+0x9c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a35      	ldr	r2, [pc, #212]	; (8004e2c <HAL_UART_Init+0x164>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_UART_Init+0x9c>
 8004d5a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8004d5e:	4834      	ldr	r0, [pc, #208]	; (8004e30 <HAL_UART_Init+0x168>)
 8004d60:	f7fb fde7 	bl	8000932 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d009      	beq.n	8004d80 <HAL_UART_Init+0xb8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d74:	d004      	beq.n	8004d80 <HAL_UART_Init+0xb8>
 8004d76:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004d7a:	482d      	ldr	r0, [pc, #180]	; (8004e30 <HAL_UART_Init+0x168>)
 8004d7c:	f7fb fdd9 	bl	8000932 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_UART_Init+0xd4>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d90:	d004      	beq.n	8004d9c <HAL_UART_Init+0xd4>
 8004d92:	f240 117b 	movw	r1, #379	; 0x17b
 8004d96:	4826      	ldr	r0, [pc, #152]	; (8004e30 <HAL_UART_Init+0x168>)
 8004d98:	f7fb fdcb 	bl	8000932 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fc f93b 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2224      	movs	r2, #36	; 0x24
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fd82 	bl	80058d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40011000 	.word	0x40011000
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	40011400 	.word	0x40011400
 8004e30:	08006f44 	.word	0x08006f44

08004e34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d17c      	bne.n	8004f4e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Transmit+0x2c>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e075      	b.n	8004f50 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Transmit+0x3e>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e06e      	b.n	8004f50 <HAL_UART_Transmit+0x11c>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2221      	movs	r2, #33	; 0x21
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e88:	f7fc f9b0 	bl	80011ec <HAL_GetTick>
 8004e8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	88fa      	ldrh	r2, [r7, #6]
 8004e92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea2:	d108      	bne.n	8004eb6 <HAL_UART_Transmit+0x82>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e003      	b.n	8004ebe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ec6:	e02a      	b.n	8004f1e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 faf8 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e036      	b.n	8004f50 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	3302      	adds	r3, #2
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e007      	b.n	8004f10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1cf      	bne.n	8004ec8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fac8 	bl	80054c8 <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e006      	b.n	8004f50 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b0ba      	sub	sp, #232	; 0xe8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <HAL_UART_IRQHandler+0x66>
 8004faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fbd3 	bl	8005762 <UART_Receive_IT>
      return;
 8004fbc:	e256      	b.n	800546c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80de 	beq.w	8005184 <HAL_UART_IRQHandler+0x22c>
 8004fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80d1 	beq.w	8005184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_UART_IRQHandler+0xae>
 8004fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_UART_IRQHandler+0xd2>
 8005012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	f043 0202 	orr.w	r2, r3, #2
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_UART_IRQHandler+0xf6>
 8005036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0204 	orr.w	r2, r3, #4
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d011      	beq.n	800507e <HAL_UART_IRQHandler+0x126>
 800505a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d105      	bne.n	8005072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0208 	orr.w	r2, r3, #8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 81ed 	beq.w	8005462 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_UART_IRQHandler+0x14e>
 8005094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005098:	f003 0320 	and.w	r3, r3, #32
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb5e 	bl	8005762 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_UART_IRQHandler+0x17a>
 80050ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d04f      	beq.n	8005172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa66 	bl	80055a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d141      	bne.n	800516a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3314      	adds	r3, #20
 80050ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3314      	adds	r3, #20
 800510e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800511e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800512a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1d9      	bne.n	80050e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d013      	beq.n	8005162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	4a7d      	ldr	r2, [pc, #500]	; (8005334 <HAL_UART_IRQHandler+0x3dc>)
 8005140:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	4618      	mov	r0, r3
 8005148:	f7fc fa0c 	bl	8001564 <HAL_DMA_Abort_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	e00e      	b.n	8005180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f99a 	bl	800549c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	e00a      	b.n	8005180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f996 	bl	800549c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	e006      	b.n	8005180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f992 	bl	800549c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800517e:	e170      	b.n	8005462 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005180:	bf00      	nop
    return;
 8005182:	e16e      	b.n	8005462 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 814a 	bne.w	8005422 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8143 	beq.w	8005422 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 813c 	beq.w	8005422 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	f040 80b4 	bne.w	8005338 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8140 	beq.w	8005466 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ee:	429a      	cmp	r2, r3
 80051f0:	f080 8139 	bcs.w	8005466 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005206:	f000 8088 	beq.w	800531a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800523a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800524e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1d9      	bne.n	800520a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3314      	adds	r3, #20
 800525c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800527a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800527e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800528c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e1      	bne.n	8005256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3314      	adds	r3, #20
 8005298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3314      	adds	r3, #20
 80052b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e3      	bne.n	8005292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ea:	f023 0310 	bic.w	r3, r3, #16
 80052ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80052fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e3      	bne.n	80052d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	4618      	mov	r0, r3
 8005316:	f7fc f8b5 	bl	8001484 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005322:	b29b      	uxth	r3, r3
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	b29b      	uxth	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f8c0 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005330:	e099      	b.n	8005466 <HAL_UART_IRQHandler+0x50e>
 8005332:	bf00      	nop
 8005334:	0800566b 	.word	0x0800566b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005340:	b29b      	uxth	r3, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 808b 	beq.w	800546a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8086 	beq.w	800546a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	330c      	adds	r3, #12
 800537e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005382:	647a      	str	r2, [r7, #68]	; 0x44
 8005384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e3      	bne.n	800535e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	623b      	str	r3, [r7, #32]
   return(result);
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f023 0301 	bic.w	r3, r3, #1
 80053ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053ba:	633a      	str	r2, [r7, #48]	; 0x30
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e3      	bne.n	8005396 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0310 	bic.w	r3, r3, #16
 80053f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005400:	61fa      	str	r2, [r7, #28]
 8005402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	69b9      	ldr	r1, [r7, #24]
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	617b      	str	r3, [r7, #20]
   return(result);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e3      	bne.n	80053dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f848 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005420:	e023      	b.n	800546a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <HAL_UART_IRQHandler+0x4ea>
 800542e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f929 	bl	8005692 <UART_Transmit_IT>
    return;
 8005440:	e014      	b.n	800546c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <HAL_UART_IRQHandler+0x514>
 800544e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f969 	bl	8005732 <UART_EndTransmit_IT>
    return;
 8005460:	e004      	b.n	800546c <HAL_UART_IRQHandler+0x514>
    return;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_UART_IRQHandler+0x514>
      return;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_UART_IRQHandler+0x514>
      return;
 800546a:	bf00      	nop
  }
}
 800546c:	37e8      	adds	r7, #232	; 0xe8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop

08005474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b090      	sub	sp, #64	; 0x40
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d8:	e050      	b.n	800557c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d04c      	beq.n	800557c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054e8:	f7fb fe80 	bl	80011ec <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d241      	bcs.n	800557c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800550e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005518:	637a      	str	r2, [r7, #52]	; 0x34
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800551e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e5      	bne.n	80054f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	e853 3f00 	ldrex	r3, [r3]
 800553a:	613b      	str	r3, [r7, #16]
   return(result);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	63bb      	str	r3, [r7, #56]	; 0x38
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554c:	623a      	str	r2, [r7, #32]
 800554e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005550:	69f9      	ldr	r1, [r7, #28]
 8005552:	6a3a      	ldr	r2, [r7, #32]
 8005554:	e841 2300 	strex	r3, r2, [r1]
 8005558:	61bb      	str	r3, [r7, #24]
   return(result);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e5      	bne.n	800552c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e00f      	b.n	800559c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	429a      	cmp	r2, r3
 8005598:	d09f      	beq.n	80054da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3740      	adds	r7, #64	; 0x40
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b095      	sub	sp, #84	; 0x54
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055cc:	643a      	str	r2, [r7, #64]	; 0x40
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e5      	bne.n	80055ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3314      	adds	r3, #20
 80055e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f023 0301 	bic.w	r3, r3, #1
 80055f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005600:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e5      	bne.n	80055e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	2b01      	cmp	r3, #1
 800561a:	d119      	bne.n	8005650 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	60bb      	str	r3, [r7, #8]
   return(result);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 0310 	bic.w	r3, r3, #16
 8005632:	647b      	str	r3, [r7, #68]	; 0x44
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800563c:	61ba      	str	r2, [r7, #24]
 800563e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6979      	ldr	r1, [r7, #20]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	613b      	str	r3, [r7, #16]
   return(result);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800565e:	bf00      	nop
 8005660:	3754      	adds	r7, #84	; 0x54
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff ff09 	bl	800549c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b21      	cmp	r3, #33	; 0x21
 80056a4:	d13e      	bne.n	8005724 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ae:	d114      	bne.n	80056da <UART_Transmit_IT+0x48>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d110      	bne.n	80056da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	1c9a      	adds	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	621a      	str	r2, [r3, #32]
 80056d8:	e008      	b.n	80056ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	1c59      	adds	r1, r3, #1
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6211      	str	r1, [r2, #32]
 80056e4:	781a      	ldrb	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4619      	mov	r1, r3
 80056fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10f      	bne.n	8005720 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800570e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800571e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005748:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fe8e 	bl	8005474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b08c      	sub	sp, #48	; 0x30
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b22      	cmp	r3, #34	; 0x22
 8005774:	f040 80ab 	bne.w	80058ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d117      	bne.n	80057b2 <UART_Receive_IT+0x50>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d113      	bne.n	80057b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b29b      	uxth	r3, r3
 800579c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
 80057b0:	e026      	b.n	8005800 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c4:	d007      	beq.n	80057d6 <UART_Receive_IT+0x74>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <UART_Receive_IT+0x82>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e008      	b.n	80057f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	4619      	mov	r1, r3
 800580e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005810:	2b00      	cmp	r3, #0
 8005812:	d15a      	bne.n	80058ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0220 	bic.w	r2, r2, #32
 8005822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	2b01      	cmp	r3, #1
 8005852:	d135      	bne.n	80058c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	613b      	str	r3, [r7, #16]
   return(result);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f023 0310 	bic.w	r3, r3, #16
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	623a      	str	r2, [r7, #32]
 800587c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	69f9      	ldr	r1, [r7, #28]
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	61bb      	str	r3, [r7, #24]
   return(result);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b10      	cmp	r3, #16
 800589a:	d10a      	bne.n	80058b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fdf9 	bl	80054b0 <HAL_UARTEx_RxEventCallback>
 80058be:	e002      	b.n	80058c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fde1 	bl	8005488 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e002      	b.n	80058d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3730      	adds	r7, #48	; 0x30
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058dc:	b0c0      	sub	sp, #256	; 0x100
 80058de:	af00      	add	r7, sp, #0
 80058e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	4bcf      	ldr	r3, [pc, #828]	; (8005c28 <UART_SetConfig+0x350>)
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d904      	bls.n	80058fa <UART_SetConfig+0x22>
 80058f0:	f640 6161 	movw	r1, #3681	; 0xe61
 80058f4:	48cd      	ldr	r0, [pc, #820]	; (8005c2c <UART_SetConfig+0x354>)
 80058f6:	f7fb f81c 	bl	8000932 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00a      	beq.n	800591a <UART_SetConfig+0x42>
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	d004      	beq.n	800591a <UART_SetConfig+0x42>
 8005910:	f640 6162 	movw	r1, #3682	; 0xe62
 8005914:	48c5      	ldr	r0, [pc, #788]	; (8005c2c <UART_SetConfig+0x354>)
 8005916:	f7fb f80c 	bl	8000932 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d010      	beq.n	8005946 <UART_SetConfig+0x6e>
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592e:	d00a      	beq.n	8005946 <UART_SetConfig+0x6e>
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800593a:	d004      	beq.n	8005946 <UART_SetConfig+0x6e>
 800593c:	f640 6163 	movw	r1, #3683	; 0xe63
 8005940:	48ba      	ldr	r0, [pc, #744]	; (8005c2c <UART_SetConfig+0x354>)
 8005942:	f7fa fff6 	bl	8000932 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594a:	695a      	ldr	r2, [r3, #20]
 800594c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <UART_SetConfig+0x88>
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <UART_SetConfig+0x92>
 8005960:	f640 6164 	movw	r1, #3684	; 0xe64
 8005964:	48b1      	ldr	r0, [pc, #708]	; (8005c2c <UART_SetConfig+0x354>)
 8005966:	f7fa ffe4 	bl	8000932 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	68d9      	ldr	r1, [r3, #12]
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	ea40 0301 	orr.w	r3, r0, r1
 8005986:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	431a      	orrs	r2, r3
 8005996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	431a      	orrs	r2, r3
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059b6:	f021 010c 	bic.w	r1, r1, #12
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80059c4:	430b      	orrs	r3, r1
 80059c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	6999      	ldr	r1, [r3, #24]
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	ea40 0301 	orr.w	r3, r0, r1
 80059e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b90      	ldr	r3, [pc, #576]	; (8005c30 <UART_SetConfig+0x358>)
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d005      	beq.n	80059fe <UART_SetConfig+0x126>
 80059f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b8e      	ldr	r3, [pc, #568]	; (8005c34 <UART_SetConfig+0x35c>)
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d104      	bne.n	8005a08 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059fe:	f7fc febb 	bl	8002778 <HAL_RCC_GetPCLK2Freq>
 8005a02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a06:	e003      	b.n	8005a10 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a08:	f7fc fea2 	bl	8002750 <HAL_RCC_GetPCLK1Freq>
 8005a0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a1a:	f040 810f 	bne.w	8005c3c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a28:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005a2c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005a30:	4622      	mov	r2, r4
 8005a32:	462b      	mov	r3, r5
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005a40:	4621      	mov	r1, r4
 8005a42:	eb12 0801 	adds.w	r8, r2, r1
 8005a46:	4629      	mov	r1, r5
 8005a48:	eb43 0901 	adc.w	r9, r3, r1
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a60:	4690      	mov	r8, r2
 8005a62:	4699      	mov	r9, r3
 8005a64:	4623      	mov	r3, r4
 8005a66:	eb18 0303 	adds.w	r3, r8, r3
 8005a6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a6e:	462b      	mov	r3, r5
 8005a70:	eb49 0303 	adc.w	r3, r9, r3
 8005a74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a84:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	18db      	adds	r3, r3, r3
 8005a90:	653b      	str	r3, [r7, #80]	; 0x50
 8005a92:	4613      	mov	r3, r2
 8005a94:	eb42 0303 	adc.w	r3, r2, r3
 8005a98:	657b      	str	r3, [r7, #84]	; 0x54
 8005a9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a9e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005aa2:	f7fa fbed 	bl	8000280 <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4b63      	ldr	r3, [pc, #396]	; (8005c38 <UART_SetConfig+0x360>)
 8005aac:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	011c      	lsls	r4, r3, #4
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005abe:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ac2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ac6:	4642      	mov	r2, r8
 8005ac8:	464b      	mov	r3, r9
 8005aca:	1891      	adds	r1, r2, r2
 8005acc:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ace:	415b      	adcs	r3, r3
 8005ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ad6:	4641      	mov	r1, r8
 8005ad8:	eb12 0a01 	adds.w	sl, r2, r1
 8005adc:	4649      	mov	r1, r9
 8005ade:	eb43 0b01 	adc.w	fp, r3, r1
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005af2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af6:	4692      	mov	sl, r2
 8005af8:	469b      	mov	fp, r3
 8005afa:	4643      	mov	r3, r8
 8005afc:	eb1a 0303 	adds.w	r3, sl, r3
 8005b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b04:	464b      	mov	r3, r9
 8005b06:	eb4b 0303 	adc.w	r3, fp, r3
 8005b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b1a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005b22:	460b      	mov	r3, r1
 8005b24:	18db      	adds	r3, r3, r3
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40
 8005b28:	4613      	mov	r3, r2
 8005b2a:	eb42 0303 	adc.w	r3, r2, r3
 8005b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005b34:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005b38:	f7fa fba2 	bl	8000280 <__aeabi_uldivmod>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4611      	mov	r1, r2
 8005b42:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <UART_SetConfig+0x360>)
 8005b44:	fba3 2301 	umull	r2, r3, r3, r1
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	2264      	movs	r2, #100	; 0x64
 8005b4c:	fb02 f303 	mul.w	r3, r2, r3
 8005b50:	1acb      	subs	r3, r1, r3
 8005b52:	00db      	lsls	r3, r3, #3
 8005b54:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005b58:	4b37      	ldr	r3, [pc, #220]	; (8005c38 <UART_SetConfig+0x360>)
 8005b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b66:	441c      	add	r4, r3
 8005b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b72:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b76:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b7a:	4642      	mov	r2, r8
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	1891      	adds	r1, r2, r2
 8005b80:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b82:	415b      	adcs	r3, r3
 8005b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b86:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b8a:	4641      	mov	r1, r8
 8005b8c:	1851      	adds	r1, r2, r1
 8005b8e:	6339      	str	r1, [r7, #48]	; 0x30
 8005b90:	4649      	mov	r1, r9
 8005b92:	414b      	adcs	r3, r1
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ba2:	4659      	mov	r1, fp
 8005ba4:	00cb      	lsls	r3, r1, #3
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bac:	4651      	mov	r1, sl
 8005bae:	00ca      	lsls	r2, r1, #3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	189b      	adds	r3, r3, r2
 8005bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	eb42 0303 	adc.w	r3, r2, r3
 8005bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005bd6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005bda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005bde:	460b      	mov	r3, r1
 8005be0:	18db      	adds	r3, r3, r3
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be4:	4613      	mov	r3, r2
 8005be6:	eb42 0303 	adc.w	r3, r2, r3
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bf0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005bf4:	f7fa fb44 	bl	8000280 <__aeabi_uldivmod>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <UART_SetConfig+0x360>)
 8005bfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2164      	movs	r1, #100	; 0x64
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	3332      	adds	r3, #50	; 0x32
 8005c10:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <UART_SetConfig+0x360>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 0207 	and.w	r2, r3, #7
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4422      	add	r2, r4
 8005c24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c26:	e108      	b.n	8005e3a <UART_SetConfig+0x562>
 8005c28:	00a037a0 	.word	0x00a037a0
 8005c2c:	08006f44 	.word	0x08006f44
 8005c30:	40011000 	.word	0x40011000
 8005c34:	40011400 	.word	0x40011400
 8005c38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c40:	2200      	movs	r2, #0
 8005c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005c4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005c4e:	4642      	mov	r2, r8
 8005c50:	464b      	mov	r3, r9
 8005c52:	1891      	adds	r1, r2, r2
 8005c54:	6239      	str	r1, [r7, #32]
 8005c56:	415b      	adcs	r3, r3
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c5e:	4641      	mov	r1, r8
 8005c60:	1854      	adds	r4, r2, r1
 8005c62:	4649      	mov	r1, r9
 8005c64:	eb43 0501 	adc.w	r5, r3, r1
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	00eb      	lsls	r3, r5, #3
 8005c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c76:	00e2      	lsls	r2, r4, #3
 8005c78:	4614      	mov	r4, r2
 8005c7a:	461d      	mov	r5, r3
 8005c7c:	4643      	mov	r3, r8
 8005c7e:	18e3      	adds	r3, r4, r3
 8005c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c84:	464b      	mov	r3, r9
 8005c86:	eb45 0303 	adc.w	r3, r5, r3
 8005c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005caa:	4629      	mov	r1, r5
 8005cac:	008b      	lsls	r3, r1, #2
 8005cae:	4621      	mov	r1, r4
 8005cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	008a      	lsls	r2, r1, #2
 8005cb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005cbc:	f7fa fae0 	bl	8000280 <__aeabi_uldivmod>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4b60      	ldr	r3, [pc, #384]	; (8005e48 <UART_SetConfig+0x570>)
 8005cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	011c      	lsls	r4, r3, #4
 8005cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005cd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005cdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	1891      	adds	r1, r2, r2
 8005ce6:	61b9      	str	r1, [r7, #24]
 8005ce8:	415b      	adcs	r3, r3
 8005cea:	61fb      	str	r3, [r7, #28]
 8005cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	1851      	adds	r1, r2, r1
 8005cf4:	6139      	str	r1, [r7, #16]
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	414b      	adcs	r3, r1
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d08:	4659      	mov	r1, fp
 8005d0a:	00cb      	lsls	r3, r1, #3
 8005d0c:	4651      	mov	r1, sl
 8005d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d12:	4651      	mov	r1, sl
 8005d14:	00ca      	lsls	r2, r1, #3
 8005d16:	4610      	mov	r0, r2
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	189b      	adds	r3, r3, r2
 8005d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d24:	464b      	mov	r3, r9
 8005d26:	460a      	mov	r2, r1
 8005d28:	eb42 0303 	adc.w	r3, r2, r3
 8005d2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005d48:	4649      	mov	r1, r9
 8005d4a:	008b      	lsls	r3, r1, #2
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d52:	4641      	mov	r1, r8
 8005d54:	008a      	lsls	r2, r1, #2
 8005d56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005d5a:	f7fa fa91 	bl	8000280 <__aeabi_uldivmod>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <UART_SetConfig+0x570>)
 8005d64:	fba3 1302 	umull	r1, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2164      	movs	r1, #100	; 0x64
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	3332      	adds	r3, #50	; 0x32
 8005d76:	4a34      	ldr	r2, [pc, #208]	; (8005e48 <UART_SetConfig+0x570>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d82:	441c      	add	r4, r3
 8005d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d88:	2200      	movs	r2, #0
 8005d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d8c:	677a      	str	r2, [r7, #116]	; 0x74
 8005d8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d92:	4642      	mov	r2, r8
 8005d94:	464b      	mov	r3, r9
 8005d96:	1891      	adds	r1, r2, r2
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	415b      	adcs	r3, r3
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005da2:	4641      	mov	r1, r8
 8005da4:	1851      	adds	r1, r2, r1
 8005da6:	6039      	str	r1, [r7, #0]
 8005da8:	4649      	mov	r1, r9
 8005daa:	414b      	adcs	r3, r1
 8005dac:	607b      	str	r3, [r7, #4]
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dba:	4659      	mov	r1, fp
 8005dbc:	00cb      	lsls	r3, r1, #3
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc4:	4651      	mov	r1, sl
 8005dc6:	00ca      	lsls	r2, r1, #3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4603      	mov	r3, r0
 8005dce:	4642      	mov	r2, r8
 8005dd0:	189b      	adds	r3, r3, r2
 8005dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	460a      	mov	r2, r1
 8005dd8:	eb42 0303 	adc.w	r3, r2, r3
 8005ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	663b      	str	r3, [r7, #96]	; 0x60
 8005de8:	667a      	str	r2, [r7, #100]	; 0x64
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005df6:	4649      	mov	r1, r9
 8005df8:	008b      	lsls	r3, r1, #2
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e00:	4641      	mov	r1, r8
 8005e02:	008a      	lsls	r2, r1, #2
 8005e04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e08:	f7fa fa3a 	bl	8000280 <__aeabi_uldivmod>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <UART_SetConfig+0x570>)
 8005e12:	fba3 1302 	umull	r1, r3, r3, r2
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	2164      	movs	r1, #100	; 0x64
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	3332      	adds	r3, #50	; 0x32
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <UART_SetConfig+0x570>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	f003 020f 	and.w	r2, r3, #15
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4422      	add	r2, r4
 8005e38:	609a      	str	r2, [r3, #8]
}
 8005e3a:	bf00      	nop
 8005e3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005e40:	46bd      	mov	sp, r7
 8005e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e46:	bf00      	nop
 8005e48:	51eb851f 	.word	0x51eb851f

08005e4c <__errno>:
 8005e4c:	4b01      	ldr	r3, [pc, #4]	; (8005e54 <__errno+0x8>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000000c 	.word	0x2000000c

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4d0d      	ldr	r5, [pc, #52]	; (8005e90 <__libc_init_array+0x38>)
 8005e5c:	4c0d      	ldr	r4, [pc, #52]	; (8005e94 <__libc_init_array+0x3c>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	2600      	movs	r6, #0
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	4d0b      	ldr	r5, [pc, #44]	; (8005e98 <__libc_init_array+0x40>)
 8005e6a:	4c0c      	ldr	r4, [pc, #48]	; (8005e9c <__libc_init_array+0x44>)
 8005e6c:	f000 ffae 	bl	8006dcc <_init>
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	2600      	movs	r6, #0
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	08007038 	.word	0x08007038
 8005e94:	08007038 	.word	0x08007038
 8005e98:	08007038 	.word	0x08007038
 8005e9c:	0800703c 	.word	0x0800703c

08005ea0 <memset>:
 8005ea0:	4402      	add	r2, r0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <memset+0xa>
 8005ea8:	4770      	bx	lr
 8005eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005eae:	e7f9      	b.n	8005ea4 <memset+0x4>

08005eb0 <iprintf>:
 8005eb0:	b40f      	push	{r0, r1, r2, r3}
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <iprintf+0x2c>)
 8005eb4:	b513      	push	{r0, r1, r4, lr}
 8005eb6:	681c      	ldr	r4, [r3, #0]
 8005eb8:	b124      	cbz	r4, 8005ec4 <iprintf+0x14>
 8005eba:	69a3      	ldr	r3, [r4, #24]
 8005ebc:	b913      	cbnz	r3, 8005ec4 <iprintf+0x14>
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	f000 f866 	bl	8005f90 <__sinit>
 8005ec4:	ab05      	add	r3, sp, #20
 8005ec6:	9a04      	ldr	r2, [sp, #16]
 8005ec8:	68a1      	ldr	r1, [r4, #8]
 8005eca:	9301      	str	r3, [sp, #4]
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 f9bd 	bl	800624c <_vfiprintf_r>
 8005ed2:	b002      	add	sp, #8
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	b004      	add	sp, #16
 8005eda:	4770      	bx	lr
 8005edc:	2000000c 	.word	0x2000000c

08005ee0 <std>:
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eee:	6083      	str	r3, [r0, #8]
 8005ef0:	8181      	strh	r1, [r0, #12]
 8005ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ef4:	81c2      	strh	r2, [r0, #14]
 8005ef6:	6183      	str	r3, [r0, #24]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	2208      	movs	r2, #8
 8005efc:	305c      	adds	r0, #92	; 0x5c
 8005efe:	f7ff ffcf 	bl	8005ea0 <memset>
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <std+0x38>)
 8005f04:	6263      	str	r3, [r4, #36]	; 0x24
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <std+0x3c>)
 8005f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <std+0x40>)
 8005f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <std+0x44>)
 8005f10:	6224      	str	r4, [r4, #32]
 8005f12:	6323      	str	r3, [r4, #48]	; 0x30
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	bf00      	nop
 8005f18:	080067f5 	.word	0x080067f5
 8005f1c:	08006817 	.word	0x08006817
 8005f20:	0800684f 	.word	0x0800684f
 8005f24:	08006873 	.word	0x08006873

08005f28 <_cleanup_r>:
 8005f28:	4901      	ldr	r1, [pc, #4]	; (8005f30 <_cleanup_r+0x8>)
 8005f2a:	f000 b8af 	b.w	800608c <_fwalk_reent>
 8005f2e:	bf00      	nop
 8005f30:	08006b4d 	.word	0x08006b4d

08005f34 <__sfmoreglue>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	2268      	movs	r2, #104	; 0x68
 8005f38:	1e4d      	subs	r5, r1, #1
 8005f3a:	4355      	muls	r5, r2
 8005f3c:	460e      	mov	r6, r1
 8005f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f42:	f000 f8e5 	bl	8006110 <_malloc_r>
 8005f46:	4604      	mov	r4, r0
 8005f48:	b140      	cbz	r0, 8005f5c <__sfmoreglue+0x28>
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8005f50:	300c      	adds	r0, #12
 8005f52:	60a0      	str	r0, [r4, #8]
 8005f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f58:	f7ff ffa2 	bl	8005ea0 <memset>
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}

08005f60 <__sfp_lock_acquire>:
 8005f60:	4801      	ldr	r0, [pc, #4]	; (8005f68 <__sfp_lock_acquire+0x8>)
 8005f62:	f000 b8b3 	b.w	80060cc <__retarget_lock_acquire_recursive>
 8005f66:	bf00      	nop
 8005f68:	200001b5 	.word	0x200001b5

08005f6c <__sfp_lock_release>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	; (8005f74 <__sfp_lock_release+0x8>)
 8005f6e:	f000 b8ae 	b.w	80060ce <__retarget_lock_release_recursive>
 8005f72:	bf00      	nop
 8005f74:	200001b5 	.word	0x200001b5

08005f78 <__sinit_lock_acquire>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__sinit_lock_acquire+0x8>)
 8005f7a:	f000 b8a7 	b.w	80060cc <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	200001b6 	.word	0x200001b6

08005f84 <__sinit_lock_release>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__sinit_lock_release+0x8>)
 8005f86:	f000 b8a2 	b.w	80060ce <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	200001b6 	.word	0x200001b6

08005f90 <__sinit>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	4604      	mov	r4, r0
 8005f94:	f7ff fff0 	bl	8005f78 <__sinit_lock_acquire>
 8005f98:	69a3      	ldr	r3, [r4, #24]
 8005f9a:	b11b      	cbz	r3, 8005fa4 <__sinit+0x14>
 8005f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa0:	f7ff bff0 	b.w	8005f84 <__sinit_lock_release>
 8005fa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8005faa:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <__sinit+0x68>)
 8005fac:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <__sinit+0x6c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fb2:	42a3      	cmp	r3, r4
 8005fb4:	bf04      	itt	eq
 8005fb6:	2301      	moveq	r3, #1
 8005fb8:	61a3      	streq	r3, [r4, #24]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f820 	bl	8006000 <__sfp>
 8005fc0:	6060      	str	r0, [r4, #4]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f81c 	bl	8006000 <__sfp>
 8005fc8:	60a0      	str	r0, [r4, #8]
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f818 	bl	8006000 <__sfp>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	60e0      	str	r0, [r4, #12]
 8005fd4:	2104      	movs	r1, #4
 8005fd6:	6860      	ldr	r0, [r4, #4]
 8005fd8:	f7ff ff82 	bl	8005ee0 <std>
 8005fdc:	68a0      	ldr	r0, [r4, #8]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	2109      	movs	r1, #9
 8005fe2:	f7ff ff7d 	bl	8005ee0 <std>
 8005fe6:	68e0      	ldr	r0, [r4, #12]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	2112      	movs	r1, #18
 8005fec:	f7ff ff78 	bl	8005ee0 <std>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	61a3      	str	r3, [r4, #24]
 8005ff4:	e7d2      	b.n	8005f9c <__sinit+0xc>
 8005ff6:	bf00      	nop
 8005ff8:	08006f98 	.word	0x08006f98
 8005ffc:	08005f29 	.word	0x08005f29

08006000 <__sfp>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	4607      	mov	r7, r0
 8006004:	f7ff ffac 	bl	8005f60 <__sfp_lock_acquire>
 8006008:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <__sfp+0x84>)
 800600a:	681e      	ldr	r6, [r3, #0]
 800600c:	69b3      	ldr	r3, [r6, #24]
 800600e:	b913      	cbnz	r3, 8006016 <__sfp+0x16>
 8006010:	4630      	mov	r0, r6
 8006012:	f7ff ffbd 	bl	8005f90 <__sinit>
 8006016:	3648      	adds	r6, #72	; 0x48
 8006018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800601c:	3b01      	subs	r3, #1
 800601e:	d503      	bpl.n	8006028 <__sfp+0x28>
 8006020:	6833      	ldr	r3, [r6, #0]
 8006022:	b30b      	cbz	r3, 8006068 <__sfp+0x68>
 8006024:	6836      	ldr	r6, [r6, #0]
 8006026:	e7f7      	b.n	8006018 <__sfp+0x18>
 8006028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800602c:	b9d5      	cbnz	r5, 8006064 <__sfp+0x64>
 800602e:	4b16      	ldr	r3, [pc, #88]	; (8006088 <__sfp+0x88>)
 8006030:	60e3      	str	r3, [r4, #12]
 8006032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006036:	6665      	str	r5, [r4, #100]	; 0x64
 8006038:	f000 f847 	bl	80060ca <__retarget_lock_init_recursive>
 800603c:	f7ff ff96 	bl	8005f6c <__sfp_lock_release>
 8006040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006048:	6025      	str	r5, [r4, #0]
 800604a:	61a5      	str	r5, [r4, #24]
 800604c:	2208      	movs	r2, #8
 800604e:	4629      	mov	r1, r5
 8006050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006054:	f7ff ff24 	bl	8005ea0 <memset>
 8006058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800605c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006060:	4620      	mov	r0, r4
 8006062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006064:	3468      	adds	r4, #104	; 0x68
 8006066:	e7d9      	b.n	800601c <__sfp+0x1c>
 8006068:	2104      	movs	r1, #4
 800606a:	4638      	mov	r0, r7
 800606c:	f7ff ff62 	bl	8005f34 <__sfmoreglue>
 8006070:	4604      	mov	r4, r0
 8006072:	6030      	str	r0, [r6, #0]
 8006074:	2800      	cmp	r0, #0
 8006076:	d1d5      	bne.n	8006024 <__sfp+0x24>
 8006078:	f7ff ff78 	bl	8005f6c <__sfp_lock_release>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	e7ee      	b.n	8006060 <__sfp+0x60>
 8006082:	bf00      	nop
 8006084:	08006f98 	.word	0x08006f98
 8006088:	ffff0001 	.word	0xffff0001

0800608c <_fwalk_reent>:
 800608c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006090:	4606      	mov	r6, r0
 8006092:	4688      	mov	r8, r1
 8006094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006098:	2700      	movs	r7, #0
 800609a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800609e:	f1b9 0901 	subs.w	r9, r9, #1
 80060a2:	d505      	bpl.n	80060b0 <_fwalk_reent+0x24>
 80060a4:	6824      	ldr	r4, [r4, #0]
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	d1f7      	bne.n	800609a <_fwalk_reent+0xe>
 80060aa:	4638      	mov	r0, r7
 80060ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b0:	89ab      	ldrh	r3, [r5, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d907      	bls.n	80060c6 <_fwalk_reent+0x3a>
 80060b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ba:	3301      	adds	r3, #1
 80060bc:	d003      	beq.n	80060c6 <_fwalk_reent+0x3a>
 80060be:	4629      	mov	r1, r5
 80060c0:	4630      	mov	r0, r6
 80060c2:	47c0      	blx	r8
 80060c4:	4307      	orrs	r7, r0
 80060c6:	3568      	adds	r5, #104	; 0x68
 80060c8:	e7e9      	b.n	800609e <_fwalk_reent+0x12>

080060ca <__retarget_lock_init_recursive>:
 80060ca:	4770      	bx	lr

080060cc <__retarget_lock_acquire_recursive>:
 80060cc:	4770      	bx	lr

080060ce <__retarget_lock_release_recursive>:
 80060ce:	4770      	bx	lr

080060d0 <sbrk_aligned>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	4e0e      	ldr	r6, [pc, #56]	; (800610c <sbrk_aligned+0x3c>)
 80060d4:	460c      	mov	r4, r1
 80060d6:	6831      	ldr	r1, [r6, #0]
 80060d8:	4605      	mov	r5, r0
 80060da:	b911      	cbnz	r1, 80060e2 <sbrk_aligned+0x12>
 80060dc:	f000 fb7a 	bl	80067d4 <_sbrk_r>
 80060e0:	6030      	str	r0, [r6, #0]
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 fb75 	bl	80067d4 <_sbrk_r>
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	d00a      	beq.n	8006104 <sbrk_aligned+0x34>
 80060ee:	1cc4      	adds	r4, r0, #3
 80060f0:	f024 0403 	bic.w	r4, r4, #3
 80060f4:	42a0      	cmp	r0, r4
 80060f6:	d007      	beq.n	8006108 <sbrk_aligned+0x38>
 80060f8:	1a21      	subs	r1, r4, r0
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 fb6a 	bl	80067d4 <_sbrk_r>
 8006100:	3001      	adds	r0, #1
 8006102:	d101      	bne.n	8006108 <sbrk_aligned+0x38>
 8006104:	f04f 34ff 	mov.w	r4, #4294967295
 8006108:	4620      	mov	r0, r4
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	200001bc 	.word	0x200001bc

08006110 <_malloc_r>:
 8006110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006114:	1ccd      	adds	r5, r1, #3
 8006116:	f025 0503 	bic.w	r5, r5, #3
 800611a:	3508      	adds	r5, #8
 800611c:	2d0c      	cmp	r5, #12
 800611e:	bf38      	it	cc
 8006120:	250c      	movcc	r5, #12
 8006122:	2d00      	cmp	r5, #0
 8006124:	4607      	mov	r7, r0
 8006126:	db01      	blt.n	800612c <_malloc_r+0x1c>
 8006128:	42a9      	cmp	r1, r5
 800612a:	d905      	bls.n	8006138 <_malloc_r+0x28>
 800612c:	230c      	movs	r3, #12
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	2600      	movs	r6, #0
 8006132:	4630      	mov	r0, r6
 8006134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006138:	4e2e      	ldr	r6, [pc, #184]	; (80061f4 <_malloc_r+0xe4>)
 800613a:	f000 fdbb 	bl	8006cb4 <__malloc_lock>
 800613e:	6833      	ldr	r3, [r6, #0]
 8006140:	461c      	mov	r4, r3
 8006142:	bb34      	cbnz	r4, 8006192 <_malloc_r+0x82>
 8006144:	4629      	mov	r1, r5
 8006146:	4638      	mov	r0, r7
 8006148:	f7ff ffc2 	bl	80060d0 <sbrk_aligned>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	4604      	mov	r4, r0
 8006150:	d14d      	bne.n	80061ee <_malloc_r+0xde>
 8006152:	6834      	ldr	r4, [r6, #0]
 8006154:	4626      	mov	r6, r4
 8006156:	2e00      	cmp	r6, #0
 8006158:	d140      	bne.n	80061dc <_malloc_r+0xcc>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	4631      	mov	r1, r6
 800615e:	4638      	mov	r0, r7
 8006160:	eb04 0803 	add.w	r8, r4, r3
 8006164:	f000 fb36 	bl	80067d4 <_sbrk_r>
 8006168:	4580      	cmp	r8, r0
 800616a:	d13a      	bne.n	80061e2 <_malloc_r+0xd2>
 800616c:	6821      	ldr	r1, [r4, #0]
 800616e:	3503      	adds	r5, #3
 8006170:	1a6d      	subs	r5, r5, r1
 8006172:	f025 0503 	bic.w	r5, r5, #3
 8006176:	3508      	adds	r5, #8
 8006178:	2d0c      	cmp	r5, #12
 800617a:	bf38      	it	cc
 800617c:	250c      	movcc	r5, #12
 800617e:	4629      	mov	r1, r5
 8006180:	4638      	mov	r0, r7
 8006182:	f7ff ffa5 	bl	80060d0 <sbrk_aligned>
 8006186:	3001      	adds	r0, #1
 8006188:	d02b      	beq.n	80061e2 <_malloc_r+0xd2>
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	442b      	add	r3, r5
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	e00e      	b.n	80061b0 <_malloc_r+0xa0>
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	1b52      	subs	r2, r2, r5
 8006196:	d41e      	bmi.n	80061d6 <_malloc_r+0xc6>
 8006198:	2a0b      	cmp	r2, #11
 800619a:	d916      	bls.n	80061ca <_malloc_r+0xba>
 800619c:	1961      	adds	r1, r4, r5
 800619e:	42a3      	cmp	r3, r4
 80061a0:	6025      	str	r5, [r4, #0]
 80061a2:	bf18      	it	ne
 80061a4:	6059      	strne	r1, [r3, #4]
 80061a6:	6863      	ldr	r3, [r4, #4]
 80061a8:	bf08      	it	eq
 80061aa:	6031      	streq	r1, [r6, #0]
 80061ac:	5162      	str	r2, [r4, r5]
 80061ae:	604b      	str	r3, [r1, #4]
 80061b0:	4638      	mov	r0, r7
 80061b2:	f104 060b 	add.w	r6, r4, #11
 80061b6:	f000 fd83 	bl	8006cc0 <__malloc_unlock>
 80061ba:	f026 0607 	bic.w	r6, r6, #7
 80061be:	1d23      	adds	r3, r4, #4
 80061c0:	1af2      	subs	r2, r6, r3
 80061c2:	d0b6      	beq.n	8006132 <_malloc_r+0x22>
 80061c4:	1b9b      	subs	r3, r3, r6
 80061c6:	50a3      	str	r3, [r4, r2]
 80061c8:	e7b3      	b.n	8006132 <_malloc_r+0x22>
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	bf0c      	ite	eq
 80061d0:	6032      	streq	r2, [r6, #0]
 80061d2:	605a      	strne	r2, [r3, #4]
 80061d4:	e7ec      	b.n	80061b0 <_malloc_r+0xa0>
 80061d6:	4623      	mov	r3, r4
 80061d8:	6864      	ldr	r4, [r4, #4]
 80061da:	e7b2      	b.n	8006142 <_malloc_r+0x32>
 80061dc:	4634      	mov	r4, r6
 80061de:	6876      	ldr	r6, [r6, #4]
 80061e0:	e7b9      	b.n	8006156 <_malloc_r+0x46>
 80061e2:	230c      	movs	r3, #12
 80061e4:	603b      	str	r3, [r7, #0]
 80061e6:	4638      	mov	r0, r7
 80061e8:	f000 fd6a 	bl	8006cc0 <__malloc_unlock>
 80061ec:	e7a1      	b.n	8006132 <_malloc_r+0x22>
 80061ee:	6025      	str	r5, [r4, #0]
 80061f0:	e7de      	b.n	80061b0 <_malloc_r+0xa0>
 80061f2:	bf00      	nop
 80061f4:	200001b8 	.word	0x200001b8

080061f8 <__sfputc_r>:
 80061f8:	6893      	ldr	r3, [r2, #8]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	b410      	push	{r4}
 8006200:	6093      	str	r3, [r2, #8]
 8006202:	da08      	bge.n	8006216 <__sfputc_r+0x1e>
 8006204:	6994      	ldr	r4, [r2, #24]
 8006206:	42a3      	cmp	r3, r4
 8006208:	db01      	blt.n	800620e <__sfputc_r+0x16>
 800620a:	290a      	cmp	r1, #10
 800620c:	d103      	bne.n	8006216 <__sfputc_r+0x1e>
 800620e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006212:	f000 bb33 	b.w	800687c <__swbuf_r>
 8006216:	6813      	ldr	r3, [r2, #0]
 8006218:	1c58      	adds	r0, r3, #1
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	7019      	strb	r1, [r3, #0]
 800621e:	4608      	mov	r0, r1
 8006220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006224:	4770      	bx	lr

08006226 <__sfputs_r>:
 8006226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006228:	4606      	mov	r6, r0
 800622a:	460f      	mov	r7, r1
 800622c:	4614      	mov	r4, r2
 800622e:	18d5      	adds	r5, r2, r3
 8006230:	42ac      	cmp	r4, r5
 8006232:	d101      	bne.n	8006238 <__sfputs_r+0x12>
 8006234:	2000      	movs	r0, #0
 8006236:	e007      	b.n	8006248 <__sfputs_r+0x22>
 8006238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623c:	463a      	mov	r2, r7
 800623e:	4630      	mov	r0, r6
 8006240:	f7ff ffda 	bl	80061f8 <__sfputc_r>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d1f3      	bne.n	8006230 <__sfputs_r+0xa>
 8006248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800624c <_vfiprintf_r>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	460d      	mov	r5, r1
 8006252:	b09d      	sub	sp, #116	; 0x74
 8006254:	4614      	mov	r4, r2
 8006256:	4698      	mov	r8, r3
 8006258:	4606      	mov	r6, r0
 800625a:	b118      	cbz	r0, 8006264 <_vfiprintf_r+0x18>
 800625c:	6983      	ldr	r3, [r0, #24]
 800625e:	b90b      	cbnz	r3, 8006264 <_vfiprintf_r+0x18>
 8006260:	f7ff fe96 	bl	8005f90 <__sinit>
 8006264:	4b89      	ldr	r3, [pc, #548]	; (800648c <_vfiprintf_r+0x240>)
 8006266:	429d      	cmp	r5, r3
 8006268:	d11b      	bne.n	80062a2 <_vfiprintf_r+0x56>
 800626a:	6875      	ldr	r5, [r6, #4]
 800626c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800626e:	07d9      	lsls	r1, r3, #31
 8006270:	d405      	bmi.n	800627e <_vfiprintf_r+0x32>
 8006272:	89ab      	ldrh	r3, [r5, #12]
 8006274:	059a      	lsls	r2, r3, #22
 8006276:	d402      	bmi.n	800627e <_vfiprintf_r+0x32>
 8006278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800627a:	f7ff ff27 	bl	80060cc <__retarget_lock_acquire_recursive>
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	071b      	lsls	r3, r3, #28
 8006282:	d501      	bpl.n	8006288 <_vfiprintf_r+0x3c>
 8006284:	692b      	ldr	r3, [r5, #16]
 8006286:	b9eb      	cbnz	r3, 80062c4 <_vfiprintf_r+0x78>
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f000 fb5a 	bl	8006944 <__swsetup_r>
 8006290:	b1c0      	cbz	r0, 80062c4 <_vfiprintf_r+0x78>
 8006292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006294:	07dc      	lsls	r4, r3, #31
 8006296:	d50e      	bpl.n	80062b6 <_vfiprintf_r+0x6a>
 8006298:	f04f 30ff 	mov.w	r0, #4294967295
 800629c:	b01d      	add	sp, #116	; 0x74
 800629e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a2:	4b7b      	ldr	r3, [pc, #492]	; (8006490 <_vfiprintf_r+0x244>)
 80062a4:	429d      	cmp	r5, r3
 80062a6:	d101      	bne.n	80062ac <_vfiprintf_r+0x60>
 80062a8:	68b5      	ldr	r5, [r6, #8]
 80062aa:	e7df      	b.n	800626c <_vfiprintf_r+0x20>
 80062ac:	4b79      	ldr	r3, [pc, #484]	; (8006494 <_vfiprintf_r+0x248>)
 80062ae:	429d      	cmp	r5, r3
 80062b0:	bf08      	it	eq
 80062b2:	68f5      	ldreq	r5, [r6, #12]
 80062b4:	e7da      	b.n	800626c <_vfiprintf_r+0x20>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	0598      	lsls	r0, r3, #22
 80062ba:	d4ed      	bmi.n	8006298 <_vfiprintf_r+0x4c>
 80062bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062be:	f7ff ff06 	bl	80060ce <__retarget_lock_release_recursive>
 80062c2:	e7e9      	b.n	8006298 <_vfiprintf_r+0x4c>
 80062c4:	2300      	movs	r3, #0
 80062c6:	9309      	str	r3, [sp, #36]	; 0x24
 80062c8:	2320      	movs	r3, #32
 80062ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80062d2:	2330      	movs	r3, #48	; 0x30
 80062d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006498 <_vfiprintf_r+0x24c>
 80062d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062dc:	f04f 0901 	mov.w	r9, #1
 80062e0:	4623      	mov	r3, r4
 80062e2:	469a      	mov	sl, r3
 80062e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062e8:	b10a      	cbz	r2, 80062ee <_vfiprintf_r+0xa2>
 80062ea:	2a25      	cmp	r2, #37	; 0x25
 80062ec:	d1f9      	bne.n	80062e2 <_vfiprintf_r+0x96>
 80062ee:	ebba 0b04 	subs.w	fp, sl, r4
 80062f2:	d00b      	beq.n	800630c <_vfiprintf_r+0xc0>
 80062f4:	465b      	mov	r3, fp
 80062f6:	4622      	mov	r2, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff ff93 	bl	8006226 <__sfputs_r>
 8006300:	3001      	adds	r0, #1
 8006302:	f000 80aa 	beq.w	800645a <_vfiprintf_r+0x20e>
 8006306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006308:	445a      	add	r2, fp
 800630a:	9209      	str	r2, [sp, #36]	; 0x24
 800630c:	f89a 3000 	ldrb.w	r3, [sl]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80a2 	beq.w	800645a <_vfiprintf_r+0x20e>
 8006316:	2300      	movs	r3, #0
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006320:	f10a 0a01 	add.w	sl, sl, #1
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	9307      	str	r3, [sp, #28]
 8006328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800632c:	931a      	str	r3, [sp, #104]	; 0x68
 800632e:	4654      	mov	r4, sl
 8006330:	2205      	movs	r2, #5
 8006332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006336:	4858      	ldr	r0, [pc, #352]	; (8006498 <_vfiprintf_r+0x24c>)
 8006338:	f7f9 ff52 	bl	80001e0 <memchr>
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	b9d8      	cbnz	r0, 8006378 <_vfiprintf_r+0x12c>
 8006340:	06d1      	lsls	r1, r2, #27
 8006342:	bf44      	itt	mi
 8006344:	2320      	movmi	r3, #32
 8006346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800634a:	0713      	lsls	r3, r2, #28
 800634c:	bf44      	itt	mi
 800634e:	232b      	movmi	r3, #43	; 0x2b
 8006350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006354:	f89a 3000 	ldrb.w	r3, [sl]
 8006358:	2b2a      	cmp	r3, #42	; 0x2a
 800635a:	d015      	beq.n	8006388 <_vfiprintf_r+0x13c>
 800635c:	9a07      	ldr	r2, [sp, #28]
 800635e:	4654      	mov	r4, sl
 8006360:	2000      	movs	r0, #0
 8006362:	f04f 0c0a 	mov.w	ip, #10
 8006366:	4621      	mov	r1, r4
 8006368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636c:	3b30      	subs	r3, #48	; 0x30
 800636e:	2b09      	cmp	r3, #9
 8006370:	d94e      	bls.n	8006410 <_vfiprintf_r+0x1c4>
 8006372:	b1b0      	cbz	r0, 80063a2 <_vfiprintf_r+0x156>
 8006374:	9207      	str	r2, [sp, #28]
 8006376:	e014      	b.n	80063a2 <_vfiprintf_r+0x156>
 8006378:	eba0 0308 	sub.w	r3, r0, r8
 800637c:	fa09 f303 	lsl.w	r3, r9, r3
 8006380:	4313      	orrs	r3, r2
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	46a2      	mov	sl, r4
 8006386:	e7d2      	b.n	800632e <_vfiprintf_r+0xe2>
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	1d19      	adds	r1, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	9103      	str	r1, [sp, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	bfbb      	ittet	lt
 8006394:	425b      	neglt	r3, r3
 8006396:	f042 0202 	orrlt.w	r2, r2, #2
 800639a:	9307      	strge	r3, [sp, #28]
 800639c:	9307      	strlt	r3, [sp, #28]
 800639e:	bfb8      	it	lt
 80063a0:	9204      	strlt	r2, [sp, #16]
 80063a2:	7823      	ldrb	r3, [r4, #0]
 80063a4:	2b2e      	cmp	r3, #46	; 0x2e
 80063a6:	d10c      	bne.n	80063c2 <_vfiprintf_r+0x176>
 80063a8:	7863      	ldrb	r3, [r4, #1]
 80063aa:	2b2a      	cmp	r3, #42	; 0x2a
 80063ac:	d135      	bne.n	800641a <_vfiprintf_r+0x1ce>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	9203      	str	r2, [sp, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfb8      	it	lt
 80063ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80063be:	3402      	adds	r4, #2
 80063c0:	9305      	str	r3, [sp, #20]
 80063c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064a8 <_vfiprintf_r+0x25c>
 80063c6:	7821      	ldrb	r1, [r4, #0]
 80063c8:	2203      	movs	r2, #3
 80063ca:	4650      	mov	r0, sl
 80063cc:	f7f9 ff08 	bl	80001e0 <memchr>
 80063d0:	b140      	cbz	r0, 80063e4 <_vfiprintf_r+0x198>
 80063d2:	2340      	movs	r3, #64	; 0x40
 80063d4:	eba0 000a 	sub.w	r0, r0, sl
 80063d8:	fa03 f000 	lsl.w	r0, r3, r0
 80063dc:	9b04      	ldr	r3, [sp, #16]
 80063de:	4303      	orrs	r3, r0
 80063e0:	3401      	adds	r4, #1
 80063e2:	9304      	str	r3, [sp, #16]
 80063e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e8:	482c      	ldr	r0, [pc, #176]	; (800649c <_vfiprintf_r+0x250>)
 80063ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063ee:	2206      	movs	r2, #6
 80063f0:	f7f9 fef6 	bl	80001e0 <memchr>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d03f      	beq.n	8006478 <_vfiprintf_r+0x22c>
 80063f8:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <_vfiprintf_r+0x254>)
 80063fa:	bb1b      	cbnz	r3, 8006444 <_vfiprintf_r+0x1f8>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	3307      	adds	r3, #7
 8006400:	f023 0307 	bic.w	r3, r3, #7
 8006404:	3308      	adds	r3, #8
 8006406:	9303      	str	r3, [sp, #12]
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	443b      	add	r3, r7
 800640c:	9309      	str	r3, [sp, #36]	; 0x24
 800640e:	e767      	b.n	80062e0 <_vfiprintf_r+0x94>
 8006410:	fb0c 3202 	mla	r2, ip, r2, r3
 8006414:	460c      	mov	r4, r1
 8006416:	2001      	movs	r0, #1
 8006418:	e7a5      	b.n	8006366 <_vfiprintf_r+0x11a>
 800641a:	2300      	movs	r3, #0
 800641c:	3401      	adds	r4, #1
 800641e:	9305      	str	r3, [sp, #20]
 8006420:	4619      	mov	r1, r3
 8006422:	f04f 0c0a 	mov.w	ip, #10
 8006426:	4620      	mov	r0, r4
 8006428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800642c:	3a30      	subs	r2, #48	; 0x30
 800642e:	2a09      	cmp	r2, #9
 8006430:	d903      	bls.n	800643a <_vfiprintf_r+0x1ee>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0c5      	beq.n	80063c2 <_vfiprintf_r+0x176>
 8006436:	9105      	str	r1, [sp, #20]
 8006438:	e7c3      	b.n	80063c2 <_vfiprintf_r+0x176>
 800643a:	fb0c 2101 	mla	r1, ip, r1, r2
 800643e:	4604      	mov	r4, r0
 8006440:	2301      	movs	r3, #1
 8006442:	e7f0      	b.n	8006426 <_vfiprintf_r+0x1da>
 8006444:	ab03      	add	r3, sp, #12
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	462a      	mov	r2, r5
 800644a:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <_vfiprintf_r+0x258>)
 800644c:	a904      	add	r1, sp, #16
 800644e:	4630      	mov	r0, r6
 8006450:	f3af 8000 	nop.w
 8006454:	4607      	mov	r7, r0
 8006456:	1c78      	adds	r0, r7, #1
 8006458:	d1d6      	bne.n	8006408 <_vfiprintf_r+0x1bc>
 800645a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800645c:	07d9      	lsls	r1, r3, #31
 800645e:	d405      	bmi.n	800646c <_vfiprintf_r+0x220>
 8006460:	89ab      	ldrh	r3, [r5, #12]
 8006462:	059a      	lsls	r2, r3, #22
 8006464:	d402      	bmi.n	800646c <_vfiprintf_r+0x220>
 8006466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006468:	f7ff fe31 	bl	80060ce <__retarget_lock_release_recursive>
 800646c:	89ab      	ldrh	r3, [r5, #12]
 800646e:	065b      	lsls	r3, r3, #25
 8006470:	f53f af12 	bmi.w	8006298 <_vfiprintf_r+0x4c>
 8006474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006476:	e711      	b.n	800629c <_vfiprintf_r+0x50>
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	462a      	mov	r2, r5
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <_vfiprintf_r+0x258>)
 8006480:	a904      	add	r1, sp, #16
 8006482:	4630      	mov	r0, r6
 8006484:	f000 f880 	bl	8006588 <_printf_i>
 8006488:	e7e4      	b.n	8006454 <_vfiprintf_r+0x208>
 800648a:	bf00      	nop
 800648c:	08006fbc 	.word	0x08006fbc
 8006490:	08006fdc 	.word	0x08006fdc
 8006494:	08006f9c 	.word	0x08006f9c
 8006498:	08006ffc 	.word	0x08006ffc
 800649c:	08007006 	.word	0x08007006
 80064a0:	00000000 	.word	0x00000000
 80064a4:	08006227 	.word	0x08006227
 80064a8:	08007002 	.word	0x08007002

080064ac <_printf_common>:
 80064ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	4616      	mov	r6, r2
 80064b2:	4699      	mov	r9, r3
 80064b4:	688a      	ldr	r2, [r1, #8]
 80064b6:	690b      	ldr	r3, [r1, #16]
 80064b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064bc:	4293      	cmp	r3, r2
 80064be:	bfb8      	it	lt
 80064c0:	4613      	movlt	r3, r2
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064c8:	4607      	mov	r7, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	b10a      	cbz	r2, 80064d2 <_printf_common+0x26>
 80064ce:	3301      	adds	r3, #1
 80064d0:	6033      	str	r3, [r6, #0]
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	0699      	lsls	r1, r3, #26
 80064d6:	bf42      	ittt	mi
 80064d8:	6833      	ldrmi	r3, [r6, #0]
 80064da:	3302      	addmi	r3, #2
 80064dc:	6033      	strmi	r3, [r6, #0]
 80064de:	6825      	ldr	r5, [r4, #0]
 80064e0:	f015 0506 	ands.w	r5, r5, #6
 80064e4:	d106      	bne.n	80064f4 <_printf_common+0x48>
 80064e6:	f104 0a19 	add.w	sl, r4, #25
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	6832      	ldr	r2, [r6, #0]
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	dc26      	bgt.n	8006542 <_printf_common+0x96>
 80064f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064f8:	1e13      	subs	r3, r2, #0
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	bf18      	it	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	0692      	lsls	r2, r2, #26
 8006502:	d42b      	bmi.n	800655c <_printf_common+0xb0>
 8006504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006508:	4649      	mov	r1, r9
 800650a:	4638      	mov	r0, r7
 800650c:	47c0      	blx	r8
 800650e:	3001      	adds	r0, #1
 8006510:	d01e      	beq.n	8006550 <_printf_common+0xa4>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	68e5      	ldr	r5, [r4, #12]
 8006516:	6832      	ldr	r2, [r6, #0]
 8006518:	f003 0306 	and.w	r3, r3, #6
 800651c:	2b04      	cmp	r3, #4
 800651e:	bf08      	it	eq
 8006520:	1aad      	subeq	r5, r5, r2
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	6922      	ldr	r2, [r4, #16]
 8006526:	bf0c      	ite	eq
 8006528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800652c:	2500      	movne	r5, #0
 800652e:	4293      	cmp	r3, r2
 8006530:	bfc4      	itt	gt
 8006532:	1a9b      	subgt	r3, r3, r2
 8006534:	18ed      	addgt	r5, r5, r3
 8006536:	2600      	movs	r6, #0
 8006538:	341a      	adds	r4, #26
 800653a:	42b5      	cmp	r5, r6
 800653c:	d11a      	bne.n	8006574 <_printf_common+0xc8>
 800653e:	2000      	movs	r0, #0
 8006540:	e008      	b.n	8006554 <_printf_common+0xa8>
 8006542:	2301      	movs	r3, #1
 8006544:	4652      	mov	r2, sl
 8006546:	4649      	mov	r1, r9
 8006548:	4638      	mov	r0, r7
 800654a:	47c0      	blx	r8
 800654c:	3001      	adds	r0, #1
 800654e:	d103      	bne.n	8006558 <_printf_common+0xac>
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006558:	3501      	adds	r5, #1
 800655a:	e7c6      	b.n	80064ea <_printf_common+0x3e>
 800655c:	18e1      	adds	r1, r4, r3
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	2030      	movs	r0, #48	; 0x30
 8006562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006566:	4422      	add	r2, r4
 8006568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800656c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006570:	3302      	adds	r3, #2
 8006572:	e7c7      	b.n	8006504 <_printf_common+0x58>
 8006574:	2301      	movs	r3, #1
 8006576:	4622      	mov	r2, r4
 8006578:	4649      	mov	r1, r9
 800657a:	4638      	mov	r0, r7
 800657c:	47c0      	blx	r8
 800657e:	3001      	adds	r0, #1
 8006580:	d0e6      	beq.n	8006550 <_printf_common+0xa4>
 8006582:	3601      	adds	r6, #1
 8006584:	e7d9      	b.n	800653a <_printf_common+0x8e>
	...

08006588 <_printf_i>:
 8006588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	7e0f      	ldrb	r7, [r1, #24]
 800658e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006590:	2f78      	cmp	r7, #120	; 0x78
 8006592:	4691      	mov	r9, r2
 8006594:	4680      	mov	r8, r0
 8006596:	460c      	mov	r4, r1
 8006598:	469a      	mov	sl, r3
 800659a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800659e:	d807      	bhi.n	80065b0 <_printf_i+0x28>
 80065a0:	2f62      	cmp	r7, #98	; 0x62
 80065a2:	d80a      	bhi.n	80065ba <_printf_i+0x32>
 80065a4:	2f00      	cmp	r7, #0
 80065a6:	f000 80d8 	beq.w	800675a <_printf_i+0x1d2>
 80065aa:	2f58      	cmp	r7, #88	; 0x58
 80065ac:	f000 80a3 	beq.w	80066f6 <_printf_i+0x16e>
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065b8:	e03a      	b.n	8006630 <_printf_i+0xa8>
 80065ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065be:	2b15      	cmp	r3, #21
 80065c0:	d8f6      	bhi.n	80065b0 <_printf_i+0x28>
 80065c2:	a101      	add	r1, pc, #4	; (adr r1, 80065c8 <_printf_i+0x40>)
 80065c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065c8:	08006621 	.word	0x08006621
 80065cc:	08006635 	.word	0x08006635
 80065d0:	080065b1 	.word	0x080065b1
 80065d4:	080065b1 	.word	0x080065b1
 80065d8:	080065b1 	.word	0x080065b1
 80065dc:	080065b1 	.word	0x080065b1
 80065e0:	08006635 	.word	0x08006635
 80065e4:	080065b1 	.word	0x080065b1
 80065e8:	080065b1 	.word	0x080065b1
 80065ec:	080065b1 	.word	0x080065b1
 80065f0:	080065b1 	.word	0x080065b1
 80065f4:	08006741 	.word	0x08006741
 80065f8:	08006665 	.word	0x08006665
 80065fc:	08006723 	.word	0x08006723
 8006600:	080065b1 	.word	0x080065b1
 8006604:	080065b1 	.word	0x080065b1
 8006608:	08006763 	.word	0x08006763
 800660c:	080065b1 	.word	0x080065b1
 8006610:	08006665 	.word	0x08006665
 8006614:	080065b1 	.word	0x080065b1
 8006618:	080065b1 	.word	0x080065b1
 800661c:	0800672b 	.word	0x0800672b
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	1d1a      	adds	r2, r3, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	602a      	str	r2, [r5, #0]
 8006628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800662c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006630:	2301      	movs	r3, #1
 8006632:	e0a3      	b.n	800677c <_printf_i+0x1f4>
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	6829      	ldr	r1, [r5, #0]
 8006638:	0606      	lsls	r6, r0, #24
 800663a:	f101 0304 	add.w	r3, r1, #4
 800663e:	d50a      	bpl.n	8006656 <_printf_i+0xce>
 8006640:	680e      	ldr	r6, [r1, #0]
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	2e00      	cmp	r6, #0
 8006646:	da03      	bge.n	8006650 <_printf_i+0xc8>
 8006648:	232d      	movs	r3, #45	; 0x2d
 800664a:	4276      	negs	r6, r6
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	485e      	ldr	r0, [pc, #376]	; (80067cc <_printf_i+0x244>)
 8006652:	230a      	movs	r3, #10
 8006654:	e019      	b.n	800668a <_printf_i+0x102>
 8006656:	680e      	ldr	r6, [r1, #0]
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800665e:	bf18      	it	ne
 8006660:	b236      	sxthne	r6, r6
 8006662:	e7ef      	b.n	8006644 <_printf_i+0xbc>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	6820      	ldr	r0, [r4, #0]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	6029      	str	r1, [r5, #0]
 800666c:	0601      	lsls	r1, r0, #24
 800666e:	d501      	bpl.n	8006674 <_printf_i+0xec>
 8006670:	681e      	ldr	r6, [r3, #0]
 8006672:	e002      	b.n	800667a <_printf_i+0xf2>
 8006674:	0646      	lsls	r6, r0, #25
 8006676:	d5fb      	bpl.n	8006670 <_printf_i+0xe8>
 8006678:	881e      	ldrh	r6, [r3, #0]
 800667a:	4854      	ldr	r0, [pc, #336]	; (80067cc <_printf_i+0x244>)
 800667c:	2f6f      	cmp	r7, #111	; 0x6f
 800667e:	bf0c      	ite	eq
 8006680:	2308      	moveq	r3, #8
 8006682:	230a      	movne	r3, #10
 8006684:	2100      	movs	r1, #0
 8006686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800668a:	6865      	ldr	r5, [r4, #4]
 800668c:	60a5      	str	r5, [r4, #8]
 800668e:	2d00      	cmp	r5, #0
 8006690:	bfa2      	ittt	ge
 8006692:	6821      	ldrge	r1, [r4, #0]
 8006694:	f021 0104 	bicge.w	r1, r1, #4
 8006698:	6021      	strge	r1, [r4, #0]
 800669a:	b90e      	cbnz	r6, 80066a0 <_printf_i+0x118>
 800669c:	2d00      	cmp	r5, #0
 800669e:	d04d      	beq.n	800673c <_printf_i+0x1b4>
 80066a0:	4615      	mov	r5, r2
 80066a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80066a6:	fb03 6711 	mls	r7, r3, r1, r6
 80066aa:	5dc7      	ldrb	r7, [r0, r7]
 80066ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066b0:	4637      	mov	r7, r6
 80066b2:	42bb      	cmp	r3, r7
 80066b4:	460e      	mov	r6, r1
 80066b6:	d9f4      	bls.n	80066a2 <_printf_i+0x11a>
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d10b      	bne.n	80066d4 <_printf_i+0x14c>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	07de      	lsls	r6, r3, #31
 80066c0:	d508      	bpl.n	80066d4 <_printf_i+0x14c>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6861      	ldr	r1, [r4, #4]
 80066c6:	4299      	cmp	r1, r3
 80066c8:	bfde      	ittt	le
 80066ca:	2330      	movle	r3, #48	; 0x30
 80066cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066d4:	1b52      	subs	r2, r2, r5
 80066d6:	6122      	str	r2, [r4, #16]
 80066d8:	f8cd a000 	str.w	sl, [sp]
 80066dc:	464b      	mov	r3, r9
 80066de:	aa03      	add	r2, sp, #12
 80066e0:	4621      	mov	r1, r4
 80066e2:	4640      	mov	r0, r8
 80066e4:	f7ff fee2 	bl	80064ac <_printf_common>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d14c      	bne.n	8006786 <_printf_i+0x1fe>
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	b004      	add	sp, #16
 80066f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f6:	4835      	ldr	r0, [pc, #212]	; (80067cc <_printf_i+0x244>)
 80066f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066fc:	6829      	ldr	r1, [r5, #0]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f851 6b04 	ldr.w	r6, [r1], #4
 8006704:	6029      	str	r1, [r5, #0]
 8006706:	061d      	lsls	r5, r3, #24
 8006708:	d514      	bpl.n	8006734 <_printf_i+0x1ac>
 800670a:	07df      	lsls	r7, r3, #31
 800670c:	bf44      	itt	mi
 800670e:	f043 0320 	orrmi.w	r3, r3, #32
 8006712:	6023      	strmi	r3, [r4, #0]
 8006714:	b91e      	cbnz	r6, 800671e <_printf_i+0x196>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f023 0320 	bic.w	r3, r3, #32
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	2310      	movs	r3, #16
 8006720:	e7b0      	b.n	8006684 <_printf_i+0xfc>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f043 0320 	orr.w	r3, r3, #32
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	2378      	movs	r3, #120	; 0x78
 800672c:	4828      	ldr	r0, [pc, #160]	; (80067d0 <_printf_i+0x248>)
 800672e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006732:	e7e3      	b.n	80066fc <_printf_i+0x174>
 8006734:	0659      	lsls	r1, r3, #25
 8006736:	bf48      	it	mi
 8006738:	b2b6      	uxthmi	r6, r6
 800673a:	e7e6      	b.n	800670a <_printf_i+0x182>
 800673c:	4615      	mov	r5, r2
 800673e:	e7bb      	b.n	80066b8 <_printf_i+0x130>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	6826      	ldr	r6, [r4, #0]
 8006744:	6961      	ldr	r1, [r4, #20]
 8006746:	1d18      	adds	r0, r3, #4
 8006748:	6028      	str	r0, [r5, #0]
 800674a:	0635      	lsls	r5, r6, #24
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	d501      	bpl.n	8006754 <_printf_i+0x1cc>
 8006750:	6019      	str	r1, [r3, #0]
 8006752:	e002      	b.n	800675a <_printf_i+0x1d2>
 8006754:	0670      	lsls	r0, r6, #25
 8006756:	d5fb      	bpl.n	8006750 <_printf_i+0x1c8>
 8006758:	8019      	strh	r1, [r3, #0]
 800675a:	2300      	movs	r3, #0
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	4615      	mov	r5, r2
 8006760:	e7ba      	b.n	80066d8 <_printf_i+0x150>
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	1d1a      	adds	r2, r3, #4
 8006766:	602a      	str	r2, [r5, #0]
 8006768:	681d      	ldr	r5, [r3, #0]
 800676a:	6862      	ldr	r2, [r4, #4]
 800676c:	2100      	movs	r1, #0
 800676e:	4628      	mov	r0, r5
 8006770:	f7f9 fd36 	bl	80001e0 <memchr>
 8006774:	b108      	cbz	r0, 800677a <_printf_i+0x1f2>
 8006776:	1b40      	subs	r0, r0, r5
 8006778:	6060      	str	r0, [r4, #4]
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	6123      	str	r3, [r4, #16]
 800677e:	2300      	movs	r3, #0
 8006780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006784:	e7a8      	b.n	80066d8 <_printf_i+0x150>
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	462a      	mov	r2, r5
 800678a:	4649      	mov	r1, r9
 800678c:	4640      	mov	r0, r8
 800678e:	47d0      	blx	sl
 8006790:	3001      	adds	r0, #1
 8006792:	d0ab      	beq.n	80066ec <_printf_i+0x164>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	079b      	lsls	r3, r3, #30
 8006798:	d413      	bmi.n	80067c2 <_printf_i+0x23a>
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	4298      	cmp	r0, r3
 80067a0:	bfb8      	it	lt
 80067a2:	4618      	movlt	r0, r3
 80067a4:	e7a4      	b.n	80066f0 <_printf_i+0x168>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4632      	mov	r2, r6
 80067aa:	4649      	mov	r1, r9
 80067ac:	4640      	mov	r0, r8
 80067ae:	47d0      	blx	sl
 80067b0:	3001      	adds	r0, #1
 80067b2:	d09b      	beq.n	80066ec <_printf_i+0x164>
 80067b4:	3501      	adds	r5, #1
 80067b6:	68e3      	ldr	r3, [r4, #12]
 80067b8:	9903      	ldr	r1, [sp, #12]
 80067ba:	1a5b      	subs	r3, r3, r1
 80067bc:	42ab      	cmp	r3, r5
 80067be:	dcf2      	bgt.n	80067a6 <_printf_i+0x21e>
 80067c0:	e7eb      	b.n	800679a <_printf_i+0x212>
 80067c2:	2500      	movs	r5, #0
 80067c4:	f104 0619 	add.w	r6, r4, #25
 80067c8:	e7f5      	b.n	80067b6 <_printf_i+0x22e>
 80067ca:	bf00      	nop
 80067cc:	0800700d 	.word	0x0800700d
 80067d0:	0800701e 	.word	0x0800701e

080067d4 <_sbrk_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d06      	ldr	r5, [pc, #24]	; (80067f0 <_sbrk_r+0x1c>)
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	602b      	str	r3, [r5, #0]
 80067e0:	f7fa f9b0 	bl	8000b44 <_sbrk>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_sbrk_r+0x1a>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_sbrk_r+0x1a>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	200001c0 	.word	0x200001c0

080067f4 <__sread>:
 80067f4:	b510      	push	{r4, lr}
 80067f6:	460c      	mov	r4, r1
 80067f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fc:	f000 fab2 	bl	8006d64 <_read_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	bfab      	itete	ge
 8006804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006806:	89a3      	ldrhlt	r3, [r4, #12]
 8006808:	181b      	addge	r3, r3, r0
 800680a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800680e:	bfac      	ite	ge
 8006810:	6563      	strge	r3, [r4, #84]	; 0x54
 8006812:	81a3      	strhlt	r3, [r4, #12]
 8006814:	bd10      	pop	{r4, pc}

08006816 <__swrite>:
 8006816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800681a:	461f      	mov	r7, r3
 800681c:	898b      	ldrh	r3, [r1, #12]
 800681e:	05db      	lsls	r3, r3, #23
 8006820:	4605      	mov	r5, r0
 8006822:	460c      	mov	r4, r1
 8006824:	4616      	mov	r6, r2
 8006826:	d505      	bpl.n	8006834 <__swrite+0x1e>
 8006828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682c:	2302      	movs	r3, #2
 800682e:	2200      	movs	r2, #0
 8006830:	f000 f9c8 	bl	8006bc4 <_lseek_r>
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800683a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	4632      	mov	r2, r6
 8006842:	463b      	mov	r3, r7
 8006844:	4628      	mov	r0, r5
 8006846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800684a:	f000 b869 	b.w	8006920 <_write_r>

0800684e <__sseek>:
 800684e:	b510      	push	{r4, lr}
 8006850:	460c      	mov	r4, r1
 8006852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006856:	f000 f9b5 	bl	8006bc4 <_lseek_r>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	bf15      	itete	ne
 8006860:	6560      	strne	r0, [r4, #84]	; 0x54
 8006862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800686a:	81a3      	strheq	r3, [r4, #12]
 800686c:	bf18      	it	ne
 800686e:	81a3      	strhne	r3, [r4, #12]
 8006870:	bd10      	pop	{r4, pc}

08006872 <__sclose>:
 8006872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006876:	f000 b8d3 	b.w	8006a20 <_close_r>
	...

0800687c <__swbuf_r>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	460e      	mov	r6, r1
 8006880:	4614      	mov	r4, r2
 8006882:	4605      	mov	r5, r0
 8006884:	b118      	cbz	r0, 800688e <__swbuf_r+0x12>
 8006886:	6983      	ldr	r3, [r0, #24]
 8006888:	b90b      	cbnz	r3, 800688e <__swbuf_r+0x12>
 800688a:	f7ff fb81 	bl	8005f90 <__sinit>
 800688e:	4b21      	ldr	r3, [pc, #132]	; (8006914 <__swbuf_r+0x98>)
 8006890:	429c      	cmp	r4, r3
 8006892:	d12b      	bne.n	80068ec <__swbuf_r+0x70>
 8006894:	686c      	ldr	r4, [r5, #4]
 8006896:	69a3      	ldr	r3, [r4, #24]
 8006898:	60a3      	str	r3, [r4, #8]
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	071a      	lsls	r2, r3, #28
 800689e:	d52f      	bpl.n	8006900 <__swbuf_r+0x84>
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	b36b      	cbz	r3, 8006900 <__swbuf_r+0x84>
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1ac0      	subs	r0, r0, r3
 80068aa:	6963      	ldr	r3, [r4, #20]
 80068ac:	b2f6      	uxtb	r6, r6
 80068ae:	4283      	cmp	r3, r0
 80068b0:	4637      	mov	r7, r6
 80068b2:	dc04      	bgt.n	80068be <__swbuf_r+0x42>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f948 	bl	8006b4c <_fflush_r>
 80068bc:	bb30      	cbnz	r0, 800690c <__swbuf_r+0x90>
 80068be:	68a3      	ldr	r3, [r4, #8]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	6022      	str	r2, [r4, #0]
 80068ca:	701e      	strb	r6, [r3, #0]
 80068cc:	6963      	ldr	r3, [r4, #20]
 80068ce:	3001      	adds	r0, #1
 80068d0:	4283      	cmp	r3, r0
 80068d2:	d004      	beq.n	80068de <__swbuf_r+0x62>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	07db      	lsls	r3, r3, #31
 80068d8:	d506      	bpl.n	80068e8 <__swbuf_r+0x6c>
 80068da:	2e0a      	cmp	r6, #10
 80068dc:	d104      	bne.n	80068e8 <__swbuf_r+0x6c>
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f000 f933 	bl	8006b4c <_fflush_r>
 80068e6:	b988      	cbnz	r0, 800690c <__swbuf_r+0x90>
 80068e8:	4638      	mov	r0, r7
 80068ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ec:	4b0a      	ldr	r3, [pc, #40]	; (8006918 <__swbuf_r+0x9c>)
 80068ee:	429c      	cmp	r4, r3
 80068f0:	d101      	bne.n	80068f6 <__swbuf_r+0x7a>
 80068f2:	68ac      	ldr	r4, [r5, #8]
 80068f4:	e7cf      	b.n	8006896 <__swbuf_r+0x1a>
 80068f6:	4b09      	ldr	r3, [pc, #36]	; (800691c <__swbuf_r+0xa0>)
 80068f8:	429c      	cmp	r4, r3
 80068fa:	bf08      	it	eq
 80068fc:	68ec      	ldreq	r4, [r5, #12]
 80068fe:	e7ca      	b.n	8006896 <__swbuf_r+0x1a>
 8006900:	4621      	mov	r1, r4
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f81e 	bl	8006944 <__swsetup_r>
 8006908:	2800      	cmp	r0, #0
 800690a:	d0cb      	beq.n	80068a4 <__swbuf_r+0x28>
 800690c:	f04f 37ff 	mov.w	r7, #4294967295
 8006910:	e7ea      	b.n	80068e8 <__swbuf_r+0x6c>
 8006912:	bf00      	nop
 8006914:	08006fbc 	.word	0x08006fbc
 8006918:	08006fdc 	.word	0x08006fdc
 800691c:	08006f9c 	.word	0x08006f9c

08006920 <_write_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d07      	ldr	r5, [pc, #28]	; (8006940 <_write_r+0x20>)
 8006924:	4604      	mov	r4, r0
 8006926:	4608      	mov	r0, r1
 8006928:	4611      	mov	r1, r2
 800692a:	2200      	movs	r2, #0
 800692c:	602a      	str	r2, [r5, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	f7fa f8b7 	bl	8000aa2 <_write>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_write_r+0x1e>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_write_r+0x1e>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	200001c0 	.word	0x200001c0

08006944 <__swsetup_r>:
 8006944:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <__swsetup_r+0xcc>)
 8006946:	b570      	push	{r4, r5, r6, lr}
 8006948:	681d      	ldr	r5, [r3, #0]
 800694a:	4606      	mov	r6, r0
 800694c:	460c      	mov	r4, r1
 800694e:	b125      	cbz	r5, 800695a <__swsetup_r+0x16>
 8006950:	69ab      	ldr	r3, [r5, #24]
 8006952:	b913      	cbnz	r3, 800695a <__swsetup_r+0x16>
 8006954:	4628      	mov	r0, r5
 8006956:	f7ff fb1b 	bl	8005f90 <__sinit>
 800695a:	4b2e      	ldr	r3, [pc, #184]	; (8006a14 <__swsetup_r+0xd0>)
 800695c:	429c      	cmp	r4, r3
 800695e:	d10f      	bne.n	8006980 <__swsetup_r+0x3c>
 8006960:	686c      	ldr	r4, [r5, #4]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006968:	0719      	lsls	r1, r3, #28
 800696a:	d42c      	bmi.n	80069c6 <__swsetup_r+0x82>
 800696c:	06dd      	lsls	r5, r3, #27
 800696e:	d411      	bmi.n	8006994 <__swsetup_r+0x50>
 8006970:	2309      	movs	r3, #9
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	f04f 30ff 	mov.w	r0, #4294967295
 800697e:	e03e      	b.n	80069fe <__swsetup_r+0xba>
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <__swsetup_r+0xd4>)
 8006982:	429c      	cmp	r4, r3
 8006984:	d101      	bne.n	800698a <__swsetup_r+0x46>
 8006986:	68ac      	ldr	r4, [r5, #8]
 8006988:	e7eb      	b.n	8006962 <__swsetup_r+0x1e>
 800698a:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <__swsetup_r+0xd8>)
 800698c:	429c      	cmp	r4, r3
 800698e:	bf08      	it	eq
 8006990:	68ec      	ldreq	r4, [r5, #12]
 8006992:	e7e6      	b.n	8006962 <__swsetup_r+0x1e>
 8006994:	0758      	lsls	r0, r3, #29
 8006996:	d512      	bpl.n	80069be <__swsetup_r+0x7a>
 8006998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699a:	b141      	cbz	r1, 80069ae <__swsetup_r+0x6a>
 800699c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d002      	beq.n	80069aa <__swsetup_r+0x66>
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 f991 	bl	8006ccc <_free_r>
 80069aa:	2300      	movs	r3, #0
 80069ac:	6363      	str	r3, [r4, #52]	; 0x34
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	2300      	movs	r3, #0
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f043 0308 	orr.w	r3, r3, #8
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	b94b      	cbnz	r3, 80069de <__swsetup_r+0x9a>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d4:	d003      	beq.n	80069de <__swsetup_r+0x9a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4630      	mov	r0, r6
 80069da:	f000 f92b 	bl	8006c34 <__smakebuf_r>
 80069de:	89a0      	ldrh	r0, [r4, #12]
 80069e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069e4:	f010 0301 	ands.w	r3, r0, #1
 80069e8:	d00a      	beq.n	8006a00 <__swsetup_r+0xbc>
 80069ea:	2300      	movs	r3, #0
 80069ec:	60a3      	str	r3, [r4, #8]
 80069ee:	6963      	ldr	r3, [r4, #20]
 80069f0:	425b      	negs	r3, r3
 80069f2:	61a3      	str	r3, [r4, #24]
 80069f4:	6923      	ldr	r3, [r4, #16]
 80069f6:	b943      	cbnz	r3, 8006a0a <__swsetup_r+0xc6>
 80069f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069fc:	d1ba      	bne.n	8006974 <__swsetup_r+0x30>
 80069fe:	bd70      	pop	{r4, r5, r6, pc}
 8006a00:	0781      	lsls	r1, r0, #30
 8006a02:	bf58      	it	pl
 8006a04:	6963      	ldrpl	r3, [r4, #20]
 8006a06:	60a3      	str	r3, [r4, #8]
 8006a08:	e7f4      	b.n	80069f4 <__swsetup_r+0xb0>
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	e7f7      	b.n	80069fe <__swsetup_r+0xba>
 8006a0e:	bf00      	nop
 8006a10:	2000000c 	.word	0x2000000c
 8006a14:	08006fbc 	.word	0x08006fbc
 8006a18:	08006fdc 	.word	0x08006fdc
 8006a1c:	08006f9c 	.word	0x08006f9c

08006a20 <_close_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4d06      	ldr	r5, [pc, #24]	; (8006a3c <_close_r+0x1c>)
 8006a24:	2300      	movs	r3, #0
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	602b      	str	r3, [r5, #0]
 8006a2c:	f7fa f855 	bl	8000ada <_close>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_close_r+0x1a>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_close_r+0x1a>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	200001c0 	.word	0x200001c0

08006a40 <__sflush_r>:
 8006a40:	898a      	ldrh	r2, [r1, #12]
 8006a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a46:	4605      	mov	r5, r0
 8006a48:	0710      	lsls	r0, r2, #28
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	d458      	bmi.n	8006b00 <__sflush_r+0xc0>
 8006a4e:	684b      	ldr	r3, [r1, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	dc05      	bgt.n	8006a60 <__sflush_r+0x20>
 8006a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	dc02      	bgt.n	8006a60 <__sflush_r+0x20>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	d0f9      	beq.n	8006a5a <__sflush_r+0x1a>
 8006a66:	2300      	movs	r3, #0
 8006a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a6c:	682f      	ldr	r7, [r5, #0]
 8006a6e:	602b      	str	r3, [r5, #0]
 8006a70:	d032      	beq.n	8006ad8 <__sflush_r+0x98>
 8006a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	075a      	lsls	r2, r3, #29
 8006a78:	d505      	bpl.n	8006a86 <__sflush_r+0x46>
 8006a7a:	6863      	ldr	r3, [r4, #4]
 8006a7c:	1ac0      	subs	r0, r0, r3
 8006a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a80:	b10b      	cbz	r3, 8006a86 <__sflush_r+0x46>
 8006a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a84:	1ac0      	subs	r0, r0, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a8c:	6a21      	ldr	r1, [r4, #32]
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b0      	blx	r6
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	d106      	bne.n	8006aa6 <__sflush_r+0x66>
 8006a98:	6829      	ldr	r1, [r5, #0]
 8006a9a:	291d      	cmp	r1, #29
 8006a9c:	d82c      	bhi.n	8006af8 <__sflush_r+0xb8>
 8006a9e:	4a2a      	ldr	r2, [pc, #168]	; (8006b48 <__sflush_r+0x108>)
 8006aa0:	40ca      	lsrs	r2, r1
 8006aa2:	07d6      	lsls	r6, r2, #31
 8006aa4:	d528      	bpl.n	8006af8 <__sflush_r+0xb8>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	6062      	str	r2, [r4, #4]
 8006aaa:	04d9      	lsls	r1, r3, #19
 8006aac:	6922      	ldr	r2, [r4, #16]
 8006aae:	6022      	str	r2, [r4, #0]
 8006ab0:	d504      	bpl.n	8006abc <__sflush_r+0x7c>
 8006ab2:	1c42      	adds	r2, r0, #1
 8006ab4:	d101      	bne.n	8006aba <__sflush_r+0x7a>
 8006ab6:	682b      	ldr	r3, [r5, #0]
 8006ab8:	b903      	cbnz	r3, 8006abc <__sflush_r+0x7c>
 8006aba:	6560      	str	r0, [r4, #84]	; 0x54
 8006abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006abe:	602f      	str	r7, [r5, #0]
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d0ca      	beq.n	8006a5a <__sflush_r+0x1a>
 8006ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ac8:	4299      	cmp	r1, r3
 8006aca:	d002      	beq.n	8006ad2 <__sflush_r+0x92>
 8006acc:	4628      	mov	r0, r5
 8006ace:	f000 f8fd 	bl	8006ccc <_free_r>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ad6:	e7c1      	b.n	8006a5c <__sflush_r+0x1c>
 8006ad8:	6a21      	ldr	r1, [r4, #32]
 8006ada:	2301      	movs	r3, #1
 8006adc:	4628      	mov	r0, r5
 8006ade:	47b0      	blx	r6
 8006ae0:	1c41      	adds	r1, r0, #1
 8006ae2:	d1c7      	bne.n	8006a74 <__sflush_r+0x34>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0c4      	beq.n	8006a74 <__sflush_r+0x34>
 8006aea:	2b1d      	cmp	r3, #29
 8006aec:	d001      	beq.n	8006af2 <__sflush_r+0xb2>
 8006aee:	2b16      	cmp	r3, #22
 8006af0:	d101      	bne.n	8006af6 <__sflush_r+0xb6>
 8006af2:	602f      	str	r7, [r5, #0]
 8006af4:	e7b1      	b.n	8006a5a <__sflush_r+0x1a>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	e7ad      	b.n	8006a5c <__sflush_r+0x1c>
 8006b00:	690f      	ldr	r7, [r1, #16]
 8006b02:	2f00      	cmp	r7, #0
 8006b04:	d0a9      	beq.n	8006a5a <__sflush_r+0x1a>
 8006b06:	0793      	lsls	r3, r2, #30
 8006b08:	680e      	ldr	r6, [r1, #0]
 8006b0a:	bf08      	it	eq
 8006b0c:	694b      	ldreq	r3, [r1, #20]
 8006b0e:	600f      	str	r7, [r1, #0]
 8006b10:	bf18      	it	ne
 8006b12:	2300      	movne	r3, #0
 8006b14:	eba6 0807 	sub.w	r8, r6, r7
 8006b18:	608b      	str	r3, [r1, #8]
 8006b1a:	f1b8 0f00 	cmp.w	r8, #0
 8006b1e:	dd9c      	ble.n	8006a5a <__sflush_r+0x1a>
 8006b20:	6a21      	ldr	r1, [r4, #32]
 8006b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b24:	4643      	mov	r3, r8
 8006b26:	463a      	mov	r2, r7
 8006b28:	4628      	mov	r0, r5
 8006b2a:	47b0      	blx	r6
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	dc06      	bgt.n	8006b3e <__sflush_r+0xfe>
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e78e      	b.n	8006a5c <__sflush_r+0x1c>
 8006b3e:	4407      	add	r7, r0
 8006b40:	eba8 0800 	sub.w	r8, r8, r0
 8006b44:	e7e9      	b.n	8006b1a <__sflush_r+0xda>
 8006b46:	bf00      	nop
 8006b48:	20400001 	.word	0x20400001

08006b4c <_fflush_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	690b      	ldr	r3, [r1, #16]
 8006b50:	4605      	mov	r5, r0
 8006b52:	460c      	mov	r4, r1
 8006b54:	b913      	cbnz	r3, 8006b5c <_fflush_r+0x10>
 8006b56:	2500      	movs	r5, #0
 8006b58:	4628      	mov	r0, r5
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	b118      	cbz	r0, 8006b66 <_fflush_r+0x1a>
 8006b5e:	6983      	ldr	r3, [r0, #24]
 8006b60:	b90b      	cbnz	r3, 8006b66 <_fflush_r+0x1a>
 8006b62:	f7ff fa15 	bl	8005f90 <__sinit>
 8006b66:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <_fflush_r+0x6c>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	d11b      	bne.n	8006ba4 <_fflush_r+0x58>
 8006b6c:	686c      	ldr	r4, [r5, #4]
 8006b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0ef      	beq.n	8006b56 <_fflush_r+0xa>
 8006b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b78:	07d0      	lsls	r0, r2, #31
 8006b7a:	d404      	bmi.n	8006b86 <_fflush_r+0x3a>
 8006b7c:	0599      	lsls	r1, r3, #22
 8006b7e:	d402      	bmi.n	8006b86 <_fflush_r+0x3a>
 8006b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b82:	f7ff faa3 	bl	80060cc <__retarget_lock_acquire_recursive>
 8006b86:	4628      	mov	r0, r5
 8006b88:	4621      	mov	r1, r4
 8006b8a:	f7ff ff59 	bl	8006a40 <__sflush_r>
 8006b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b90:	07da      	lsls	r2, r3, #31
 8006b92:	4605      	mov	r5, r0
 8006b94:	d4e0      	bmi.n	8006b58 <_fflush_r+0xc>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	059b      	lsls	r3, r3, #22
 8006b9a:	d4dd      	bmi.n	8006b58 <_fflush_r+0xc>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9e:	f7ff fa96 	bl	80060ce <__retarget_lock_release_recursive>
 8006ba2:	e7d9      	b.n	8006b58 <_fflush_r+0xc>
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <_fflush_r+0x70>)
 8006ba6:	429c      	cmp	r4, r3
 8006ba8:	d101      	bne.n	8006bae <_fflush_r+0x62>
 8006baa:	68ac      	ldr	r4, [r5, #8]
 8006bac:	e7df      	b.n	8006b6e <_fflush_r+0x22>
 8006bae:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <_fflush_r+0x74>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	bf08      	it	eq
 8006bb4:	68ec      	ldreq	r4, [r5, #12]
 8006bb6:	e7da      	b.n	8006b6e <_fflush_r+0x22>
 8006bb8:	08006fbc 	.word	0x08006fbc
 8006bbc:	08006fdc 	.word	0x08006fdc
 8006bc0:	08006f9c 	.word	0x08006f9c

08006bc4 <_lseek_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4d07      	ldr	r5, [pc, #28]	; (8006be4 <_lseek_r+0x20>)
 8006bc8:	4604      	mov	r4, r0
 8006bca:	4608      	mov	r0, r1
 8006bcc:	4611      	mov	r1, r2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	602a      	str	r2, [r5, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f7f9 ffa8 	bl	8000b28 <_lseek>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_lseek_r+0x1e>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_lseek_r+0x1e>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	200001c0 	.word	0x200001c0

08006be8 <__swhatbuf_r>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	460e      	mov	r6, r1
 8006bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf0:	2900      	cmp	r1, #0
 8006bf2:	b096      	sub	sp, #88	; 0x58
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	461d      	mov	r5, r3
 8006bf8:	da08      	bge.n	8006c0c <__swhatbuf_r+0x24>
 8006bfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	602a      	str	r2, [r5, #0]
 8006c02:	061a      	lsls	r2, r3, #24
 8006c04:	d410      	bmi.n	8006c28 <__swhatbuf_r+0x40>
 8006c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c0a:	e00e      	b.n	8006c2a <__swhatbuf_r+0x42>
 8006c0c:	466a      	mov	r2, sp
 8006c0e:	f000 f8bb 	bl	8006d88 <_fstat_r>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	dbf1      	blt.n	8006bfa <__swhatbuf_r+0x12>
 8006c16:	9a01      	ldr	r2, [sp, #4]
 8006c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c20:	425a      	negs	r2, r3
 8006c22:	415a      	adcs	r2, r3
 8006c24:	602a      	str	r2, [r5, #0]
 8006c26:	e7ee      	b.n	8006c06 <__swhatbuf_r+0x1e>
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	b016      	add	sp, #88	; 0x58
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c34 <__smakebuf_r>:
 8006c34:	898b      	ldrh	r3, [r1, #12]
 8006c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c38:	079d      	lsls	r5, r3, #30
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	d507      	bpl.n	8006c50 <__smakebuf_r+0x1c>
 8006c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	6163      	str	r3, [r4, #20]
 8006c4c:	b002      	add	sp, #8
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	ab01      	add	r3, sp, #4
 8006c52:	466a      	mov	r2, sp
 8006c54:	f7ff ffc8 	bl	8006be8 <__swhatbuf_r>
 8006c58:	9900      	ldr	r1, [sp, #0]
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff fa57 	bl	8006110 <_malloc_r>
 8006c62:	b948      	cbnz	r0, 8006c78 <__smakebuf_r+0x44>
 8006c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c68:	059a      	lsls	r2, r3, #22
 8006c6a:	d4ef      	bmi.n	8006c4c <__smakebuf_r+0x18>
 8006c6c:	f023 0303 	bic.w	r3, r3, #3
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	e7e3      	b.n	8006c40 <__smakebuf_r+0xc>
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <__smakebuf_r+0x7c>)
 8006c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	6020      	str	r0, [r4, #0]
 8006c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	9b00      	ldr	r3, [sp, #0]
 8006c88:	6163      	str	r3, [r4, #20]
 8006c8a:	9b01      	ldr	r3, [sp, #4]
 8006c8c:	6120      	str	r0, [r4, #16]
 8006c8e:	b15b      	cbz	r3, 8006ca8 <__smakebuf_r+0x74>
 8006c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c94:	4630      	mov	r0, r6
 8006c96:	f000 f889 	bl	8006dac <_isatty_r>
 8006c9a:	b128      	cbz	r0, 8006ca8 <__smakebuf_r+0x74>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	81a3      	strh	r3, [r4, #12]
 8006ca8:	89a0      	ldrh	r0, [r4, #12]
 8006caa:	4305      	orrs	r5, r0
 8006cac:	81a5      	strh	r5, [r4, #12]
 8006cae:	e7cd      	b.n	8006c4c <__smakebuf_r+0x18>
 8006cb0:	08005f29 	.word	0x08005f29

08006cb4 <__malloc_lock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__malloc_lock+0x8>)
 8006cb6:	f7ff ba09 	b.w	80060cc <__retarget_lock_acquire_recursive>
 8006cba:	bf00      	nop
 8006cbc:	200001b4 	.word	0x200001b4

08006cc0 <__malloc_unlock>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	; (8006cc8 <__malloc_unlock+0x8>)
 8006cc2:	f7ff ba04 	b.w	80060ce <__retarget_lock_release_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	200001b4 	.word	0x200001b4

08006ccc <_free_r>:
 8006ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	d044      	beq.n	8006d5c <_free_r+0x90>
 8006cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd6:	9001      	str	r0, [sp, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f1a1 0404 	sub.w	r4, r1, #4
 8006cde:	bfb8      	it	lt
 8006ce0:	18e4      	addlt	r4, r4, r3
 8006ce2:	f7ff ffe7 	bl	8006cb4 <__malloc_lock>
 8006ce6:	4a1e      	ldr	r2, [pc, #120]	; (8006d60 <_free_r+0x94>)
 8006ce8:	9801      	ldr	r0, [sp, #4]
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	b933      	cbnz	r3, 8006cfc <_free_r+0x30>
 8006cee:	6063      	str	r3, [r4, #4]
 8006cf0:	6014      	str	r4, [r2, #0]
 8006cf2:	b003      	add	sp, #12
 8006cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cf8:	f7ff bfe2 	b.w	8006cc0 <__malloc_unlock>
 8006cfc:	42a3      	cmp	r3, r4
 8006cfe:	d908      	bls.n	8006d12 <_free_r+0x46>
 8006d00:	6825      	ldr	r5, [r4, #0]
 8006d02:	1961      	adds	r1, r4, r5
 8006d04:	428b      	cmp	r3, r1
 8006d06:	bf01      	itttt	eq
 8006d08:	6819      	ldreq	r1, [r3, #0]
 8006d0a:	685b      	ldreq	r3, [r3, #4]
 8006d0c:	1949      	addeq	r1, r1, r5
 8006d0e:	6021      	streq	r1, [r4, #0]
 8006d10:	e7ed      	b.n	8006cee <_free_r+0x22>
 8006d12:	461a      	mov	r2, r3
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	b10b      	cbz	r3, 8006d1c <_free_r+0x50>
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	d9fa      	bls.n	8006d12 <_free_r+0x46>
 8006d1c:	6811      	ldr	r1, [r2, #0]
 8006d1e:	1855      	adds	r5, r2, r1
 8006d20:	42a5      	cmp	r5, r4
 8006d22:	d10b      	bne.n	8006d3c <_free_r+0x70>
 8006d24:	6824      	ldr	r4, [r4, #0]
 8006d26:	4421      	add	r1, r4
 8006d28:	1854      	adds	r4, r2, r1
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	6011      	str	r1, [r2, #0]
 8006d2e:	d1e0      	bne.n	8006cf2 <_free_r+0x26>
 8006d30:	681c      	ldr	r4, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	6053      	str	r3, [r2, #4]
 8006d36:	4421      	add	r1, r4
 8006d38:	6011      	str	r1, [r2, #0]
 8006d3a:	e7da      	b.n	8006cf2 <_free_r+0x26>
 8006d3c:	d902      	bls.n	8006d44 <_free_r+0x78>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	e7d6      	b.n	8006cf2 <_free_r+0x26>
 8006d44:	6825      	ldr	r5, [r4, #0]
 8006d46:	1961      	adds	r1, r4, r5
 8006d48:	428b      	cmp	r3, r1
 8006d4a:	bf04      	itt	eq
 8006d4c:	6819      	ldreq	r1, [r3, #0]
 8006d4e:	685b      	ldreq	r3, [r3, #4]
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	bf04      	itt	eq
 8006d54:	1949      	addeq	r1, r1, r5
 8006d56:	6021      	streq	r1, [r4, #0]
 8006d58:	6054      	str	r4, [r2, #4]
 8006d5a:	e7ca      	b.n	8006cf2 <_free_r+0x26>
 8006d5c:	b003      	add	sp, #12
 8006d5e:	bd30      	pop	{r4, r5, pc}
 8006d60:	200001b8 	.word	0x200001b8

08006d64 <_read_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d07      	ldr	r5, [pc, #28]	; (8006d84 <_read_r+0x20>)
 8006d68:	4604      	mov	r4, r0
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	602a      	str	r2, [r5, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	f7f9 fe78 	bl	8000a68 <_read>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_read_r+0x1e>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_read_r+0x1e>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	200001c0 	.word	0x200001c0

08006d88 <_fstat_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4d07      	ldr	r5, [pc, #28]	; (8006da8 <_fstat_r+0x20>)
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4608      	mov	r0, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	f7f9 feac 	bl	8000af2 <_fstat>
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	d102      	bne.n	8006da4 <_fstat_r+0x1c>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	b103      	cbz	r3, 8006da4 <_fstat_r+0x1c>
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	bd38      	pop	{r3, r4, r5, pc}
 8006da6:	bf00      	nop
 8006da8:	200001c0 	.word	0x200001c0

08006dac <_isatty_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	; (8006dc8 <_isatty_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7f9 feab 	bl	8000b12 <_isatty>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_isatty_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_isatty_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	200001c0 	.word	0x200001c0

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
