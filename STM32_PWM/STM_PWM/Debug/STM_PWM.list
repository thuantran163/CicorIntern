
STM_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002648  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b8  080028b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028c0  080028c0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080028c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000078  08002940  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002940  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000306b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d16  00000000  00000000  00023113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  00023e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000328  00000000  00000000  000241e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148f9  00000000  00000000  00024508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000432d  00000000  00000000  00038e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b9d  00000000  00000000  0003d12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bdccb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001858  00000000  00000000  000bdd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080027d0 	.word	0x080027d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080027d0 	.word	0x080027d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_Init+0x40>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <HAL_Init+0x40>)
 800059e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_Init+0x40>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_Init+0x40>)
 80005aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_Init+0x40>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <HAL_Init+0x40>)
 80005b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005bc:	2003      	movs	r0, #3
 80005be:	f000 f90d 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f000 f808 	bl	80005d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c8:	f000 fddc 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023c00 	.word	0x40023c00

080005d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x54>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <HAL_InitTick+0x58>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f917 	bl	800082a <HAL_SYSTICK_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e00e      	b.n	8000624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d80a      	bhi.n	8000622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	2200      	movs	r2, #0
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f8ed 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <HAL_InitTick+0x5c>)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000008 	.word	0x20000008
 8000630:	20000004 	.word	0x20000004
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x20>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_IncTick+0x24>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <HAL_IncTick+0x24>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004
 800065c:	20000094 	.word	0x20000094

08000660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <HAL_GetTick+0x14>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000094 	.word	0x20000094

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff8e 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff47 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5c 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff8e 	bl	8000730 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e267      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	2b00      	cmp	r3, #0
 8000860:	d075      	beq.n	800094e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000862:	4b88      	ldr	r3, [pc, #544]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	f003 030c 	and.w	r3, r3, #12
 800086a:	2b04      	cmp	r3, #4
 800086c:	d00c      	beq.n	8000888 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800086e:	4b85      	ldr	r3, [pc, #532]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000876:	2b08      	cmp	r3, #8
 8000878:	d112      	bne.n	80008a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800087a:	4b82      	ldr	r3, [pc, #520]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000886:	d10b      	bne.n	80008a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000888:	4b7e      	ldr	r3, [pc, #504]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000890:	2b00      	cmp	r3, #0
 8000892:	d05b      	beq.n	800094c <HAL_RCC_OscConfig+0x108>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d157      	bne.n	800094c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	e242      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a8:	d106      	bne.n	80008b8 <HAL_RCC_OscConfig+0x74>
 80008aa:	4b76      	ldr	r3, [pc, #472]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	e01d      	b.n	80008f4 <HAL_RCC_OscConfig+0xb0>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008c0:	d10c      	bne.n	80008dc <HAL_RCC_OscConfig+0x98>
 80008c2:	4b70      	ldr	r3, [pc, #448]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a6f      	ldr	r2, [pc, #444]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	4b6d      	ldr	r3, [pc, #436]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a6c      	ldr	r2, [pc, #432]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e00b      	b.n	80008f4 <HAL_RCC_OscConfig+0xb0>
 80008dc:	4b69      	ldr	r3, [pc, #420]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a68      	ldr	r2, [pc, #416]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b66      	ldr	r3, [pc, #408]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a65      	ldr	r2, [pc, #404]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80008ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d013      	beq.n	8000924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008fc:	f7ff feb0 	bl	8000660 <HAL_GetTick>
 8000900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	e008      	b.n	8000916 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000904:	f7ff feac 	bl	8000660 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	2b64      	cmp	r3, #100	; 0x64
 8000910:	d901      	bls.n	8000916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000912:	2303      	movs	r3, #3
 8000914:	e207      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000916:	4b5b      	ldr	r3, [pc, #364]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0f0      	beq.n	8000904 <HAL_RCC_OscConfig+0xc0>
 8000922:	e014      	b.n	800094e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000924:	f7ff fe9c 	bl	8000660 <HAL_GetTick>
 8000928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800092a:	e008      	b.n	800093e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092c:	f7ff fe98 	bl	8000660 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	2b64      	cmp	r3, #100	; 0x64
 8000938:	d901      	bls.n	800093e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e1f3      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800093e:	4b51      	ldr	r3, [pc, #324]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1f0      	bne.n	800092c <HAL_RCC_OscConfig+0xe8>
 800094a:	e000      	b.n	800094e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800094c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d063      	beq.n	8000a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800095a:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f003 030c 	and.w	r3, r3, #12
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00b      	beq.n	800097e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000966:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800096e:	2b08      	cmp	r3, #8
 8000970:	d11c      	bne.n	80009ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d116      	bne.n	80009ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097e:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d005      	beq.n	8000996 <HAL_RCC_OscConfig+0x152>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d001      	beq.n	8000996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e1c7      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	691b      	ldr	r3, [r3, #16]
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	4937      	ldr	r1, [pc, #220]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80009a6:	4313      	orrs	r3, r2
 80009a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009aa:	e03a      	b.n	8000a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d020      	beq.n	80009f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009b4:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <HAL_RCC_OscConfig+0x244>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009ba:	f7ff fe51 	bl	8000660 <HAL_GetTick>
 80009be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c0:	e008      	b.n	80009d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c2:	f7ff fe4d 	bl	8000660 <HAL_GetTick>
 80009c6:	4602      	mov	r2, r0
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d901      	bls.n	80009d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80009d0:	2303      	movs	r3, #3
 80009d2:	e1a8      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d4:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f0      	beq.n	80009c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	4925      	ldr	r1, [pc, #148]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 80009f0:	4313      	orrs	r3, r2
 80009f2:	600b      	str	r3, [r1, #0]
 80009f4:	e015      	b.n	8000a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009f6:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <HAL_RCC_OscConfig+0x244>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009fc:	f7ff fe30 	bl	8000660 <HAL_GetTick>
 8000a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a02:	e008      	b.n	8000a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a04:	f7ff fe2c 	bl	8000660 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d901      	bls.n	8000a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000a12:	2303      	movs	r3, #3
 8000a14:	e187      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f0      	bne.n	8000a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d036      	beq.n	8000a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d016      	beq.n	8000a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_RCC_OscConfig+0x248>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a3c:	f7ff fe10 	bl	8000660 <HAL_GetTick>
 8000a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a42:	e008      	b.n	8000a56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a44:	f7ff fe0c 	bl	8000660 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d901      	bls.n	8000a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000a52:	2303      	movs	r3, #3
 8000a54:	e167      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_RCC_OscConfig+0x240>)
 8000a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f0      	beq.n	8000a44 <HAL_RCC_OscConfig+0x200>
 8000a62:	e01b      	b.n	8000a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_RCC_OscConfig+0x248>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a6a:	f7ff fdf9 	bl	8000660 <HAL_GetTick>
 8000a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a70:	e00e      	b.n	8000a90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a72:	f7ff fdf5 	bl	8000660 <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d907      	bls.n	8000a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000a80:	2303      	movs	r3, #3
 8000a82:	e150      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
 8000a84:	40023800 	.word	0x40023800
 8000a88:	42470000 	.word	0x42470000
 8000a8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	4b88      	ldr	r3, [pc, #544]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1ea      	bne.n	8000a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f000 8097 	beq.w	8000bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aae:	4b81      	ldr	r3, [pc, #516]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b7d      	ldr	r3, [pc, #500]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a7c      	ldr	r2, [pc, #496]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b7a      	ldr	r3, [pc, #488]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ada:	4b77      	ldr	r3, [pc, #476]	; (8000cb8 <HAL_RCC_OscConfig+0x474>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d118      	bne.n	8000b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae6:	4b74      	ldr	r3, [pc, #464]	; (8000cb8 <HAL_RCC_OscConfig+0x474>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a73      	ldr	r2, [pc, #460]	; (8000cb8 <HAL_RCC_OscConfig+0x474>)
 8000aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000af2:	f7ff fdb5 	bl	8000660 <HAL_GetTick>
 8000af6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af8:	e008      	b.n	8000b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afa:	f7ff fdb1 	bl	8000660 <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d901      	bls.n	8000b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e10c      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b0c:	4b6a      	ldr	r3, [pc, #424]	; (8000cb8 <HAL_RCC_OscConfig+0x474>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f0      	beq.n	8000afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d106      	bne.n	8000b2e <HAL_RCC_OscConfig+0x2ea>
 8000b20:	4b64      	ldr	r3, [pc, #400]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b24:	4a63      	ldr	r2, [pc, #396]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8000b2c:	e01c      	b.n	8000b68 <HAL_RCC_OscConfig+0x324>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	2b05      	cmp	r3, #5
 8000b34:	d10c      	bne.n	8000b50 <HAL_RCC_OscConfig+0x30c>
 8000b36:	4b5f      	ldr	r3, [pc, #380]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b3a:	4a5e      	ldr	r2, [pc, #376]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6713      	str	r3, [r2, #112]	; 0x70
 8000b42:	4b5c      	ldr	r3, [pc, #368]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b46:	4a5b      	ldr	r2, [pc, #364]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8000b4e:	e00b      	b.n	8000b68 <HAL_RCC_OscConfig+0x324>
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b54:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b56:	f023 0301 	bic.w	r3, r3, #1
 8000b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8000b5c:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b60:	4a54      	ldr	r2, [pc, #336]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b62:	f023 0304 	bic.w	r3, r3, #4
 8000b66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d015      	beq.n	8000b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b70:	f7ff fd76 	bl	8000660 <HAL_GetTick>
 8000b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b76:	e00a      	b.n	8000b8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b78:	f7ff fd72 	bl	8000660 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e0cb      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b8e:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0ee      	beq.n	8000b78 <HAL_RCC_OscConfig+0x334>
 8000b9a:	e014      	b.n	8000bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b9c:	f7ff fd60 	bl	8000660 <HAL_GetTick>
 8000ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba2:	e00a      	b.n	8000bba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fd5c 	bl	8000660 <HAL_GetTick>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d901      	bls.n	8000bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e0b5      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bba:	4b3e      	ldr	r3, [pc, #248]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1ee      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d105      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bcc:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 80a1 	beq.w	8000d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d05c      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d141      	bne.n	8000c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <HAL_RCC_OscConfig+0x478>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fd30 	bl	8000660 <HAL_GetTick>
 8000c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c04:	f7ff fd2c 	bl	8000660 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e087      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f0      	bne.n	8000c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69da      	ldr	r2, [r3, #28]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	085b      	lsrs	r3, r3, #1
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	041b      	lsls	r3, r3, #16
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	061b      	lsls	r3, r3, #24
 8000c46:	491b      	ldr	r1, [pc, #108]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <HAL_RCC_OscConfig+0x478>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c52:	f7ff fd05 	bl	8000660 <HAL_GetTick>
 8000c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c5a:	f7ff fd01 	bl	8000660 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e05c      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f0      	beq.n	8000c5a <HAL_RCC_OscConfig+0x416>
 8000c78:	e054      	b.n	8000d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_RCC_OscConfig+0x478>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c80:	f7ff fcee 	bl	8000660 <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c88:	f7ff fcea 	bl	8000660 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e045      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_RCC_OscConfig+0x470>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f0      	bne.n	8000c88 <HAL_RCC_OscConfig+0x444>
 8000ca6:	e03d      	b.n	8000d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d107      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e038      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40007000 	.word	0x40007000
 8000cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_RCC_OscConfig+0x4ec>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d028      	beq.n	8000d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d121      	bne.n	8000d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d11a      	bne.n	8000d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d111      	bne.n	8000d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d06:	085b      	lsrs	r3, r3, #1
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d107      	bne.n	8000d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d001      	beq.n	8000d24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e0cc      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d48:	4b68      	ldr	r3, [pc, #416]	; (8000eec <HAL_RCC_ClockConfig+0x1b8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d90c      	bls.n	8000d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d56:	4b65      	ldr	r3, [pc, #404]	; (8000eec <HAL_RCC_ClockConfig+0x1b8>)
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d5e:	4b63      	ldr	r3, [pc, #396]	; (8000eec <HAL_RCC_ClockConfig+0x1b8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d001      	beq.n	8000d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e0b8      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d020      	beq.n	8000dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d005      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d88:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4a58      	ldr	r2, [pc, #352]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000d8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d005      	beq.n	8000dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000da0:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4a52      	ldr	r2, [pc, #328]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000da6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dac:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	494d      	ldr	r1, [pc, #308]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d044      	beq.n	8000e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d107      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd2:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d119      	bne.n	8000e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e07f      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d003      	beq.n	8000df2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d107      	bne.n	8000e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000df2:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e06f      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e02:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e067      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f023 0203 	bic.w	r2, r3, #3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4934      	ldr	r1, [pc, #208]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e24:	f7ff fc1c 	bl	8000660 <HAL_GetTick>
 8000e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e2a:	e00a      	b.n	8000e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e2c:	f7ff fc18 	bl	8000660 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e04f      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 020c 	and.w	r2, r3, #12
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d1eb      	bne.n	8000e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HAL_RCC_ClockConfig+0x1b8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d20c      	bcs.n	8000e7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_RCC_ClockConfig+0x1b8>)
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_RCC_ClockConfig+0x1b8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d001      	beq.n	8000e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e032      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d008      	beq.n	8000e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4916      	ldr	r1, [pc, #88]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000eba:	f000 f821 	bl	8000f00 <HAL_RCC_GetSysClockFreq>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8000ecc:	5ccb      	ldrb	r3, [r1, r3]
 8000ece:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed2:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_RCC_ClockConfig+0x1c8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fb7c 	bl	80005d8 <HAL_InitTick>

  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	080027f4 	.word	0x080027f4
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000000 	.word	0x20000000

08000f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f04:	b090      	sub	sp, #64	; 0x40
 8000f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f18:	4b59      	ldr	r3, [pc, #356]	; (8001080 <HAL_RCC_GetSysClockFreq+0x180>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d00d      	beq.n	8000f40 <HAL_RCC_GetSysClockFreq+0x40>
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	f200 80a1 	bhi.w	800106c <HAL_RCC_GetSysClockFreq+0x16c>
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_RCC_GetSysClockFreq+0x34>
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d003      	beq.n	8000f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8000f32:	e09b      	b.n	800106c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f34:	4b53      	ldr	r3, [pc, #332]	; (8001084 <HAL_RCC_GetSysClockFreq+0x184>)
 8000f36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8000f38:	e09b      	b.n	8001072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f3a:	4b53      	ldr	r3, [pc, #332]	; (8001088 <HAL_RCC_GetSysClockFreq+0x188>)
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8000f3e:	e098      	b.n	8001072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <HAL_RCC_GetSysClockFreq+0x180>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <HAL_RCC_GetSysClockFreq+0x180>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d028      	beq.n	8000fa8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f56:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <HAL_RCC_GetSysClockFreq+0x180>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	099b      	lsrs	r3, r3, #6
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	627a      	str	r2, [r7, #36]	; 0x24
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4b47      	ldr	r3, [pc, #284]	; (8001088 <HAL_RCC_GetSysClockFreq+0x188>)
 8000f6c:	fb03 f201 	mul.w	r2, r3, r1
 8000f70:	2300      	movs	r3, #0
 8000f72:	fb00 f303 	mul.w	r3, r0, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	4a43      	ldr	r2, [pc, #268]	; (8001088 <HAL_RCC_GetSysClockFreq+0x188>)
 8000f7a:	fba0 1202 	umull	r1, r2, r0, r2
 8000f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f80:	460a      	mov	r2, r1
 8000f82:	62ba      	str	r2, [r7, #40]	; 0x28
 8000f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f86:	4413      	add	r3, r2
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	61fa      	str	r2, [r7, #28]
 8000f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f9a:	f7ff f979 	bl	8000290 <__aeabi_uldivmod>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fa6:	e053      	b.n	8001050 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa8:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_RCC_GetSysClockFreq+0x180>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	099b      	lsrs	r3, r3, #6
 8000fae:	2200      	movs	r2, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	617a      	str	r2, [r7, #20]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8000fba:	f04f 0b00 	mov.w	fp, #0
 8000fbe:	4652      	mov	r2, sl
 8000fc0:	465b      	mov	r3, fp
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	f04f 0100 	mov.w	r1, #0
 8000fca:	0159      	lsls	r1, r3, #5
 8000fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000fd0:	0150      	lsls	r0, r2, #5
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	ebb2 080a 	subs.w	r8, r2, sl
 8000fda:	eb63 090b 	sbc.w	r9, r3, fp
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000fea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000fee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000ff2:	ebb2 0408 	subs.w	r4, r2, r8
 8000ff6:	eb63 0509 	sbc.w	r5, r3, r9
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	00eb      	lsls	r3, r5, #3
 8001004:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001008:	00e2      	lsls	r2, r4, #3
 800100a:	4614      	mov	r4, r2
 800100c:	461d      	mov	r5, r3
 800100e:	eb14 030a 	adds.w	r3, r4, sl
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	eb45 030b 	adc.w	r3, r5, fp
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001026:	4629      	mov	r1, r5
 8001028:	028b      	lsls	r3, r1, #10
 800102a:	4621      	mov	r1, r4
 800102c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001030:	4621      	mov	r1, r4
 8001032:	028a      	lsls	r2, r1, #10
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103a:	2200      	movs	r2, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	60fa      	str	r2, [r7, #12]
 8001040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001044:	f7ff f924 	bl	8000290 <__aeabi_uldivmod>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4613      	mov	r3, r2
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_RCC_GetSysClockFreq+0x180>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	3301      	adds	r3, #1
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800106a:	e002      	b.n	8001072 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_RCC_GetSysClockFreq+0x184>)
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001074:	4618      	mov	r0, r3
 8001076:	3740      	adds	r7, #64	; 0x40
 8001078:	46bd      	mov	sp, r7
 800107a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	00f42400 	.word	0x00f42400
 8001088:	017d7840 	.word	0x017d7840

0800108c <main>:
extern void initialise_monitor_handles(void);

void SystemClock_Config(void);

int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  initialise_monitor_handles();
 8001090:	f001 fb22 	bl	80026d8 <initialise_monitor_handles>

  HAL_Init();
 8001094:	f7ff fa7e 	bl	8000594 <HAL_Init>
  SystemClock_Config();
 8001098:	f000 f806 	bl	80010a8 <SystemClock_Config>

  while (1)
  {
	  printf("HelloWorld");
 800109c:	4801      	ldr	r0, [pc, #4]	; (80010a4 <main+0x18>)
 800109e:	f000 f967 	bl	8001370 <iprintf>
  {
 80010a2:	e7fb      	b.n	800109c <main+0x10>
 80010a4:	080027e8 	.word	0x080027e8

080010a8 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	; 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f952 	bl	8001360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <SystemClock_Config+0xc8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <SystemClock_Config+0xc8>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	; 0x40
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <SystemClock_Config+0xc8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <SystemClock_Config+0xcc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <SystemClock_Config+0xcc>)
 80010f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110c:	2310      	movs	r3, #16
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	2300      	movs	r3, #0
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001118:	2310      	movs	r3, #16
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800111c:	23c8      	movs	r3, #200	; 0xc8
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001120:	2302      	movs	r3, #2
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fb89 	bl	8000844 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001138:	f000 f81e 	bl	8001178 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2103      	movs	r1, #3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdeb 	bl	8000d34 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001164:	f000 f808 	bl	8001178 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	; 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <Error_Handler>:

void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop

  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:

/* Includes ------------------------------------------------------------------*/
#include "main.h"

void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0


  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]


}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800

080011d4 <NMI_Handler>:

#include "main.h"
#include "stm32f4xx_it.h"
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:


void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001220:	f7ff fa0a 	bl	8000638 <HAL_IncTick>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_sbrk+0x5c>)
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_sbrk+0x60>)
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <_sbrk+0x64>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <_sbrk+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	429a      	cmp	r2, r3
 8001256:	d207      	bcs.n	8001268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001258:	f000 f858 	bl	800130c <__errno>
 800125c:	4603      	mov	r3, r0
 800125e:	220c      	movs	r2, #12
 8001260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	e009      	b.n	800127c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_sbrk+0x64>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <_sbrk+0x64>)
 8001278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20020000 	.word	0x20020000
 8001288:	00000400 	.word	0x00000400
 800128c:	20000098 	.word	0x20000098
 8001290:	20000158 	.word	0x20000158

08001294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <SystemInit+0x20>)
 800129a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <SystemInit+0x20>)
 80012a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012be:	490e      	ldr	r1, [pc, #56]	; (80012f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d4:	4c0b      	ldr	r4, [pc, #44]	; (8001304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012e2:	f7ff ffd7 	bl	8001294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012e6:	f000 f817 	bl	8001318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ea:	f7ff fecf 	bl	800108c <main>
  bx  lr    
 80012ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012fc:	080028c8 	.word	0x080028c8
  ldr r2, =_sbss
 8001300:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001304:	20000158 	.word	0x20000158

08001308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC_IRQHandler>
	...

0800130c <__errno>:
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <__errno+0x8>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	2000000c 	.word	0x2000000c

08001318 <__libc_init_array>:
 8001318:	b570      	push	{r4, r5, r6, lr}
 800131a:	4d0d      	ldr	r5, [pc, #52]	; (8001350 <__libc_init_array+0x38>)
 800131c:	4c0d      	ldr	r4, [pc, #52]	; (8001354 <__libc_init_array+0x3c>)
 800131e:	1b64      	subs	r4, r4, r5
 8001320:	10a4      	asrs	r4, r4, #2
 8001322:	2600      	movs	r6, #0
 8001324:	42a6      	cmp	r6, r4
 8001326:	d109      	bne.n	800133c <__libc_init_array+0x24>
 8001328:	4d0b      	ldr	r5, [pc, #44]	; (8001358 <__libc_init_array+0x40>)
 800132a:	4c0c      	ldr	r4, [pc, #48]	; (800135c <__libc_init_array+0x44>)
 800132c:	f001 fa50 	bl	80027d0 <_init>
 8001330:	1b64      	subs	r4, r4, r5
 8001332:	10a4      	asrs	r4, r4, #2
 8001334:	2600      	movs	r6, #0
 8001336:	42a6      	cmp	r6, r4
 8001338:	d105      	bne.n	8001346 <__libc_init_array+0x2e>
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001340:	4798      	blx	r3
 8001342:	3601      	adds	r6, #1
 8001344:	e7ee      	b.n	8001324 <__libc_init_array+0xc>
 8001346:	f855 3b04 	ldr.w	r3, [r5], #4
 800134a:	4798      	blx	r3
 800134c:	3601      	adds	r6, #1
 800134e:	e7f2      	b.n	8001336 <__libc_init_array+0x1e>
 8001350:	080028c0 	.word	0x080028c0
 8001354:	080028c0 	.word	0x080028c0
 8001358:	080028c0 	.word	0x080028c0
 800135c:	080028c4 	.word	0x080028c4

08001360 <memset>:
 8001360:	4402      	add	r2, r0
 8001362:	4603      	mov	r3, r0
 8001364:	4293      	cmp	r3, r2
 8001366:	d100      	bne.n	800136a <memset+0xa>
 8001368:	4770      	bx	lr
 800136a:	f803 1b01 	strb.w	r1, [r3], #1
 800136e:	e7f9      	b.n	8001364 <memset+0x4>

08001370 <iprintf>:
 8001370:	b40f      	push	{r0, r1, r2, r3}
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <iprintf+0x2c>)
 8001374:	b513      	push	{r0, r1, r4, lr}
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	b124      	cbz	r4, 8001384 <iprintf+0x14>
 800137a:	69a3      	ldr	r3, [r4, #24]
 800137c:	b913      	cbnz	r3, 8001384 <iprintf+0x14>
 800137e:	4620      	mov	r0, r4
 8001380:	f000 f866 	bl	8001450 <__sinit>
 8001384:	ab05      	add	r3, sp, #20
 8001386:	9a04      	ldr	r2, [sp, #16]
 8001388:	68a1      	ldr	r1, [r4, #8]
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	4620      	mov	r0, r4
 800138e:	f000 f9bd 	bl	800170c <_vfiprintf_r>
 8001392:	b002      	add	sp, #8
 8001394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001398:	b004      	add	sp, #16
 800139a:	4770      	bx	lr
 800139c:	2000000c 	.word	0x2000000c

080013a0 <std>:
 80013a0:	2300      	movs	r3, #0
 80013a2:	b510      	push	{r4, lr}
 80013a4:	4604      	mov	r4, r0
 80013a6:	e9c0 3300 	strd	r3, r3, [r0]
 80013aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013ae:	6083      	str	r3, [r0, #8]
 80013b0:	8181      	strh	r1, [r0, #12]
 80013b2:	6643      	str	r3, [r0, #100]	; 0x64
 80013b4:	81c2      	strh	r2, [r0, #14]
 80013b6:	6183      	str	r3, [r0, #24]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2208      	movs	r2, #8
 80013bc:	305c      	adds	r0, #92	; 0x5c
 80013be:	f7ff ffcf 	bl	8001360 <memset>
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <std+0x38>)
 80013c4:	6263      	str	r3, [r4, #36]	; 0x24
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <std+0x3c>)
 80013c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <std+0x40>)
 80013cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <std+0x44>)
 80013d0:	6224      	str	r4, [r4, #32]
 80013d2:	6323      	str	r3, [r4, #48]	; 0x30
 80013d4:	bd10      	pop	{r4, pc}
 80013d6:	bf00      	nop
 80013d8:	08001cb5 	.word	0x08001cb5
 80013dc:	08001cd7 	.word	0x08001cd7
 80013e0:	08001d0f 	.word	0x08001d0f
 80013e4:	08001d33 	.word	0x08001d33

080013e8 <_cleanup_r>:
 80013e8:	4901      	ldr	r1, [pc, #4]	; (80013f0 <_cleanup_r+0x8>)
 80013ea:	f000 b8af 	b.w	800154c <_fwalk_reent>
 80013ee:	bf00      	nop
 80013f0:	0800200d 	.word	0x0800200d

080013f4 <__sfmoreglue>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	2268      	movs	r2, #104	; 0x68
 80013f8:	1e4d      	subs	r5, r1, #1
 80013fa:	4355      	muls	r5, r2
 80013fc:	460e      	mov	r6, r1
 80013fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001402:	f000 f8e5 	bl	80015d0 <_malloc_r>
 8001406:	4604      	mov	r4, r0
 8001408:	b140      	cbz	r0, 800141c <__sfmoreglue+0x28>
 800140a:	2100      	movs	r1, #0
 800140c:	e9c0 1600 	strd	r1, r6, [r0]
 8001410:	300c      	adds	r0, #12
 8001412:	60a0      	str	r0, [r4, #8]
 8001414:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001418:	f7ff ffa2 	bl	8001360 <memset>
 800141c:	4620      	mov	r0, r4
 800141e:	bd70      	pop	{r4, r5, r6, pc}

08001420 <__sfp_lock_acquire>:
 8001420:	4801      	ldr	r0, [pc, #4]	; (8001428 <__sfp_lock_acquire+0x8>)
 8001422:	f000 b8b3 	b.w	800158c <__retarget_lock_acquire_recursive>
 8001426:	bf00      	nop
 8001428:	2000009d 	.word	0x2000009d

0800142c <__sfp_lock_release>:
 800142c:	4801      	ldr	r0, [pc, #4]	; (8001434 <__sfp_lock_release+0x8>)
 800142e:	f000 b8ae 	b.w	800158e <__retarget_lock_release_recursive>
 8001432:	bf00      	nop
 8001434:	2000009d 	.word	0x2000009d

08001438 <__sinit_lock_acquire>:
 8001438:	4801      	ldr	r0, [pc, #4]	; (8001440 <__sinit_lock_acquire+0x8>)
 800143a:	f000 b8a7 	b.w	800158c <__retarget_lock_acquire_recursive>
 800143e:	bf00      	nop
 8001440:	2000009e 	.word	0x2000009e

08001444 <__sinit_lock_release>:
 8001444:	4801      	ldr	r0, [pc, #4]	; (800144c <__sinit_lock_release+0x8>)
 8001446:	f000 b8a2 	b.w	800158e <__retarget_lock_release_recursive>
 800144a:	bf00      	nop
 800144c:	2000009e 	.word	0x2000009e

08001450 <__sinit>:
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
 8001454:	f7ff fff0 	bl	8001438 <__sinit_lock_acquire>
 8001458:	69a3      	ldr	r3, [r4, #24]
 800145a:	b11b      	cbz	r3, 8001464 <__sinit+0x14>
 800145c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001460:	f7ff bff0 	b.w	8001444 <__sinit_lock_release>
 8001464:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001468:	6523      	str	r3, [r4, #80]	; 0x50
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <__sinit+0x68>)
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <__sinit+0x6c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	62a2      	str	r2, [r4, #40]	; 0x28
 8001472:	42a3      	cmp	r3, r4
 8001474:	bf04      	itt	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	61a3      	streq	r3, [r4, #24]
 800147a:	4620      	mov	r0, r4
 800147c:	f000 f820 	bl	80014c0 <__sfp>
 8001480:	6060      	str	r0, [r4, #4]
 8001482:	4620      	mov	r0, r4
 8001484:	f000 f81c 	bl	80014c0 <__sfp>
 8001488:	60a0      	str	r0, [r4, #8]
 800148a:	4620      	mov	r0, r4
 800148c:	f000 f818 	bl	80014c0 <__sfp>
 8001490:	2200      	movs	r2, #0
 8001492:	60e0      	str	r0, [r4, #12]
 8001494:	2104      	movs	r1, #4
 8001496:	6860      	ldr	r0, [r4, #4]
 8001498:	f7ff ff82 	bl	80013a0 <std>
 800149c:	68a0      	ldr	r0, [r4, #8]
 800149e:	2201      	movs	r2, #1
 80014a0:	2109      	movs	r1, #9
 80014a2:	f7ff ff7d 	bl	80013a0 <std>
 80014a6:	68e0      	ldr	r0, [r4, #12]
 80014a8:	2202      	movs	r2, #2
 80014aa:	2112      	movs	r1, #18
 80014ac:	f7ff ff78 	bl	80013a0 <std>
 80014b0:	2301      	movs	r3, #1
 80014b2:	61a3      	str	r3, [r4, #24]
 80014b4:	e7d2      	b.n	800145c <__sinit+0xc>
 80014b6:	bf00      	nop
 80014b8:	08002804 	.word	0x08002804
 80014bc:	080013e9 	.word	0x080013e9

080014c0 <__sfp>:
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	4607      	mov	r7, r0
 80014c4:	f7ff ffac 	bl	8001420 <__sfp_lock_acquire>
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <__sfp+0x84>)
 80014ca:	681e      	ldr	r6, [r3, #0]
 80014cc:	69b3      	ldr	r3, [r6, #24]
 80014ce:	b913      	cbnz	r3, 80014d6 <__sfp+0x16>
 80014d0:	4630      	mov	r0, r6
 80014d2:	f7ff ffbd 	bl	8001450 <__sinit>
 80014d6:	3648      	adds	r6, #72	; 0x48
 80014d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	d503      	bpl.n	80014e8 <__sfp+0x28>
 80014e0:	6833      	ldr	r3, [r6, #0]
 80014e2:	b30b      	cbz	r3, 8001528 <__sfp+0x68>
 80014e4:	6836      	ldr	r6, [r6, #0]
 80014e6:	e7f7      	b.n	80014d8 <__sfp+0x18>
 80014e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014ec:	b9d5      	cbnz	r5, 8001524 <__sfp+0x64>
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <__sfp+0x88>)
 80014f0:	60e3      	str	r3, [r4, #12]
 80014f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014f6:	6665      	str	r5, [r4, #100]	; 0x64
 80014f8:	f000 f847 	bl	800158a <__retarget_lock_init_recursive>
 80014fc:	f7ff ff96 	bl	800142c <__sfp_lock_release>
 8001500:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001504:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001508:	6025      	str	r5, [r4, #0]
 800150a:	61a5      	str	r5, [r4, #24]
 800150c:	2208      	movs	r2, #8
 800150e:	4629      	mov	r1, r5
 8001510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001514:	f7ff ff24 	bl	8001360 <memset>
 8001518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800151c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001520:	4620      	mov	r0, r4
 8001522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001524:	3468      	adds	r4, #104	; 0x68
 8001526:	e7d9      	b.n	80014dc <__sfp+0x1c>
 8001528:	2104      	movs	r1, #4
 800152a:	4638      	mov	r0, r7
 800152c:	f7ff ff62 	bl	80013f4 <__sfmoreglue>
 8001530:	4604      	mov	r4, r0
 8001532:	6030      	str	r0, [r6, #0]
 8001534:	2800      	cmp	r0, #0
 8001536:	d1d5      	bne.n	80014e4 <__sfp+0x24>
 8001538:	f7ff ff78 	bl	800142c <__sfp_lock_release>
 800153c:	230c      	movs	r3, #12
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	e7ee      	b.n	8001520 <__sfp+0x60>
 8001542:	bf00      	nop
 8001544:	08002804 	.word	0x08002804
 8001548:	ffff0001 	.word	0xffff0001

0800154c <_fwalk_reent>:
 800154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001550:	4606      	mov	r6, r0
 8001552:	4688      	mov	r8, r1
 8001554:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001558:	2700      	movs	r7, #0
 800155a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800155e:	f1b9 0901 	subs.w	r9, r9, #1
 8001562:	d505      	bpl.n	8001570 <_fwalk_reent+0x24>
 8001564:	6824      	ldr	r4, [r4, #0]
 8001566:	2c00      	cmp	r4, #0
 8001568:	d1f7      	bne.n	800155a <_fwalk_reent+0xe>
 800156a:	4638      	mov	r0, r7
 800156c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001570:	89ab      	ldrh	r3, [r5, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d907      	bls.n	8001586 <_fwalk_reent+0x3a>
 8001576:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	d003      	beq.n	8001586 <_fwalk_reent+0x3a>
 800157e:	4629      	mov	r1, r5
 8001580:	4630      	mov	r0, r6
 8001582:	47c0      	blx	r8
 8001584:	4307      	orrs	r7, r0
 8001586:	3568      	adds	r5, #104	; 0x68
 8001588:	e7e9      	b.n	800155e <_fwalk_reent+0x12>

0800158a <__retarget_lock_init_recursive>:
 800158a:	4770      	bx	lr

0800158c <__retarget_lock_acquire_recursive>:
 800158c:	4770      	bx	lr

0800158e <__retarget_lock_release_recursive>:
 800158e:	4770      	bx	lr

08001590 <sbrk_aligned>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	4e0e      	ldr	r6, [pc, #56]	; (80015cc <sbrk_aligned+0x3c>)
 8001594:	460c      	mov	r4, r1
 8001596:	6831      	ldr	r1, [r6, #0]
 8001598:	4605      	mov	r5, r0
 800159a:	b911      	cbnz	r1, 80015a2 <sbrk_aligned+0x12>
 800159c:	f000 fb7a 	bl	8001c94 <_sbrk_r>
 80015a0:	6030      	str	r0, [r6, #0]
 80015a2:	4621      	mov	r1, r4
 80015a4:	4628      	mov	r0, r5
 80015a6:	f000 fb75 	bl	8001c94 <_sbrk_r>
 80015aa:	1c43      	adds	r3, r0, #1
 80015ac:	d00a      	beq.n	80015c4 <sbrk_aligned+0x34>
 80015ae:	1cc4      	adds	r4, r0, #3
 80015b0:	f024 0403 	bic.w	r4, r4, #3
 80015b4:	42a0      	cmp	r0, r4
 80015b6:	d007      	beq.n	80015c8 <sbrk_aligned+0x38>
 80015b8:	1a21      	subs	r1, r4, r0
 80015ba:	4628      	mov	r0, r5
 80015bc:	f000 fb6a 	bl	8001c94 <_sbrk_r>
 80015c0:	3001      	adds	r0, #1
 80015c2:	d101      	bne.n	80015c8 <sbrk_aligned+0x38>
 80015c4:	f04f 34ff 	mov.w	r4, #4294967295
 80015c8:	4620      	mov	r0, r4
 80015ca:	bd70      	pop	{r4, r5, r6, pc}
 80015cc:	200000a4 	.word	0x200000a4

080015d0 <_malloc_r>:
 80015d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d4:	1ccd      	adds	r5, r1, #3
 80015d6:	f025 0503 	bic.w	r5, r5, #3
 80015da:	3508      	adds	r5, #8
 80015dc:	2d0c      	cmp	r5, #12
 80015de:	bf38      	it	cc
 80015e0:	250c      	movcc	r5, #12
 80015e2:	2d00      	cmp	r5, #0
 80015e4:	4607      	mov	r7, r0
 80015e6:	db01      	blt.n	80015ec <_malloc_r+0x1c>
 80015e8:	42a9      	cmp	r1, r5
 80015ea:	d905      	bls.n	80015f8 <_malloc_r+0x28>
 80015ec:	230c      	movs	r3, #12
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	2600      	movs	r6, #0
 80015f2:	4630      	mov	r0, r6
 80015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f8:	4e2e      	ldr	r6, [pc, #184]	; (80016b4 <_malloc_r+0xe4>)
 80015fa:	f000 fdbb 	bl	8002174 <__malloc_lock>
 80015fe:	6833      	ldr	r3, [r6, #0]
 8001600:	461c      	mov	r4, r3
 8001602:	bb34      	cbnz	r4, 8001652 <_malloc_r+0x82>
 8001604:	4629      	mov	r1, r5
 8001606:	4638      	mov	r0, r7
 8001608:	f7ff ffc2 	bl	8001590 <sbrk_aligned>
 800160c:	1c43      	adds	r3, r0, #1
 800160e:	4604      	mov	r4, r0
 8001610:	d14d      	bne.n	80016ae <_malloc_r+0xde>
 8001612:	6834      	ldr	r4, [r6, #0]
 8001614:	4626      	mov	r6, r4
 8001616:	2e00      	cmp	r6, #0
 8001618:	d140      	bne.n	800169c <_malloc_r+0xcc>
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	4631      	mov	r1, r6
 800161e:	4638      	mov	r0, r7
 8001620:	eb04 0803 	add.w	r8, r4, r3
 8001624:	f000 fb36 	bl	8001c94 <_sbrk_r>
 8001628:	4580      	cmp	r8, r0
 800162a:	d13a      	bne.n	80016a2 <_malloc_r+0xd2>
 800162c:	6821      	ldr	r1, [r4, #0]
 800162e:	3503      	adds	r5, #3
 8001630:	1a6d      	subs	r5, r5, r1
 8001632:	f025 0503 	bic.w	r5, r5, #3
 8001636:	3508      	adds	r5, #8
 8001638:	2d0c      	cmp	r5, #12
 800163a:	bf38      	it	cc
 800163c:	250c      	movcc	r5, #12
 800163e:	4629      	mov	r1, r5
 8001640:	4638      	mov	r0, r7
 8001642:	f7ff ffa5 	bl	8001590 <sbrk_aligned>
 8001646:	3001      	adds	r0, #1
 8001648:	d02b      	beq.n	80016a2 <_malloc_r+0xd2>
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	442b      	add	r3, r5
 800164e:	6023      	str	r3, [r4, #0]
 8001650:	e00e      	b.n	8001670 <_malloc_r+0xa0>
 8001652:	6822      	ldr	r2, [r4, #0]
 8001654:	1b52      	subs	r2, r2, r5
 8001656:	d41e      	bmi.n	8001696 <_malloc_r+0xc6>
 8001658:	2a0b      	cmp	r2, #11
 800165a:	d916      	bls.n	800168a <_malloc_r+0xba>
 800165c:	1961      	adds	r1, r4, r5
 800165e:	42a3      	cmp	r3, r4
 8001660:	6025      	str	r5, [r4, #0]
 8001662:	bf18      	it	ne
 8001664:	6059      	strne	r1, [r3, #4]
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	bf08      	it	eq
 800166a:	6031      	streq	r1, [r6, #0]
 800166c:	5162      	str	r2, [r4, r5]
 800166e:	604b      	str	r3, [r1, #4]
 8001670:	4638      	mov	r0, r7
 8001672:	f104 060b 	add.w	r6, r4, #11
 8001676:	f000 fd83 	bl	8002180 <__malloc_unlock>
 800167a:	f026 0607 	bic.w	r6, r6, #7
 800167e:	1d23      	adds	r3, r4, #4
 8001680:	1af2      	subs	r2, r6, r3
 8001682:	d0b6      	beq.n	80015f2 <_malloc_r+0x22>
 8001684:	1b9b      	subs	r3, r3, r6
 8001686:	50a3      	str	r3, [r4, r2]
 8001688:	e7b3      	b.n	80015f2 <_malloc_r+0x22>
 800168a:	6862      	ldr	r2, [r4, #4]
 800168c:	42a3      	cmp	r3, r4
 800168e:	bf0c      	ite	eq
 8001690:	6032      	streq	r2, [r6, #0]
 8001692:	605a      	strne	r2, [r3, #4]
 8001694:	e7ec      	b.n	8001670 <_malloc_r+0xa0>
 8001696:	4623      	mov	r3, r4
 8001698:	6864      	ldr	r4, [r4, #4]
 800169a:	e7b2      	b.n	8001602 <_malloc_r+0x32>
 800169c:	4634      	mov	r4, r6
 800169e:	6876      	ldr	r6, [r6, #4]
 80016a0:	e7b9      	b.n	8001616 <_malloc_r+0x46>
 80016a2:	230c      	movs	r3, #12
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4638      	mov	r0, r7
 80016a8:	f000 fd6a 	bl	8002180 <__malloc_unlock>
 80016ac:	e7a1      	b.n	80015f2 <_malloc_r+0x22>
 80016ae:	6025      	str	r5, [r4, #0]
 80016b0:	e7de      	b.n	8001670 <_malloc_r+0xa0>
 80016b2:	bf00      	nop
 80016b4:	200000a0 	.word	0x200000a0

080016b8 <__sfputc_r>:
 80016b8:	6893      	ldr	r3, [r2, #8]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	b410      	push	{r4}
 80016c0:	6093      	str	r3, [r2, #8]
 80016c2:	da08      	bge.n	80016d6 <__sfputc_r+0x1e>
 80016c4:	6994      	ldr	r4, [r2, #24]
 80016c6:	42a3      	cmp	r3, r4
 80016c8:	db01      	blt.n	80016ce <__sfputc_r+0x16>
 80016ca:	290a      	cmp	r1, #10
 80016cc:	d103      	bne.n	80016d6 <__sfputc_r+0x1e>
 80016ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016d2:	f000 bb33 	b.w	8001d3c <__swbuf_r>
 80016d6:	6813      	ldr	r3, [r2, #0]
 80016d8:	1c58      	adds	r0, r3, #1
 80016da:	6010      	str	r0, [r2, #0]
 80016dc:	7019      	strb	r1, [r3, #0]
 80016de:	4608      	mov	r0, r1
 80016e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <__sfputs_r>:
 80016e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e8:	4606      	mov	r6, r0
 80016ea:	460f      	mov	r7, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	18d5      	adds	r5, r2, r3
 80016f0:	42ac      	cmp	r4, r5
 80016f2:	d101      	bne.n	80016f8 <__sfputs_r+0x12>
 80016f4:	2000      	movs	r0, #0
 80016f6:	e007      	b.n	8001708 <__sfputs_r+0x22>
 80016f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016fc:	463a      	mov	r2, r7
 80016fe:	4630      	mov	r0, r6
 8001700:	f7ff ffda 	bl	80016b8 <__sfputc_r>
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	d1f3      	bne.n	80016f0 <__sfputs_r+0xa>
 8001708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800170c <_vfiprintf_r>:
 800170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001710:	460d      	mov	r5, r1
 8001712:	b09d      	sub	sp, #116	; 0x74
 8001714:	4614      	mov	r4, r2
 8001716:	4698      	mov	r8, r3
 8001718:	4606      	mov	r6, r0
 800171a:	b118      	cbz	r0, 8001724 <_vfiprintf_r+0x18>
 800171c:	6983      	ldr	r3, [r0, #24]
 800171e:	b90b      	cbnz	r3, 8001724 <_vfiprintf_r+0x18>
 8001720:	f7ff fe96 	bl	8001450 <__sinit>
 8001724:	4b89      	ldr	r3, [pc, #548]	; (800194c <_vfiprintf_r+0x240>)
 8001726:	429d      	cmp	r5, r3
 8001728:	d11b      	bne.n	8001762 <_vfiprintf_r+0x56>
 800172a:	6875      	ldr	r5, [r6, #4]
 800172c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800172e:	07d9      	lsls	r1, r3, #31
 8001730:	d405      	bmi.n	800173e <_vfiprintf_r+0x32>
 8001732:	89ab      	ldrh	r3, [r5, #12]
 8001734:	059a      	lsls	r2, r3, #22
 8001736:	d402      	bmi.n	800173e <_vfiprintf_r+0x32>
 8001738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800173a:	f7ff ff27 	bl	800158c <__retarget_lock_acquire_recursive>
 800173e:	89ab      	ldrh	r3, [r5, #12]
 8001740:	071b      	lsls	r3, r3, #28
 8001742:	d501      	bpl.n	8001748 <_vfiprintf_r+0x3c>
 8001744:	692b      	ldr	r3, [r5, #16]
 8001746:	b9eb      	cbnz	r3, 8001784 <_vfiprintf_r+0x78>
 8001748:	4629      	mov	r1, r5
 800174a:	4630      	mov	r0, r6
 800174c:	f000 fb5a 	bl	8001e04 <__swsetup_r>
 8001750:	b1c0      	cbz	r0, 8001784 <_vfiprintf_r+0x78>
 8001752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001754:	07dc      	lsls	r4, r3, #31
 8001756:	d50e      	bpl.n	8001776 <_vfiprintf_r+0x6a>
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	b01d      	add	sp, #116	; 0x74
 800175e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001762:	4b7b      	ldr	r3, [pc, #492]	; (8001950 <_vfiprintf_r+0x244>)
 8001764:	429d      	cmp	r5, r3
 8001766:	d101      	bne.n	800176c <_vfiprintf_r+0x60>
 8001768:	68b5      	ldr	r5, [r6, #8]
 800176a:	e7df      	b.n	800172c <_vfiprintf_r+0x20>
 800176c:	4b79      	ldr	r3, [pc, #484]	; (8001954 <_vfiprintf_r+0x248>)
 800176e:	429d      	cmp	r5, r3
 8001770:	bf08      	it	eq
 8001772:	68f5      	ldreq	r5, [r6, #12]
 8001774:	e7da      	b.n	800172c <_vfiprintf_r+0x20>
 8001776:	89ab      	ldrh	r3, [r5, #12]
 8001778:	0598      	lsls	r0, r3, #22
 800177a:	d4ed      	bmi.n	8001758 <_vfiprintf_r+0x4c>
 800177c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800177e:	f7ff ff06 	bl	800158e <__retarget_lock_release_recursive>
 8001782:	e7e9      	b.n	8001758 <_vfiprintf_r+0x4c>
 8001784:	2300      	movs	r3, #0
 8001786:	9309      	str	r3, [sp, #36]	; 0x24
 8001788:	2320      	movs	r3, #32
 800178a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800178e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001792:	2330      	movs	r3, #48	; 0x30
 8001794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001958 <_vfiprintf_r+0x24c>
 8001798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800179c:	f04f 0901 	mov.w	r9, #1
 80017a0:	4623      	mov	r3, r4
 80017a2:	469a      	mov	sl, r3
 80017a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80017a8:	b10a      	cbz	r2, 80017ae <_vfiprintf_r+0xa2>
 80017aa:	2a25      	cmp	r2, #37	; 0x25
 80017ac:	d1f9      	bne.n	80017a2 <_vfiprintf_r+0x96>
 80017ae:	ebba 0b04 	subs.w	fp, sl, r4
 80017b2:	d00b      	beq.n	80017cc <_vfiprintf_r+0xc0>
 80017b4:	465b      	mov	r3, fp
 80017b6:	4622      	mov	r2, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	4630      	mov	r0, r6
 80017bc:	f7ff ff93 	bl	80016e6 <__sfputs_r>
 80017c0:	3001      	adds	r0, #1
 80017c2:	f000 80aa 	beq.w	800191a <_vfiprintf_r+0x20e>
 80017c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017c8:	445a      	add	r2, fp
 80017ca:	9209      	str	r2, [sp, #36]	; 0x24
 80017cc:	f89a 3000 	ldrb.w	r3, [sl]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80a2 	beq.w	800191a <_vfiprintf_r+0x20e>
 80017d6:	2300      	movs	r3, #0
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017e0:	f10a 0a01 	add.w	sl, sl, #1
 80017e4:	9304      	str	r3, [sp, #16]
 80017e6:	9307      	str	r3, [sp, #28]
 80017e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017ec:	931a      	str	r3, [sp, #104]	; 0x68
 80017ee:	4654      	mov	r4, sl
 80017f0:	2205      	movs	r2, #5
 80017f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017f6:	4858      	ldr	r0, [pc, #352]	; (8001958 <_vfiprintf_r+0x24c>)
 80017f8:	f7fe fcf2 	bl	80001e0 <memchr>
 80017fc:	9a04      	ldr	r2, [sp, #16]
 80017fe:	b9d8      	cbnz	r0, 8001838 <_vfiprintf_r+0x12c>
 8001800:	06d1      	lsls	r1, r2, #27
 8001802:	bf44      	itt	mi
 8001804:	2320      	movmi	r3, #32
 8001806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800180a:	0713      	lsls	r3, r2, #28
 800180c:	bf44      	itt	mi
 800180e:	232b      	movmi	r3, #43	; 0x2b
 8001810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001814:	f89a 3000 	ldrb.w	r3, [sl]
 8001818:	2b2a      	cmp	r3, #42	; 0x2a
 800181a:	d015      	beq.n	8001848 <_vfiprintf_r+0x13c>
 800181c:	9a07      	ldr	r2, [sp, #28]
 800181e:	4654      	mov	r4, sl
 8001820:	2000      	movs	r0, #0
 8001822:	f04f 0c0a 	mov.w	ip, #10
 8001826:	4621      	mov	r1, r4
 8001828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800182c:	3b30      	subs	r3, #48	; 0x30
 800182e:	2b09      	cmp	r3, #9
 8001830:	d94e      	bls.n	80018d0 <_vfiprintf_r+0x1c4>
 8001832:	b1b0      	cbz	r0, 8001862 <_vfiprintf_r+0x156>
 8001834:	9207      	str	r2, [sp, #28]
 8001836:	e014      	b.n	8001862 <_vfiprintf_r+0x156>
 8001838:	eba0 0308 	sub.w	r3, r0, r8
 800183c:	fa09 f303 	lsl.w	r3, r9, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	9304      	str	r3, [sp, #16]
 8001844:	46a2      	mov	sl, r4
 8001846:	e7d2      	b.n	80017ee <_vfiprintf_r+0xe2>
 8001848:	9b03      	ldr	r3, [sp, #12]
 800184a:	1d19      	adds	r1, r3, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	9103      	str	r1, [sp, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	bfbb      	ittet	lt
 8001854:	425b      	neglt	r3, r3
 8001856:	f042 0202 	orrlt.w	r2, r2, #2
 800185a:	9307      	strge	r3, [sp, #28]
 800185c:	9307      	strlt	r3, [sp, #28]
 800185e:	bfb8      	it	lt
 8001860:	9204      	strlt	r2, [sp, #16]
 8001862:	7823      	ldrb	r3, [r4, #0]
 8001864:	2b2e      	cmp	r3, #46	; 0x2e
 8001866:	d10c      	bne.n	8001882 <_vfiprintf_r+0x176>
 8001868:	7863      	ldrb	r3, [r4, #1]
 800186a:	2b2a      	cmp	r3, #42	; 0x2a
 800186c:	d135      	bne.n	80018da <_vfiprintf_r+0x1ce>
 800186e:	9b03      	ldr	r3, [sp, #12]
 8001870:	1d1a      	adds	r2, r3, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	9203      	str	r2, [sp, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	bfb8      	it	lt
 800187a:	f04f 33ff 	movlt.w	r3, #4294967295
 800187e:	3402      	adds	r4, #2
 8001880:	9305      	str	r3, [sp, #20]
 8001882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001968 <_vfiprintf_r+0x25c>
 8001886:	7821      	ldrb	r1, [r4, #0]
 8001888:	2203      	movs	r2, #3
 800188a:	4650      	mov	r0, sl
 800188c:	f7fe fca8 	bl	80001e0 <memchr>
 8001890:	b140      	cbz	r0, 80018a4 <_vfiprintf_r+0x198>
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	eba0 000a 	sub.w	r0, r0, sl
 8001898:	fa03 f000 	lsl.w	r0, r3, r0
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	4303      	orrs	r3, r0
 80018a0:	3401      	adds	r4, #1
 80018a2:	9304      	str	r3, [sp, #16]
 80018a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018a8:	482c      	ldr	r0, [pc, #176]	; (800195c <_vfiprintf_r+0x250>)
 80018aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018ae:	2206      	movs	r2, #6
 80018b0:	f7fe fc96 	bl	80001e0 <memchr>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d03f      	beq.n	8001938 <_vfiprintf_r+0x22c>
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <_vfiprintf_r+0x254>)
 80018ba:	bb1b      	cbnz	r3, 8001904 <_vfiprintf_r+0x1f8>
 80018bc:	9b03      	ldr	r3, [sp, #12]
 80018be:	3307      	adds	r3, #7
 80018c0:	f023 0307 	bic.w	r3, r3, #7
 80018c4:	3308      	adds	r3, #8
 80018c6:	9303      	str	r3, [sp, #12]
 80018c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018ca:	443b      	add	r3, r7
 80018cc:	9309      	str	r3, [sp, #36]	; 0x24
 80018ce:	e767      	b.n	80017a0 <_vfiprintf_r+0x94>
 80018d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80018d4:	460c      	mov	r4, r1
 80018d6:	2001      	movs	r0, #1
 80018d8:	e7a5      	b.n	8001826 <_vfiprintf_r+0x11a>
 80018da:	2300      	movs	r3, #0
 80018dc:	3401      	adds	r4, #1
 80018de:	9305      	str	r3, [sp, #20]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f04f 0c0a 	mov.w	ip, #10
 80018e6:	4620      	mov	r0, r4
 80018e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018ec:	3a30      	subs	r2, #48	; 0x30
 80018ee:	2a09      	cmp	r2, #9
 80018f0:	d903      	bls.n	80018fa <_vfiprintf_r+0x1ee>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0c5      	beq.n	8001882 <_vfiprintf_r+0x176>
 80018f6:	9105      	str	r1, [sp, #20]
 80018f8:	e7c3      	b.n	8001882 <_vfiprintf_r+0x176>
 80018fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80018fe:	4604      	mov	r4, r0
 8001900:	2301      	movs	r3, #1
 8001902:	e7f0      	b.n	80018e6 <_vfiprintf_r+0x1da>
 8001904:	ab03      	add	r3, sp, #12
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	462a      	mov	r2, r5
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <_vfiprintf_r+0x258>)
 800190c:	a904      	add	r1, sp, #16
 800190e:	4630      	mov	r0, r6
 8001910:	f3af 8000 	nop.w
 8001914:	4607      	mov	r7, r0
 8001916:	1c78      	adds	r0, r7, #1
 8001918:	d1d6      	bne.n	80018c8 <_vfiprintf_r+0x1bc>
 800191a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800191c:	07d9      	lsls	r1, r3, #31
 800191e:	d405      	bmi.n	800192c <_vfiprintf_r+0x220>
 8001920:	89ab      	ldrh	r3, [r5, #12]
 8001922:	059a      	lsls	r2, r3, #22
 8001924:	d402      	bmi.n	800192c <_vfiprintf_r+0x220>
 8001926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001928:	f7ff fe31 	bl	800158e <__retarget_lock_release_recursive>
 800192c:	89ab      	ldrh	r3, [r5, #12]
 800192e:	065b      	lsls	r3, r3, #25
 8001930:	f53f af12 	bmi.w	8001758 <_vfiprintf_r+0x4c>
 8001934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001936:	e711      	b.n	800175c <_vfiprintf_r+0x50>
 8001938:	ab03      	add	r3, sp, #12
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	462a      	mov	r2, r5
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <_vfiprintf_r+0x258>)
 8001940:	a904      	add	r1, sp, #16
 8001942:	4630      	mov	r0, r6
 8001944:	f000 f880 	bl	8001a48 <_printf_i>
 8001948:	e7e4      	b.n	8001914 <_vfiprintf_r+0x208>
 800194a:	bf00      	nop
 800194c:	08002828 	.word	0x08002828
 8001950:	08002848 	.word	0x08002848
 8001954:	08002808 	.word	0x08002808
 8001958:	08002868 	.word	0x08002868
 800195c:	08002872 	.word	0x08002872
 8001960:	00000000 	.word	0x00000000
 8001964:	080016e7 	.word	0x080016e7
 8001968:	0800286e 	.word	0x0800286e

0800196c <_printf_common>:
 800196c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001970:	4616      	mov	r6, r2
 8001972:	4699      	mov	r9, r3
 8001974:	688a      	ldr	r2, [r1, #8]
 8001976:	690b      	ldr	r3, [r1, #16]
 8001978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800197c:	4293      	cmp	r3, r2
 800197e:	bfb8      	it	lt
 8001980:	4613      	movlt	r3, r2
 8001982:	6033      	str	r3, [r6, #0]
 8001984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001988:	4607      	mov	r7, r0
 800198a:	460c      	mov	r4, r1
 800198c:	b10a      	cbz	r2, 8001992 <_printf_common+0x26>
 800198e:	3301      	adds	r3, #1
 8001990:	6033      	str	r3, [r6, #0]
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	0699      	lsls	r1, r3, #26
 8001996:	bf42      	ittt	mi
 8001998:	6833      	ldrmi	r3, [r6, #0]
 800199a:	3302      	addmi	r3, #2
 800199c:	6033      	strmi	r3, [r6, #0]
 800199e:	6825      	ldr	r5, [r4, #0]
 80019a0:	f015 0506 	ands.w	r5, r5, #6
 80019a4:	d106      	bne.n	80019b4 <_printf_common+0x48>
 80019a6:	f104 0a19 	add.w	sl, r4, #25
 80019aa:	68e3      	ldr	r3, [r4, #12]
 80019ac:	6832      	ldr	r2, [r6, #0]
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	42ab      	cmp	r3, r5
 80019b2:	dc26      	bgt.n	8001a02 <_printf_common+0x96>
 80019b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019b8:	1e13      	subs	r3, r2, #0
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	bf18      	it	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	0692      	lsls	r2, r2, #26
 80019c2:	d42b      	bmi.n	8001a1c <_printf_common+0xb0>
 80019c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019c8:	4649      	mov	r1, r9
 80019ca:	4638      	mov	r0, r7
 80019cc:	47c0      	blx	r8
 80019ce:	3001      	adds	r0, #1
 80019d0:	d01e      	beq.n	8001a10 <_printf_common+0xa4>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	68e5      	ldr	r5, [r4, #12]
 80019d6:	6832      	ldr	r2, [r6, #0]
 80019d8:	f003 0306 	and.w	r3, r3, #6
 80019dc:	2b04      	cmp	r3, #4
 80019de:	bf08      	it	eq
 80019e0:	1aad      	subeq	r5, r5, r2
 80019e2:	68a3      	ldr	r3, [r4, #8]
 80019e4:	6922      	ldr	r2, [r4, #16]
 80019e6:	bf0c      	ite	eq
 80019e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019ec:	2500      	movne	r5, #0
 80019ee:	4293      	cmp	r3, r2
 80019f0:	bfc4      	itt	gt
 80019f2:	1a9b      	subgt	r3, r3, r2
 80019f4:	18ed      	addgt	r5, r5, r3
 80019f6:	2600      	movs	r6, #0
 80019f8:	341a      	adds	r4, #26
 80019fa:	42b5      	cmp	r5, r6
 80019fc:	d11a      	bne.n	8001a34 <_printf_common+0xc8>
 80019fe:	2000      	movs	r0, #0
 8001a00:	e008      	b.n	8001a14 <_printf_common+0xa8>
 8001a02:	2301      	movs	r3, #1
 8001a04:	4652      	mov	r2, sl
 8001a06:	4649      	mov	r1, r9
 8001a08:	4638      	mov	r0, r7
 8001a0a:	47c0      	blx	r8
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	d103      	bne.n	8001a18 <_printf_common+0xac>
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a18:	3501      	adds	r5, #1
 8001a1a:	e7c6      	b.n	80019aa <_printf_common+0x3e>
 8001a1c:	18e1      	adds	r1, r4, r3
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	2030      	movs	r0, #48	; 0x30
 8001a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a26:	4422      	add	r2, r4
 8001a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a30:	3302      	adds	r3, #2
 8001a32:	e7c7      	b.n	80019c4 <_printf_common+0x58>
 8001a34:	2301      	movs	r3, #1
 8001a36:	4622      	mov	r2, r4
 8001a38:	4649      	mov	r1, r9
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	47c0      	blx	r8
 8001a3e:	3001      	adds	r0, #1
 8001a40:	d0e6      	beq.n	8001a10 <_printf_common+0xa4>
 8001a42:	3601      	adds	r6, #1
 8001a44:	e7d9      	b.n	80019fa <_printf_common+0x8e>
	...

08001a48 <_printf_i>:
 8001a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a4c:	7e0f      	ldrb	r7, [r1, #24]
 8001a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a50:	2f78      	cmp	r7, #120	; 0x78
 8001a52:	4691      	mov	r9, r2
 8001a54:	4680      	mov	r8, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	469a      	mov	sl, r3
 8001a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a5e:	d807      	bhi.n	8001a70 <_printf_i+0x28>
 8001a60:	2f62      	cmp	r7, #98	; 0x62
 8001a62:	d80a      	bhi.n	8001a7a <_printf_i+0x32>
 8001a64:	2f00      	cmp	r7, #0
 8001a66:	f000 80d8 	beq.w	8001c1a <_printf_i+0x1d2>
 8001a6a:	2f58      	cmp	r7, #88	; 0x58
 8001a6c:	f000 80a3 	beq.w	8001bb6 <_printf_i+0x16e>
 8001a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a78:	e03a      	b.n	8001af0 <_printf_i+0xa8>
 8001a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a7e:	2b15      	cmp	r3, #21
 8001a80:	d8f6      	bhi.n	8001a70 <_printf_i+0x28>
 8001a82:	a101      	add	r1, pc, #4	; (adr r1, 8001a88 <_printf_i+0x40>)
 8001a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a88:	08001ae1 	.word	0x08001ae1
 8001a8c:	08001af5 	.word	0x08001af5
 8001a90:	08001a71 	.word	0x08001a71
 8001a94:	08001a71 	.word	0x08001a71
 8001a98:	08001a71 	.word	0x08001a71
 8001a9c:	08001a71 	.word	0x08001a71
 8001aa0:	08001af5 	.word	0x08001af5
 8001aa4:	08001a71 	.word	0x08001a71
 8001aa8:	08001a71 	.word	0x08001a71
 8001aac:	08001a71 	.word	0x08001a71
 8001ab0:	08001a71 	.word	0x08001a71
 8001ab4:	08001c01 	.word	0x08001c01
 8001ab8:	08001b25 	.word	0x08001b25
 8001abc:	08001be3 	.word	0x08001be3
 8001ac0:	08001a71 	.word	0x08001a71
 8001ac4:	08001a71 	.word	0x08001a71
 8001ac8:	08001c23 	.word	0x08001c23
 8001acc:	08001a71 	.word	0x08001a71
 8001ad0:	08001b25 	.word	0x08001b25
 8001ad4:	08001a71 	.word	0x08001a71
 8001ad8:	08001a71 	.word	0x08001a71
 8001adc:	08001beb 	.word	0x08001beb
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	1d1a      	adds	r2, r3, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	602a      	str	r2, [r5, #0]
 8001ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0a3      	b.n	8001c3c <_printf_i+0x1f4>
 8001af4:	6820      	ldr	r0, [r4, #0]
 8001af6:	6829      	ldr	r1, [r5, #0]
 8001af8:	0606      	lsls	r6, r0, #24
 8001afa:	f101 0304 	add.w	r3, r1, #4
 8001afe:	d50a      	bpl.n	8001b16 <_printf_i+0xce>
 8001b00:	680e      	ldr	r6, [r1, #0]
 8001b02:	602b      	str	r3, [r5, #0]
 8001b04:	2e00      	cmp	r6, #0
 8001b06:	da03      	bge.n	8001b10 <_printf_i+0xc8>
 8001b08:	232d      	movs	r3, #45	; 0x2d
 8001b0a:	4276      	negs	r6, r6
 8001b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b10:	485e      	ldr	r0, [pc, #376]	; (8001c8c <_printf_i+0x244>)
 8001b12:	230a      	movs	r3, #10
 8001b14:	e019      	b.n	8001b4a <_printf_i+0x102>
 8001b16:	680e      	ldr	r6, [r1, #0]
 8001b18:	602b      	str	r3, [r5, #0]
 8001b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b1e:	bf18      	it	ne
 8001b20:	b236      	sxthne	r6, r6
 8001b22:	e7ef      	b.n	8001b04 <_printf_i+0xbc>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	1d19      	adds	r1, r3, #4
 8001b2a:	6029      	str	r1, [r5, #0]
 8001b2c:	0601      	lsls	r1, r0, #24
 8001b2e:	d501      	bpl.n	8001b34 <_printf_i+0xec>
 8001b30:	681e      	ldr	r6, [r3, #0]
 8001b32:	e002      	b.n	8001b3a <_printf_i+0xf2>
 8001b34:	0646      	lsls	r6, r0, #25
 8001b36:	d5fb      	bpl.n	8001b30 <_printf_i+0xe8>
 8001b38:	881e      	ldrh	r6, [r3, #0]
 8001b3a:	4854      	ldr	r0, [pc, #336]	; (8001c8c <_printf_i+0x244>)
 8001b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8001b3e:	bf0c      	ite	eq
 8001b40:	2308      	moveq	r3, #8
 8001b42:	230a      	movne	r3, #10
 8001b44:	2100      	movs	r1, #0
 8001b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b4a:	6865      	ldr	r5, [r4, #4]
 8001b4c:	60a5      	str	r5, [r4, #8]
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	bfa2      	ittt	ge
 8001b52:	6821      	ldrge	r1, [r4, #0]
 8001b54:	f021 0104 	bicge.w	r1, r1, #4
 8001b58:	6021      	strge	r1, [r4, #0]
 8001b5a:	b90e      	cbnz	r6, 8001b60 <_printf_i+0x118>
 8001b5c:	2d00      	cmp	r5, #0
 8001b5e:	d04d      	beq.n	8001bfc <_printf_i+0x1b4>
 8001b60:	4615      	mov	r5, r2
 8001b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b66:	fb03 6711 	mls	r7, r3, r1, r6
 8001b6a:	5dc7      	ldrb	r7, [r0, r7]
 8001b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b70:	4637      	mov	r7, r6
 8001b72:	42bb      	cmp	r3, r7
 8001b74:	460e      	mov	r6, r1
 8001b76:	d9f4      	bls.n	8001b62 <_printf_i+0x11a>
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d10b      	bne.n	8001b94 <_printf_i+0x14c>
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	07de      	lsls	r6, r3, #31
 8001b80:	d508      	bpl.n	8001b94 <_printf_i+0x14c>
 8001b82:	6923      	ldr	r3, [r4, #16]
 8001b84:	6861      	ldr	r1, [r4, #4]
 8001b86:	4299      	cmp	r1, r3
 8001b88:	bfde      	ittt	le
 8001b8a:	2330      	movle	r3, #48	; 0x30
 8001b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b94:	1b52      	subs	r2, r2, r5
 8001b96:	6122      	str	r2, [r4, #16]
 8001b98:	f8cd a000 	str.w	sl, [sp]
 8001b9c:	464b      	mov	r3, r9
 8001b9e:	aa03      	add	r2, sp, #12
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	4640      	mov	r0, r8
 8001ba4:	f7ff fee2 	bl	800196c <_printf_common>
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d14c      	bne.n	8001c46 <_printf_i+0x1fe>
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	b004      	add	sp, #16
 8001bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bb6:	4835      	ldr	r0, [pc, #212]	; (8001c8c <_printf_i+0x244>)
 8001bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001bbc:	6829      	ldr	r1, [r5, #0]
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bc4:	6029      	str	r1, [r5, #0]
 8001bc6:	061d      	lsls	r5, r3, #24
 8001bc8:	d514      	bpl.n	8001bf4 <_printf_i+0x1ac>
 8001bca:	07df      	lsls	r7, r3, #31
 8001bcc:	bf44      	itt	mi
 8001bce:	f043 0320 	orrmi.w	r3, r3, #32
 8001bd2:	6023      	strmi	r3, [r4, #0]
 8001bd4:	b91e      	cbnz	r6, 8001bde <_printf_i+0x196>
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	f023 0320 	bic.w	r3, r3, #32
 8001bdc:	6023      	str	r3, [r4, #0]
 8001bde:	2310      	movs	r3, #16
 8001be0:	e7b0      	b.n	8001b44 <_printf_i+0xfc>
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	f043 0320 	orr.w	r3, r3, #32
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	2378      	movs	r3, #120	; 0x78
 8001bec:	4828      	ldr	r0, [pc, #160]	; (8001c90 <_printf_i+0x248>)
 8001bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001bf2:	e7e3      	b.n	8001bbc <_printf_i+0x174>
 8001bf4:	0659      	lsls	r1, r3, #25
 8001bf6:	bf48      	it	mi
 8001bf8:	b2b6      	uxthmi	r6, r6
 8001bfa:	e7e6      	b.n	8001bca <_printf_i+0x182>
 8001bfc:	4615      	mov	r5, r2
 8001bfe:	e7bb      	b.n	8001b78 <_printf_i+0x130>
 8001c00:	682b      	ldr	r3, [r5, #0]
 8001c02:	6826      	ldr	r6, [r4, #0]
 8001c04:	6961      	ldr	r1, [r4, #20]
 8001c06:	1d18      	adds	r0, r3, #4
 8001c08:	6028      	str	r0, [r5, #0]
 8001c0a:	0635      	lsls	r5, r6, #24
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	d501      	bpl.n	8001c14 <_printf_i+0x1cc>
 8001c10:	6019      	str	r1, [r3, #0]
 8001c12:	e002      	b.n	8001c1a <_printf_i+0x1d2>
 8001c14:	0670      	lsls	r0, r6, #25
 8001c16:	d5fb      	bpl.n	8001c10 <_printf_i+0x1c8>
 8001c18:	8019      	strh	r1, [r3, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6123      	str	r3, [r4, #16]
 8001c1e:	4615      	mov	r5, r2
 8001c20:	e7ba      	b.n	8001b98 <_printf_i+0x150>
 8001c22:	682b      	ldr	r3, [r5, #0]
 8001c24:	1d1a      	adds	r2, r3, #4
 8001c26:	602a      	str	r2, [r5, #0]
 8001c28:	681d      	ldr	r5, [r3, #0]
 8001c2a:	6862      	ldr	r2, [r4, #4]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4628      	mov	r0, r5
 8001c30:	f7fe fad6 	bl	80001e0 <memchr>
 8001c34:	b108      	cbz	r0, 8001c3a <_printf_i+0x1f2>
 8001c36:	1b40      	subs	r0, r0, r5
 8001c38:	6060      	str	r0, [r4, #4]
 8001c3a:	6863      	ldr	r3, [r4, #4]
 8001c3c:	6123      	str	r3, [r4, #16]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c44:	e7a8      	b.n	8001b98 <_printf_i+0x150>
 8001c46:	6923      	ldr	r3, [r4, #16]
 8001c48:	462a      	mov	r2, r5
 8001c4a:	4649      	mov	r1, r9
 8001c4c:	4640      	mov	r0, r8
 8001c4e:	47d0      	blx	sl
 8001c50:	3001      	adds	r0, #1
 8001c52:	d0ab      	beq.n	8001bac <_printf_i+0x164>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	079b      	lsls	r3, r3, #30
 8001c58:	d413      	bmi.n	8001c82 <_printf_i+0x23a>
 8001c5a:	68e0      	ldr	r0, [r4, #12]
 8001c5c:	9b03      	ldr	r3, [sp, #12]
 8001c5e:	4298      	cmp	r0, r3
 8001c60:	bfb8      	it	lt
 8001c62:	4618      	movlt	r0, r3
 8001c64:	e7a4      	b.n	8001bb0 <_printf_i+0x168>
 8001c66:	2301      	movs	r3, #1
 8001c68:	4632      	mov	r2, r6
 8001c6a:	4649      	mov	r1, r9
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	47d0      	blx	sl
 8001c70:	3001      	adds	r0, #1
 8001c72:	d09b      	beq.n	8001bac <_printf_i+0x164>
 8001c74:	3501      	adds	r5, #1
 8001c76:	68e3      	ldr	r3, [r4, #12]
 8001c78:	9903      	ldr	r1, [sp, #12]
 8001c7a:	1a5b      	subs	r3, r3, r1
 8001c7c:	42ab      	cmp	r3, r5
 8001c7e:	dcf2      	bgt.n	8001c66 <_printf_i+0x21e>
 8001c80:	e7eb      	b.n	8001c5a <_printf_i+0x212>
 8001c82:	2500      	movs	r5, #0
 8001c84:	f104 0619 	add.w	r6, r4, #25
 8001c88:	e7f5      	b.n	8001c76 <_printf_i+0x22e>
 8001c8a:	bf00      	nop
 8001c8c:	08002879 	.word	0x08002879
 8001c90:	0800288a 	.word	0x0800288a

08001c94 <_sbrk_r>:
 8001c94:	b538      	push	{r3, r4, r5, lr}
 8001c96:	4d06      	ldr	r5, [pc, #24]	; (8001cb0 <_sbrk_r+0x1c>)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	602b      	str	r3, [r5, #0]
 8001ca0:	f7ff fac2 	bl	8001228 <_sbrk>
 8001ca4:	1c43      	adds	r3, r0, #1
 8001ca6:	d102      	bne.n	8001cae <_sbrk_r+0x1a>
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	b103      	cbz	r3, 8001cae <_sbrk_r+0x1a>
 8001cac:	6023      	str	r3, [r4, #0]
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
 8001cb0:	200000a8 	.word	0x200000a8

08001cb4 <__sread>:
 8001cb4:	b510      	push	{r4, lr}
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cbc:	f000 fab2 	bl	8002224 <_read_r>
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	bfab      	itete	ge
 8001cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8001cc8:	181b      	addge	r3, r3, r0
 8001cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cce:	bfac      	ite	ge
 8001cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cd2:	81a3      	strhlt	r3, [r4, #12]
 8001cd4:	bd10      	pop	{r4, pc}

08001cd6 <__swrite>:
 8001cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cda:	461f      	mov	r7, r3
 8001cdc:	898b      	ldrh	r3, [r1, #12]
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	4616      	mov	r6, r2
 8001ce6:	d505      	bpl.n	8001cf4 <__swrite+0x1e>
 8001ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cec:	2302      	movs	r3, #2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f000 f9c8 	bl	8002084 <_lseek_r>
 8001cf4:	89a3      	ldrh	r3, [r4, #12]
 8001cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cfe:	81a3      	strh	r3, [r4, #12]
 8001d00:	4632      	mov	r2, r6
 8001d02:	463b      	mov	r3, r7
 8001d04:	4628      	mov	r0, r5
 8001d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d0a:	f000 b869 	b.w	8001de0 <_write_r>

08001d0e <__sseek>:
 8001d0e:	b510      	push	{r4, lr}
 8001d10:	460c      	mov	r4, r1
 8001d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d16:	f000 f9b5 	bl	8002084 <_lseek_r>
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	bf15      	itete	ne
 8001d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d2a:	81a3      	strheq	r3, [r4, #12]
 8001d2c:	bf18      	it	ne
 8001d2e:	81a3      	strhne	r3, [r4, #12]
 8001d30:	bd10      	pop	{r4, pc}

08001d32 <__sclose>:
 8001d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d36:	f000 b8d3 	b.w	8001ee0 <_close_r>
	...

08001d3c <__swbuf_r>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	460e      	mov	r6, r1
 8001d40:	4614      	mov	r4, r2
 8001d42:	4605      	mov	r5, r0
 8001d44:	b118      	cbz	r0, 8001d4e <__swbuf_r+0x12>
 8001d46:	6983      	ldr	r3, [r0, #24]
 8001d48:	b90b      	cbnz	r3, 8001d4e <__swbuf_r+0x12>
 8001d4a:	f7ff fb81 	bl	8001450 <__sinit>
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <__swbuf_r+0x98>)
 8001d50:	429c      	cmp	r4, r3
 8001d52:	d12b      	bne.n	8001dac <__swbuf_r+0x70>
 8001d54:	686c      	ldr	r4, [r5, #4]
 8001d56:	69a3      	ldr	r3, [r4, #24]
 8001d58:	60a3      	str	r3, [r4, #8]
 8001d5a:	89a3      	ldrh	r3, [r4, #12]
 8001d5c:	071a      	lsls	r2, r3, #28
 8001d5e:	d52f      	bpl.n	8001dc0 <__swbuf_r+0x84>
 8001d60:	6923      	ldr	r3, [r4, #16]
 8001d62:	b36b      	cbz	r3, 8001dc0 <__swbuf_r+0x84>
 8001d64:	6923      	ldr	r3, [r4, #16]
 8001d66:	6820      	ldr	r0, [r4, #0]
 8001d68:	1ac0      	subs	r0, r0, r3
 8001d6a:	6963      	ldr	r3, [r4, #20]
 8001d6c:	b2f6      	uxtb	r6, r6
 8001d6e:	4283      	cmp	r3, r0
 8001d70:	4637      	mov	r7, r6
 8001d72:	dc04      	bgt.n	8001d7e <__swbuf_r+0x42>
 8001d74:	4621      	mov	r1, r4
 8001d76:	4628      	mov	r0, r5
 8001d78:	f000 f948 	bl	800200c <_fflush_r>
 8001d7c:	bb30      	cbnz	r0, 8001dcc <__swbuf_r+0x90>
 8001d7e:	68a3      	ldr	r3, [r4, #8]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60a3      	str	r3, [r4, #8]
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	6022      	str	r2, [r4, #0]
 8001d8a:	701e      	strb	r6, [r3, #0]
 8001d8c:	6963      	ldr	r3, [r4, #20]
 8001d8e:	3001      	adds	r0, #1
 8001d90:	4283      	cmp	r3, r0
 8001d92:	d004      	beq.n	8001d9e <__swbuf_r+0x62>
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	07db      	lsls	r3, r3, #31
 8001d98:	d506      	bpl.n	8001da8 <__swbuf_r+0x6c>
 8001d9a:	2e0a      	cmp	r6, #10
 8001d9c:	d104      	bne.n	8001da8 <__swbuf_r+0x6c>
 8001d9e:	4621      	mov	r1, r4
 8001da0:	4628      	mov	r0, r5
 8001da2:	f000 f933 	bl	800200c <_fflush_r>
 8001da6:	b988      	cbnz	r0, 8001dcc <__swbuf_r+0x90>
 8001da8:	4638      	mov	r0, r7
 8001daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <__swbuf_r+0x9c>)
 8001dae:	429c      	cmp	r4, r3
 8001db0:	d101      	bne.n	8001db6 <__swbuf_r+0x7a>
 8001db2:	68ac      	ldr	r4, [r5, #8]
 8001db4:	e7cf      	b.n	8001d56 <__swbuf_r+0x1a>
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <__swbuf_r+0xa0>)
 8001db8:	429c      	cmp	r4, r3
 8001dba:	bf08      	it	eq
 8001dbc:	68ec      	ldreq	r4, [r5, #12]
 8001dbe:	e7ca      	b.n	8001d56 <__swbuf_r+0x1a>
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	f000 f81e 	bl	8001e04 <__swsetup_r>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d0cb      	beq.n	8001d64 <__swbuf_r+0x28>
 8001dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8001dd0:	e7ea      	b.n	8001da8 <__swbuf_r+0x6c>
 8001dd2:	bf00      	nop
 8001dd4:	08002828 	.word	0x08002828
 8001dd8:	08002848 	.word	0x08002848
 8001ddc:	08002808 	.word	0x08002808

08001de0 <_write_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4d07      	ldr	r5, [pc, #28]	; (8001e00 <_write_r+0x20>)
 8001de4:	4604      	mov	r4, r0
 8001de6:	4608      	mov	r0, r1
 8001de8:	4611      	mov	r1, r2
 8001dea:	2200      	movs	r2, #0
 8001dec:	602a      	str	r2, [r5, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f000 faf3 	bl	80023da <_write>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_write_r+0x1e>
 8001df8:	682b      	ldr	r3, [r5, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_write_r+0x1e>
 8001dfc:	6023      	str	r3, [r4, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	200000a8 	.word	0x200000a8

08001e04 <__swsetup_r>:
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <__swsetup_r+0xcc>)
 8001e06:	b570      	push	{r4, r5, r6, lr}
 8001e08:	681d      	ldr	r5, [r3, #0]
 8001e0a:	4606      	mov	r6, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	b125      	cbz	r5, 8001e1a <__swsetup_r+0x16>
 8001e10:	69ab      	ldr	r3, [r5, #24]
 8001e12:	b913      	cbnz	r3, 8001e1a <__swsetup_r+0x16>
 8001e14:	4628      	mov	r0, r5
 8001e16:	f7ff fb1b 	bl	8001450 <__sinit>
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <__swsetup_r+0xd0>)
 8001e1c:	429c      	cmp	r4, r3
 8001e1e:	d10f      	bne.n	8001e40 <__swsetup_r+0x3c>
 8001e20:	686c      	ldr	r4, [r5, #4]
 8001e22:	89a3      	ldrh	r3, [r4, #12]
 8001e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e28:	0719      	lsls	r1, r3, #28
 8001e2a:	d42c      	bmi.n	8001e86 <__swsetup_r+0x82>
 8001e2c:	06dd      	lsls	r5, r3, #27
 8001e2e:	d411      	bmi.n	8001e54 <__swsetup_r+0x50>
 8001e30:	2309      	movs	r3, #9
 8001e32:	6033      	str	r3, [r6, #0]
 8001e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e38:	81a3      	strh	r3, [r4, #12]
 8001e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3e:	e03e      	b.n	8001ebe <__swsetup_r+0xba>
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <__swsetup_r+0xd4>)
 8001e42:	429c      	cmp	r4, r3
 8001e44:	d101      	bne.n	8001e4a <__swsetup_r+0x46>
 8001e46:	68ac      	ldr	r4, [r5, #8]
 8001e48:	e7eb      	b.n	8001e22 <__swsetup_r+0x1e>
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <__swsetup_r+0xd8>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	bf08      	it	eq
 8001e50:	68ec      	ldreq	r4, [r5, #12]
 8001e52:	e7e6      	b.n	8001e22 <__swsetup_r+0x1e>
 8001e54:	0758      	lsls	r0, r3, #29
 8001e56:	d512      	bpl.n	8001e7e <__swsetup_r+0x7a>
 8001e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e5a:	b141      	cbz	r1, 8001e6e <__swsetup_r+0x6a>
 8001e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e60:	4299      	cmp	r1, r3
 8001e62:	d002      	beq.n	8001e6a <__swsetup_r+0x66>
 8001e64:	4630      	mov	r0, r6
 8001e66:	f000 f991 	bl	800218c <_free_r>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e74:	81a3      	strh	r3, [r4, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	6063      	str	r3, [r4, #4]
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	6023      	str	r3, [r4, #0]
 8001e7e:	89a3      	ldrh	r3, [r4, #12]
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	81a3      	strh	r3, [r4, #12]
 8001e86:	6923      	ldr	r3, [r4, #16]
 8001e88:	b94b      	cbnz	r3, 8001e9e <__swsetup_r+0x9a>
 8001e8a:	89a3      	ldrh	r3, [r4, #12]
 8001e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e94:	d003      	beq.n	8001e9e <__swsetup_r+0x9a>
 8001e96:	4621      	mov	r1, r4
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f000 f92b 	bl	80020f4 <__smakebuf_r>
 8001e9e:	89a0      	ldrh	r0, [r4, #12]
 8001ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ea4:	f010 0301 	ands.w	r3, r0, #1
 8001ea8:	d00a      	beq.n	8001ec0 <__swsetup_r+0xbc>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60a3      	str	r3, [r4, #8]
 8001eae:	6963      	ldr	r3, [r4, #20]
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	61a3      	str	r3, [r4, #24]
 8001eb4:	6923      	ldr	r3, [r4, #16]
 8001eb6:	b943      	cbnz	r3, 8001eca <__swsetup_r+0xc6>
 8001eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ebc:	d1ba      	bne.n	8001e34 <__swsetup_r+0x30>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	0781      	lsls	r1, r0, #30
 8001ec2:	bf58      	it	pl
 8001ec4:	6963      	ldrpl	r3, [r4, #20]
 8001ec6:	60a3      	str	r3, [r4, #8]
 8001ec8:	e7f4      	b.n	8001eb4 <__swsetup_r+0xb0>
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e7f7      	b.n	8001ebe <__swsetup_r+0xba>
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	08002828 	.word	0x08002828
 8001ed8:	08002848 	.word	0x08002848
 8001edc:	08002808 	.word	0x08002808

08001ee0 <_close_r>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4d06      	ldr	r5, [pc, #24]	; (8001efc <_close_r+0x1c>)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	4608      	mov	r0, r1
 8001eea:	602b      	str	r3, [r5, #0]
 8001eec:	f000 faa6 	bl	800243c <_close>
 8001ef0:	1c43      	adds	r3, r0, #1
 8001ef2:	d102      	bne.n	8001efa <_close_r+0x1a>
 8001ef4:	682b      	ldr	r3, [r5, #0]
 8001ef6:	b103      	cbz	r3, 8001efa <_close_r+0x1a>
 8001ef8:	6023      	str	r3, [r4, #0]
 8001efa:	bd38      	pop	{r3, r4, r5, pc}
 8001efc:	200000a8 	.word	0x200000a8

08001f00 <__sflush_r>:
 8001f00:	898a      	ldrh	r2, [r1, #12]
 8001f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f06:	4605      	mov	r5, r0
 8001f08:	0710      	lsls	r0, r2, #28
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	d458      	bmi.n	8001fc0 <__sflush_r+0xc0>
 8001f0e:	684b      	ldr	r3, [r1, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	dc05      	bgt.n	8001f20 <__sflush_r+0x20>
 8001f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	dc02      	bgt.n	8001f20 <__sflush_r+0x20>
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f22:	2e00      	cmp	r6, #0
 8001f24:	d0f9      	beq.n	8001f1a <__sflush_r+0x1a>
 8001f26:	2300      	movs	r3, #0
 8001f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f2c:	682f      	ldr	r7, [r5, #0]
 8001f2e:	602b      	str	r3, [r5, #0]
 8001f30:	d032      	beq.n	8001f98 <__sflush_r+0x98>
 8001f32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f34:	89a3      	ldrh	r3, [r4, #12]
 8001f36:	075a      	lsls	r2, r3, #29
 8001f38:	d505      	bpl.n	8001f46 <__sflush_r+0x46>
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	1ac0      	subs	r0, r0, r3
 8001f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f40:	b10b      	cbz	r3, 8001f46 <__sflush_r+0x46>
 8001f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f44:	1ac0      	subs	r0, r0, r3
 8001f46:	2300      	movs	r3, #0
 8001f48:	4602      	mov	r2, r0
 8001f4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f4c:	6a21      	ldr	r1, [r4, #32]
 8001f4e:	4628      	mov	r0, r5
 8001f50:	47b0      	blx	r6
 8001f52:	1c43      	adds	r3, r0, #1
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	d106      	bne.n	8001f66 <__sflush_r+0x66>
 8001f58:	6829      	ldr	r1, [r5, #0]
 8001f5a:	291d      	cmp	r1, #29
 8001f5c:	d82c      	bhi.n	8001fb8 <__sflush_r+0xb8>
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <__sflush_r+0x108>)
 8001f60:	40ca      	lsrs	r2, r1
 8001f62:	07d6      	lsls	r6, r2, #31
 8001f64:	d528      	bpl.n	8001fb8 <__sflush_r+0xb8>
 8001f66:	2200      	movs	r2, #0
 8001f68:	6062      	str	r2, [r4, #4]
 8001f6a:	04d9      	lsls	r1, r3, #19
 8001f6c:	6922      	ldr	r2, [r4, #16]
 8001f6e:	6022      	str	r2, [r4, #0]
 8001f70:	d504      	bpl.n	8001f7c <__sflush_r+0x7c>
 8001f72:	1c42      	adds	r2, r0, #1
 8001f74:	d101      	bne.n	8001f7a <__sflush_r+0x7a>
 8001f76:	682b      	ldr	r3, [r5, #0]
 8001f78:	b903      	cbnz	r3, 8001f7c <__sflush_r+0x7c>
 8001f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f7e:	602f      	str	r7, [r5, #0]
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d0ca      	beq.n	8001f1a <__sflush_r+0x1a>
 8001f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f88:	4299      	cmp	r1, r3
 8001f8a:	d002      	beq.n	8001f92 <__sflush_r+0x92>
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f000 f8fd 	bl	800218c <_free_r>
 8001f92:	2000      	movs	r0, #0
 8001f94:	6360      	str	r0, [r4, #52]	; 0x34
 8001f96:	e7c1      	b.n	8001f1c <__sflush_r+0x1c>
 8001f98:	6a21      	ldr	r1, [r4, #32]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	47b0      	blx	r6
 8001fa0:	1c41      	adds	r1, r0, #1
 8001fa2:	d1c7      	bne.n	8001f34 <__sflush_r+0x34>
 8001fa4:	682b      	ldr	r3, [r5, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0c4      	beq.n	8001f34 <__sflush_r+0x34>
 8001faa:	2b1d      	cmp	r3, #29
 8001fac:	d001      	beq.n	8001fb2 <__sflush_r+0xb2>
 8001fae:	2b16      	cmp	r3, #22
 8001fb0:	d101      	bne.n	8001fb6 <__sflush_r+0xb6>
 8001fb2:	602f      	str	r7, [r5, #0]
 8001fb4:	e7b1      	b.n	8001f1a <__sflush_r+0x1a>
 8001fb6:	89a3      	ldrh	r3, [r4, #12]
 8001fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fbc:	81a3      	strh	r3, [r4, #12]
 8001fbe:	e7ad      	b.n	8001f1c <__sflush_r+0x1c>
 8001fc0:	690f      	ldr	r7, [r1, #16]
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d0a9      	beq.n	8001f1a <__sflush_r+0x1a>
 8001fc6:	0793      	lsls	r3, r2, #30
 8001fc8:	680e      	ldr	r6, [r1, #0]
 8001fca:	bf08      	it	eq
 8001fcc:	694b      	ldreq	r3, [r1, #20]
 8001fce:	600f      	str	r7, [r1, #0]
 8001fd0:	bf18      	it	ne
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	eba6 0807 	sub.w	r8, r6, r7
 8001fd8:	608b      	str	r3, [r1, #8]
 8001fda:	f1b8 0f00 	cmp.w	r8, #0
 8001fde:	dd9c      	ble.n	8001f1a <__sflush_r+0x1a>
 8001fe0:	6a21      	ldr	r1, [r4, #32]
 8001fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	463a      	mov	r2, r7
 8001fe8:	4628      	mov	r0, r5
 8001fea:	47b0      	blx	r6
 8001fec:	2800      	cmp	r0, #0
 8001fee:	dc06      	bgt.n	8001ffe <__sflush_r+0xfe>
 8001ff0:	89a3      	ldrh	r3, [r4, #12]
 8001ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff6:	81a3      	strh	r3, [r4, #12]
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	e78e      	b.n	8001f1c <__sflush_r+0x1c>
 8001ffe:	4407      	add	r7, r0
 8002000:	eba8 0800 	sub.w	r8, r8, r0
 8002004:	e7e9      	b.n	8001fda <__sflush_r+0xda>
 8002006:	bf00      	nop
 8002008:	20400001 	.word	0x20400001

0800200c <_fflush_r>:
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	690b      	ldr	r3, [r1, #16]
 8002010:	4605      	mov	r5, r0
 8002012:	460c      	mov	r4, r1
 8002014:	b913      	cbnz	r3, 800201c <_fflush_r+0x10>
 8002016:	2500      	movs	r5, #0
 8002018:	4628      	mov	r0, r5
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	b118      	cbz	r0, 8002026 <_fflush_r+0x1a>
 800201e:	6983      	ldr	r3, [r0, #24]
 8002020:	b90b      	cbnz	r3, 8002026 <_fflush_r+0x1a>
 8002022:	f7ff fa15 	bl	8001450 <__sinit>
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <_fflush_r+0x6c>)
 8002028:	429c      	cmp	r4, r3
 800202a:	d11b      	bne.n	8002064 <_fflush_r+0x58>
 800202c:	686c      	ldr	r4, [r5, #4]
 800202e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0ef      	beq.n	8002016 <_fflush_r+0xa>
 8002036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002038:	07d0      	lsls	r0, r2, #31
 800203a:	d404      	bmi.n	8002046 <_fflush_r+0x3a>
 800203c:	0599      	lsls	r1, r3, #22
 800203e:	d402      	bmi.n	8002046 <_fflush_r+0x3a>
 8002040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002042:	f7ff faa3 	bl	800158c <__retarget_lock_acquire_recursive>
 8002046:	4628      	mov	r0, r5
 8002048:	4621      	mov	r1, r4
 800204a:	f7ff ff59 	bl	8001f00 <__sflush_r>
 800204e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002050:	07da      	lsls	r2, r3, #31
 8002052:	4605      	mov	r5, r0
 8002054:	d4e0      	bmi.n	8002018 <_fflush_r+0xc>
 8002056:	89a3      	ldrh	r3, [r4, #12]
 8002058:	059b      	lsls	r3, r3, #22
 800205a:	d4dd      	bmi.n	8002018 <_fflush_r+0xc>
 800205c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800205e:	f7ff fa96 	bl	800158e <__retarget_lock_release_recursive>
 8002062:	e7d9      	b.n	8002018 <_fflush_r+0xc>
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <_fflush_r+0x70>)
 8002066:	429c      	cmp	r4, r3
 8002068:	d101      	bne.n	800206e <_fflush_r+0x62>
 800206a:	68ac      	ldr	r4, [r5, #8]
 800206c:	e7df      	b.n	800202e <_fflush_r+0x22>
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <_fflush_r+0x74>)
 8002070:	429c      	cmp	r4, r3
 8002072:	bf08      	it	eq
 8002074:	68ec      	ldreq	r4, [r5, #12]
 8002076:	e7da      	b.n	800202e <_fflush_r+0x22>
 8002078:	08002828 	.word	0x08002828
 800207c:	08002848 	.word	0x08002848
 8002080:	08002808 	.word	0x08002808

08002084 <_lseek_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4d07      	ldr	r5, [pc, #28]	; (80020a4 <_lseek_r+0x20>)
 8002088:	4604      	mov	r4, r0
 800208a:	4608      	mov	r0, r1
 800208c:	4611      	mov	r1, r2
 800208e:	2200      	movs	r2, #0
 8002090:	602a      	str	r2, [r5, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	f000 f98f 	bl	80023b6 <_lseek>
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	d102      	bne.n	80020a2 <_lseek_r+0x1e>
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	b103      	cbz	r3, 80020a2 <_lseek_r+0x1e>
 80020a0:	6023      	str	r3, [r4, #0]
 80020a2:	bd38      	pop	{r3, r4, r5, pc}
 80020a4:	200000a8 	.word	0x200000a8

080020a8 <__swhatbuf_r>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	460e      	mov	r6, r1
 80020ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020b0:	2900      	cmp	r1, #0
 80020b2:	b096      	sub	sp, #88	; 0x58
 80020b4:	4614      	mov	r4, r2
 80020b6:	461d      	mov	r5, r3
 80020b8:	da08      	bge.n	80020cc <__swhatbuf_r+0x24>
 80020ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	602a      	str	r2, [r5, #0]
 80020c2:	061a      	lsls	r2, r3, #24
 80020c4:	d410      	bmi.n	80020e8 <__swhatbuf_r+0x40>
 80020c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ca:	e00e      	b.n	80020ea <__swhatbuf_r+0x42>
 80020cc:	466a      	mov	r2, sp
 80020ce:	f000 f8bb 	bl	8002248 <_fstat_r>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	dbf1      	blt.n	80020ba <__swhatbuf_r+0x12>
 80020d6:	9a01      	ldr	r2, [sp, #4]
 80020d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020e0:	425a      	negs	r2, r3
 80020e2:	415a      	adcs	r2, r3
 80020e4:	602a      	str	r2, [r5, #0]
 80020e6:	e7ee      	b.n	80020c6 <__swhatbuf_r+0x1e>
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	2000      	movs	r0, #0
 80020ec:	6023      	str	r3, [r4, #0]
 80020ee:	b016      	add	sp, #88	; 0x58
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080020f4 <__smakebuf_r>:
 80020f4:	898b      	ldrh	r3, [r1, #12]
 80020f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020f8:	079d      	lsls	r5, r3, #30
 80020fa:	4606      	mov	r6, r0
 80020fc:	460c      	mov	r4, r1
 80020fe:	d507      	bpl.n	8002110 <__smakebuf_r+0x1c>
 8002100:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	6123      	str	r3, [r4, #16]
 8002108:	2301      	movs	r3, #1
 800210a:	6163      	str	r3, [r4, #20]
 800210c:	b002      	add	sp, #8
 800210e:	bd70      	pop	{r4, r5, r6, pc}
 8002110:	ab01      	add	r3, sp, #4
 8002112:	466a      	mov	r2, sp
 8002114:	f7ff ffc8 	bl	80020a8 <__swhatbuf_r>
 8002118:	9900      	ldr	r1, [sp, #0]
 800211a:	4605      	mov	r5, r0
 800211c:	4630      	mov	r0, r6
 800211e:	f7ff fa57 	bl	80015d0 <_malloc_r>
 8002122:	b948      	cbnz	r0, 8002138 <__smakebuf_r+0x44>
 8002124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002128:	059a      	lsls	r2, r3, #22
 800212a:	d4ef      	bmi.n	800210c <__smakebuf_r+0x18>
 800212c:	f023 0303 	bic.w	r3, r3, #3
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	e7e3      	b.n	8002100 <__smakebuf_r+0xc>
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <__smakebuf_r+0x7c>)
 800213a:	62b3      	str	r3, [r6, #40]	; 0x28
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	6020      	str	r0, [r4, #0]
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	81a3      	strh	r3, [r4, #12]
 8002146:	9b00      	ldr	r3, [sp, #0]
 8002148:	6163      	str	r3, [r4, #20]
 800214a:	9b01      	ldr	r3, [sp, #4]
 800214c:	6120      	str	r0, [r4, #16]
 800214e:	b15b      	cbz	r3, 8002168 <__smakebuf_r+0x74>
 8002150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002154:	4630      	mov	r0, r6
 8002156:	f000 f889 	bl	800226c <_isatty_r>
 800215a:	b128      	cbz	r0, 8002168 <__smakebuf_r+0x74>
 800215c:	89a3      	ldrh	r3, [r4, #12]
 800215e:	f023 0303 	bic.w	r3, r3, #3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	81a3      	strh	r3, [r4, #12]
 8002168:	89a0      	ldrh	r0, [r4, #12]
 800216a:	4305      	orrs	r5, r0
 800216c:	81a5      	strh	r5, [r4, #12]
 800216e:	e7cd      	b.n	800210c <__smakebuf_r+0x18>
 8002170:	080013e9 	.word	0x080013e9

08002174 <__malloc_lock>:
 8002174:	4801      	ldr	r0, [pc, #4]	; (800217c <__malloc_lock+0x8>)
 8002176:	f7ff ba09 	b.w	800158c <__retarget_lock_acquire_recursive>
 800217a:	bf00      	nop
 800217c:	2000009c 	.word	0x2000009c

08002180 <__malloc_unlock>:
 8002180:	4801      	ldr	r0, [pc, #4]	; (8002188 <__malloc_unlock+0x8>)
 8002182:	f7ff ba04 	b.w	800158e <__retarget_lock_release_recursive>
 8002186:	bf00      	nop
 8002188:	2000009c 	.word	0x2000009c

0800218c <_free_r>:
 800218c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800218e:	2900      	cmp	r1, #0
 8002190:	d044      	beq.n	800221c <_free_r+0x90>
 8002192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002196:	9001      	str	r0, [sp, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f1a1 0404 	sub.w	r4, r1, #4
 800219e:	bfb8      	it	lt
 80021a0:	18e4      	addlt	r4, r4, r3
 80021a2:	f7ff ffe7 	bl	8002174 <__malloc_lock>
 80021a6:	4a1e      	ldr	r2, [pc, #120]	; (8002220 <_free_r+0x94>)
 80021a8:	9801      	ldr	r0, [sp, #4]
 80021aa:	6813      	ldr	r3, [r2, #0]
 80021ac:	b933      	cbnz	r3, 80021bc <_free_r+0x30>
 80021ae:	6063      	str	r3, [r4, #4]
 80021b0:	6014      	str	r4, [r2, #0]
 80021b2:	b003      	add	sp, #12
 80021b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021b8:	f7ff bfe2 	b.w	8002180 <__malloc_unlock>
 80021bc:	42a3      	cmp	r3, r4
 80021be:	d908      	bls.n	80021d2 <_free_r+0x46>
 80021c0:	6825      	ldr	r5, [r4, #0]
 80021c2:	1961      	adds	r1, r4, r5
 80021c4:	428b      	cmp	r3, r1
 80021c6:	bf01      	itttt	eq
 80021c8:	6819      	ldreq	r1, [r3, #0]
 80021ca:	685b      	ldreq	r3, [r3, #4]
 80021cc:	1949      	addeq	r1, r1, r5
 80021ce:	6021      	streq	r1, [r4, #0]
 80021d0:	e7ed      	b.n	80021ae <_free_r+0x22>
 80021d2:	461a      	mov	r2, r3
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	b10b      	cbz	r3, 80021dc <_free_r+0x50>
 80021d8:	42a3      	cmp	r3, r4
 80021da:	d9fa      	bls.n	80021d2 <_free_r+0x46>
 80021dc:	6811      	ldr	r1, [r2, #0]
 80021de:	1855      	adds	r5, r2, r1
 80021e0:	42a5      	cmp	r5, r4
 80021e2:	d10b      	bne.n	80021fc <_free_r+0x70>
 80021e4:	6824      	ldr	r4, [r4, #0]
 80021e6:	4421      	add	r1, r4
 80021e8:	1854      	adds	r4, r2, r1
 80021ea:	42a3      	cmp	r3, r4
 80021ec:	6011      	str	r1, [r2, #0]
 80021ee:	d1e0      	bne.n	80021b2 <_free_r+0x26>
 80021f0:	681c      	ldr	r4, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	6053      	str	r3, [r2, #4]
 80021f6:	4421      	add	r1, r4
 80021f8:	6011      	str	r1, [r2, #0]
 80021fa:	e7da      	b.n	80021b2 <_free_r+0x26>
 80021fc:	d902      	bls.n	8002204 <_free_r+0x78>
 80021fe:	230c      	movs	r3, #12
 8002200:	6003      	str	r3, [r0, #0]
 8002202:	e7d6      	b.n	80021b2 <_free_r+0x26>
 8002204:	6825      	ldr	r5, [r4, #0]
 8002206:	1961      	adds	r1, r4, r5
 8002208:	428b      	cmp	r3, r1
 800220a:	bf04      	itt	eq
 800220c:	6819      	ldreq	r1, [r3, #0]
 800220e:	685b      	ldreq	r3, [r3, #4]
 8002210:	6063      	str	r3, [r4, #4]
 8002212:	bf04      	itt	eq
 8002214:	1949      	addeq	r1, r1, r5
 8002216:	6021      	streq	r1, [r4, #0]
 8002218:	6054      	str	r4, [r2, #4]
 800221a:	e7ca      	b.n	80021b2 <_free_r+0x26>
 800221c:	b003      	add	sp, #12
 800221e:	bd30      	pop	{r4, r5, pc}
 8002220:	200000a0 	.word	0x200000a0

08002224 <_read_r>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4d07      	ldr	r5, [pc, #28]	; (8002244 <_read_r+0x20>)
 8002228:	4604      	mov	r4, r0
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	2200      	movs	r2, #0
 8002230:	602a      	str	r2, [r5, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f000 f867 	bl	8002306 <_read>
 8002238:	1c43      	adds	r3, r0, #1
 800223a:	d102      	bne.n	8002242 <_read_r+0x1e>
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	b103      	cbz	r3, 8002242 <_read_r+0x1e>
 8002240:	6023      	str	r3, [r4, #0]
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	200000a8 	.word	0x200000a8

08002248 <_fstat_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4d07      	ldr	r5, [pc, #28]	; (8002268 <_fstat_r+0x20>)
 800224c:	2300      	movs	r3, #0
 800224e:	4604      	mov	r4, r0
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	f000 f938 	bl	80024ca <_fstat>
 800225a:	1c43      	adds	r3, r0, #1
 800225c:	d102      	bne.n	8002264 <_fstat_r+0x1c>
 800225e:	682b      	ldr	r3, [r5, #0]
 8002260:	b103      	cbz	r3, 8002264 <_fstat_r+0x1c>
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	bd38      	pop	{r3, r4, r5, pc}
 8002266:	bf00      	nop
 8002268:	200000a8 	.word	0x200000a8

0800226c <_isatty_r>:
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4d06      	ldr	r5, [pc, #24]	; (8002288 <_isatty_r+0x1c>)
 8002270:	2300      	movs	r3, #0
 8002272:	4604      	mov	r4, r0
 8002274:	4608      	mov	r0, r1
 8002276:	602b      	str	r3, [r5, #0]
 8002278:	f000 fa8e 	bl	8002798 <_isatty>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	d102      	bne.n	8002286 <_isatty_r+0x1a>
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	b103      	cbz	r3, 8002286 <_isatty_r+0x1a>
 8002284:	6023      	str	r3, [r4, #0]
 8002286:	bd38      	pop	{r3, r4, r5, pc}
 8002288:	200000a8 	.word	0x200000a8

0800228c <findslot>:
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <findslot+0x2c>)
 800228e:	b510      	push	{r4, lr}
 8002290:	4604      	mov	r4, r0
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	b118      	cbz	r0, 800229e <findslot+0x12>
 8002296:	6983      	ldr	r3, [r0, #24]
 8002298:	b90b      	cbnz	r3, 800229e <findslot+0x12>
 800229a:	f7ff f8d9 	bl	8001450 <__sinit>
 800229e:	2c13      	cmp	r4, #19
 80022a0:	d807      	bhi.n	80022b2 <findslot+0x26>
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <findslot+0x30>)
 80022a4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80022a8:	3201      	adds	r2, #1
 80022aa:	d002      	beq.n	80022b2 <findslot+0x26>
 80022ac:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80022b0:	bd10      	pop	{r4, pc}
 80022b2:	2000      	movs	r0, #0
 80022b4:	e7fc      	b.n	80022b0 <findslot+0x24>
 80022b6:	bf00      	nop
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	200000b8 	.word	0x200000b8

080022c0 <error>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	4604      	mov	r4, r0
 80022c4:	f7ff f822 	bl	800130c <__errno>
 80022c8:	2613      	movs	r6, #19
 80022ca:	4605      	mov	r5, r0
 80022cc:	2700      	movs	r7, #0
 80022ce:	4630      	mov	r0, r6
 80022d0:	4639      	mov	r1, r7
 80022d2:	beab      	bkpt	0x00ab
 80022d4:	4606      	mov	r6, r0
 80022d6:	602e      	str	r6, [r5, #0]
 80022d8:	4620      	mov	r0, r4
 80022da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022dc <checkerror>:
 80022dc:	1c43      	adds	r3, r0, #1
 80022de:	d101      	bne.n	80022e4 <checkerror+0x8>
 80022e0:	f7ff bfee 	b.w	80022c0 <error>
 80022e4:	4770      	bx	lr

080022e6 <_swiread>:
 80022e6:	b530      	push	{r4, r5, lr}
 80022e8:	b085      	sub	sp, #20
 80022ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80022ee:	9203      	str	r2, [sp, #12]
 80022f0:	2406      	movs	r4, #6
 80022f2:	ad01      	add	r5, sp, #4
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	beab      	bkpt	0x00ab
 80022fa:	4604      	mov	r4, r0
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7ff ffed 	bl	80022dc <checkerror>
 8002302:	b005      	add	sp, #20
 8002304:	bd30      	pop	{r4, r5, pc}

08002306 <_read>:
 8002306:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002308:	4615      	mov	r5, r2
 800230a:	9101      	str	r1, [sp, #4]
 800230c:	f7ff ffbe 	bl	800228c <findslot>
 8002310:	9901      	ldr	r1, [sp, #4]
 8002312:	4604      	mov	r4, r0
 8002314:	b938      	cbnz	r0, 8002326 <_read+0x20>
 8002316:	f7fe fff9 	bl	800130c <__errno>
 800231a:	2309      	movs	r3, #9
 800231c:	6003      	str	r3, [r0, #0]
 800231e:	f04f 30ff 	mov.w	r0, #4294967295
 8002322:	b003      	add	sp, #12
 8002324:	bd30      	pop	{r4, r5, pc}
 8002326:	6800      	ldr	r0, [r0, #0]
 8002328:	462a      	mov	r2, r5
 800232a:	f7ff ffdc 	bl	80022e6 <_swiread>
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	d0f7      	beq.n	8002322 <_read+0x1c>
 8002332:	6863      	ldr	r3, [r4, #4]
 8002334:	1a2a      	subs	r2, r5, r0
 8002336:	4413      	add	r3, r2
 8002338:	6063      	str	r3, [r4, #4]
 800233a:	4610      	mov	r0, r2
 800233c:	e7f1      	b.n	8002322 <_read+0x1c>

0800233e <_swilseek>:
 800233e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002340:	460c      	mov	r4, r1
 8002342:	4616      	mov	r6, r2
 8002344:	f7ff ffa2 	bl	800228c <findslot>
 8002348:	4605      	mov	r5, r0
 800234a:	b940      	cbnz	r0, 800235e <_swilseek+0x20>
 800234c:	f7fe ffde 	bl	800130c <__errno>
 8002350:	2309      	movs	r3, #9
 8002352:	6003      	str	r3, [r0, #0]
 8002354:	f04f 34ff 	mov.w	r4, #4294967295
 8002358:	4620      	mov	r0, r4
 800235a:	b003      	add	sp, #12
 800235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235e:	2e02      	cmp	r6, #2
 8002360:	d903      	bls.n	800236a <_swilseek+0x2c>
 8002362:	f7fe ffd3 	bl	800130c <__errno>
 8002366:	2316      	movs	r3, #22
 8002368:	e7f3      	b.n	8002352 <_swilseek+0x14>
 800236a:	2e01      	cmp	r6, #1
 800236c:	d112      	bne.n	8002394 <_swilseek+0x56>
 800236e:	6843      	ldr	r3, [r0, #4]
 8002370:	18e4      	adds	r4, r4, r3
 8002372:	d4f6      	bmi.n	8002362 <_swilseek+0x24>
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	260a      	movs	r6, #10
 8002378:	e9cd 3400 	strd	r3, r4, [sp]
 800237c:	466f      	mov	r7, sp
 800237e:	4630      	mov	r0, r6
 8002380:	4639      	mov	r1, r7
 8002382:	beab      	bkpt	0x00ab
 8002384:	4606      	mov	r6, r0
 8002386:	4630      	mov	r0, r6
 8002388:	f7ff ffa8 	bl	80022dc <checkerror>
 800238c:	2800      	cmp	r0, #0
 800238e:	dbe1      	blt.n	8002354 <_swilseek+0x16>
 8002390:	606c      	str	r4, [r5, #4]
 8002392:	e7e1      	b.n	8002358 <_swilseek+0x1a>
 8002394:	2e02      	cmp	r6, #2
 8002396:	d1ed      	bne.n	8002374 <_swilseek+0x36>
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	260c      	movs	r6, #12
 800239e:	466f      	mov	r7, sp
 80023a0:	4630      	mov	r0, r6
 80023a2:	4639      	mov	r1, r7
 80023a4:	beab      	bkpt	0x00ab
 80023a6:	4606      	mov	r6, r0
 80023a8:	4630      	mov	r0, r6
 80023aa:	f7ff ff97 	bl	80022dc <checkerror>
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	d0d0      	beq.n	8002354 <_swilseek+0x16>
 80023b2:	4404      	add	r4, r0
 80023b4:	e7de      	b.n	8002374 <_swilseek+0x36>

080023b6 <_lseek>:
 80023b6:	f7ff bfc2 	b.w	800233e <_swilseek>

080023ba <_swiwrite>:
 80023ba:	b530      	push	{r4, r5, lr}
 80023bc:	b085      	sub	sp, #20
 80023be:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80023c2:	9203      	str	r2, [sp, #12]
 80023c4:	2405      	movs	r4, #5
 80023c6:	ad01      	add	r5, sp, #4
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	beab      	bkpt	0x00ab
 80023ce:	4604      	mov	r4, r0
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7ff ff83 	bl	80022dc <checkerror>
 80023d6:	b005      	add	sp, #20
 80023d8:	bd30      	pop	{r4, r5, pc}

080023da <_write>:
 80023da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80023dc:	4615      	mov	r5, r2
 80023de:	9101      	str	r1, [sp, #4]
 80023e0:	f7ff ff54 	bl	800228c <findslot>
 80023e4:	9901      	ldr	r1, [sp, #4]
 80023e6:	4604      	mov	r4, r0
 80023e8:	b930      	cbnz	r0, 80023f8 <_write+0x1e>
 80023ea:	f7fe ff8f 	bl	800130c <__errno>
 80023ee:	2309      	movs	r3, #9
 80023f0:	6003      	str	r3, [r0, #0]
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	e012      	b.n	800241e <_write+0x44>
 80023f8:	6800      	ldr	r0, [r0, #0]
 80023fa:	462a      	mov	r2, r5
 80023fc:	f7ff ffdd 	bl	80023ba <_swiwrite>
 8002400:	2800      	cmp	r0, #0
 8002402:	dbf6      	blt.n	80023f2 <_write+0x18>
 8002404:	6862      	ldr	r2, [r4, #4]
 8002406:	1a2b      	subs	r3, r5, r0
 8002408:	441a      	add	r2, r3
 800240a:	42a8      	cmp	r0, r5
 800240c:	6062      	str	r2, [r4, #4]
 800240e:	d105      	bne.n	800241c <_write+0x42>
 8002410:	2000      	movs	r0, #0
 8002412:	b003      	add	sp, #12
 8002414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002418:	f7ff bf52 	b.w	80022c0 <error>
 800241c:	4618      	mov	r0, r3
 800241e:	b003      	add	sp, #12
 8002420:	bd30      	pop	{r4, r5, pc}

08002422 <_swiclose>:
 8002422:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002424:	2402      	movs	r4, #2
 8002426:	9001      	str	r0, [sp, #4]
 8002428:	ad01      	add	r5, sp, #4
 800242a:	4620      	mov	r0, r4
 800242c:	4629      	mov	r1, r5
 800242e:	beab      	bkpt	0x00ab
 8002430:	4604      	mov	r4, r0
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff ff52 	bl	80022dc <checkerror>
 8002438:	b003      	add	sp, #12
 800243a:	bd30      	pop	{r4, r5, pc}

0800243c <_close>:
 800243c:	b538      	push	{r3, r4, r5, lr}
 800243e:	4605      	mov	r5, r0
 8002440:	f7ff ff24 	bl	800228c <findslot>
 8002444:	4604      	mov	r4, r0
 8002446:	b930      	cbnz	r0, 8002456 <_close+0x1a>
 8002448:	f7fe ff60 	bl	800130c <__errno>
 800244c:	2309      	movs	r3, #9
 800244e:	6003      	str	r3, [r0, #0]
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	bd38      	pop	{r3, r4, r5, pc}
 8002456:	3d01      	subs	r5, #1
 8002458:	2d01      	cmp	r5, #1
 800245a:	d809      	bhi.n	8002470 <_close+0x34>
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <_close+0x48>)
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	429a      	cmp	r2, r3
 8002464:	d104      	bne.n	8002470 <_close+0x34>
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	6003      	str	r3, [r0, #0]
 800246c:	2000      	movs	r0, #0
 800246e:	e7f1      	b.n	8002454 <_close+0x18>
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	f7ff ffd6 	bl	8002422 <_swiclose>
 8002476:	2800      	cmp	r0, #0
 8002478:	d1ec      	bne.n	8002454 <_close+0x18>
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	6023      	str	r3, [r4, #0]
 8002480:	e7e8      	b.n	8002454 <_close+0x18>
 8002482:	bf00      	nop
 8002484:	200000b8 	.word	0x200000b8

08002488 <_swistat>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	460c      	mov	r4, r1
 800248c:	f7ff fefe 	bl	800228c <findslot>
 8002490:	4605      	mov	r5, r0
 8002492:	b930      	cbnz	r0, 80024a2 <_swistat+0x1a>
 8002494:	f7fe ff3a 	bl	800130c <__errno>
 8002498:	2309      	movs	r3, #9
 800249a:	6003      	str	r3, [r0, #0]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	bd70      	pop	{r4, r5, r6, pc}
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a8:	6063      	str	r3, [r4, #4]
 80024aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ae:	64a3      	str	r3, [r4, #72]	; 0x48
 80024b0:	260c      	movs	r6, #12
 80024b2:	4630      	mov	r0, r6
 80024b4:	4629      	mov	r1, r5
 80024b6:	beab      	bkpt	0x00ab
 80024b8:	4605      	mov	r5, r0
 80024ba:	4628      	mov	r0, r5
 80024bc:	f7ff ff0e 	bl	80022dc <checkerror>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	bf1c      	itt	ne
 80024c4:	6120      	strne	r0, [r4, #16]
 80024c6:	2000      	movne	r0, #0
 80024c8:	e7ea      	b.n	80024a0 <_swistat+0x18>

080024ca <_fstat>:
 80024ca:	460b      	mov	r3, r1
 80024cc:	b510      	push	{r4, lr}
 80024ce:	2100      	movs	r1, #0
 80024d0:	4604      	mov	r4, r0
 80024d2:	2258      	movs	r2, #88	; 0x58
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe ff43 	bl	8001360 <memset>
 80024da:	4601      	mov	r1, r0
 80024dc:	4620      	mov	r0, r4
 80024de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e2:	f7ff bfd1 	b.w	8002488 <_swistat>

080024e6 <_stat>:
 80024e6:	b538      	push	{r3, r4, r5, lr}
 80024e8:	460d      	mov	r5, r1
 80024ea:	4604      	mov	r4, r0
 80024ec:	2258      	movs	r2, #88	; 0x58
 80024ee:	2100      	movs	r1, #0
 80024f0:	4628      	mov	r0, r5
 80024f2:	f7fe ff35 	bl	8001360 <memset>
 80024f6:	4620      	mov	r0, r4
 80024f8:	2100      	movs	r1, #0
 80024fa:	f000 f811 	bl	8002520 <_swiopen>
 80024fe:	1c43      	adds	r3, r0, #1
 8002500:	4604      	mov	r4, r0
 8002502:	d00b      	beq.n	800251c <_stat+0x36>
 8002504:	686b      	ldr	r3, [r5, #4]
 8002506:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800250a:	606b      	str	r3, [r5, #4]
 800250c:	4629      	mov	r1, r5
 800250e:	f7ff ffbb 	bl	8002488 <_swistat>
 8002512:	4605      	mov	r5, r0
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff ff91 	bl	800243c <_close>
 800251a:	462c      	mov	r4, r5
 800251c:	4620      	mov	r0, r4
 800251e:	bd38      	pop	{r3, r4, r5, pc}

08002520 <_swiopen>:
 8002520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002524:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80025d0 <_swiopen+0xb0>
 8002528:	b097      	sub	sp, #92	; 0x5c
 800252a:	4607      	mov	r7, r0
 800252c:	460e      	mov	r6, r1
 800252e:	2500      	movs	r5, #0
 8002530:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002534:	1c61      	adds	r1, r4, #1
 8002536:	d037      	beq.n	80025a8 <_swiopen+0x88>
 8002538:	3501      	adds	r5, #1
 800253a:	2d14      	cmp	r5, #20
 800253c:	d1f8      	bne.n	8002530 <_swiopen+0x10>
 800253e:	f7fe fee5 	bl	800130c <__errno>
 8002542:	2318      	movs	r3, #24
 8002544:	6003      	str	r3, [r0, #0]
 8002546:	f04f 34ff 	mov.w	r4, #4294967295
 800254a:	e03d      	b.n	80025c8 <_swiopen+0xa8>
 800254c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002550:	f240 6301 	movw	r3, #1537	; 0x601
 8002554:	07b2      	lsls	r2, r6, #30
 8002556:	bf48      	it	mi
 8002558:	f044 0402 	orrmi.w	r4, r4, #2
 800255c:	421e      	tst	r6, r3
 800255e:	bf18      	it	ne
 8002560:	f044 0404 	orrne.w	r4, r4, #4
 8002564:	0733      	lsls	r3, r6, #28
 8002566:	bf48      	it	mi
 8002568:	f024 0404 	bicmi.w	r4, r4, #4
 800256c:	4638      	mov	r0, r7
 800256e:	bf48      	it	mi
 8002570:	f044 0408 	orrmi.w	r4, r4, #8
 8002574:	9700      	str	r7, [sp, #0]
 8002576:	f7fd fe83 	bl	8000280 <strlen>
 800257a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800257e:	2401      	movs	r4, #1
 8002580:	4620      	mov	r0, r4
 8002582:	4649      	mov	r1, r9
 8002584:	beab      	bkpt	0x00ab
 8002586:	4604      	mov	r4, r0
 8002588:	2c00      	cmp	r4, #0
 800258a:	db08      	blt.n	800259e <_swiopen+0x7e>
 800258c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002590:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002594:	2300      	movs	r3, #0
 8002596:	f8c8 3004 	str.w	r3, [r8, #4]
 800259a:	462c      	mov	r4, r5
 800259c:	e014      	b.n	80025c8 <_swiopen+0xa8>
 800259e:	4620      	mov	r0, r4
 80025a0:	f7ff fe8e 	bl	80022c0 <error>
 80025a4:	4604      	mov	r4, r0
 80025a6:	e00f      	b.n	80025c8 <_swiopen+0xa8>
 80025a8:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80025ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025b0:	46e9      	mov	r9, sp
 80025b2:	d1cb      	bne.n	800254c <_swiopen+0x2c>
 80025b4:	4649      	mov	r1, r9
 80025b6:	4638      	mov	r0, r7
 80025b8:	f7ff ff95 	bl	80024e6 <_stat>
 80025bc:	3001      	adds	r0, #1
 80025be:	d0c5      	beq.n	800254c <_swiopen+0x2c>
 80025c0:	f7fe fea4 	bl	800130c <__errno>
 80025c4:	2311      	movs	r3, #17
 80025c6:	6003      	str	r3, [r0, #0]
 80025c8:	4620      	mov	r0, r4
 80025ca:	b017      	add	sp, #92	; 0x5c
 80025cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d0:	200000b8 	.word	0x200000b8

080025d4 <_get_semihosting_exts>:
 80025d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80025d8:	4606      	mov	r6, r0
 80025da:	460f      	mov	r7, r1
 80025dc:	482a      	ldr	r0, [pc, #168]	; (8002688 <_get_semihosting_exts+0xb4>)
 80025de:	2100      	movs	r1, #0
 80025e0:	4615      	mov	r5, r2
 80025e2:	f7ff ff9d 	bl	8002520 <_swiopen>
 80025e6:	462a      	mov	r2, r5
 80025e8:	4604      	mov	r4, r0
 80025ea:	2100      	movs	r1, #0
 80025ec:	4630      	mov	r0, r6
 80025ee:	f7fe feb7 	bl	8001360 <memset>
 80025f2:	1c63      	adds	r3, r4, #1
 80025f4:	d016      	beq.n	8002624 <_get_semihosting_exts+0x50>
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff fe48 	bl	800228c <findslot>
 80025fc:	f04f 090c 	mov.w	r9, #12
 8002600:	4680      	mov	r8, r0
 8002602:	4648      	mov	r0, r9
 8002604:	4641      	mov	r1, r8
 8002606:	beab      	bkpt	0x00ab
 8002608:	4680      	mov	r8, r0
 800260a:	4640      	mov	r0, r8
 800260c:	f7ff fe66 	bl	80022dc <checkerror>
 8002610:	2803      	cmp	r0, #3
 8002612:	dd02      	ble.n	800261a <_get_semihosting_exts+0x46>
 8002614:	1ec3      	subs	r3, r0, #3
 8002616:	42ab      	cmp	r3, r5
 8002618:	dc08      	bgt.n	800262c <_get_semihosting_exts+0x58>
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff ff0e 	bl	800243c <_close>
 8002620:	f04f 34ff 	mov.w	r4, #4294967295
 8002624:	4620      	mov	r0, r4
 8002626:	b003      	add	sp, #12
 8002628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800262c:	2204      	movs	r2, #4
 800262e:	eb0d 0102 	add.w	r1, sp, r2
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff fe67 	bl	8002306 <_read>
 8002638:	2803      	cmp	r0, #3
 800263a:	ddee      	ble.n	800261a <_get_semihosting_exts+0x46>
 800263c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002640:	2b53      	cmp	r3, #83	; 0x53
 8002642:	d1ea      	bne.n	800261a <_get_semihosting_exts+0x46>
 8002644:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002648:	2b48      	cmp	r3, #72	; 0x48
 800264a:	d1e6      	bne.n	800261a <_get_semihosting_exts+0x46>
 800264c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002650:	2b46      	cmp	r3, #70	; 0x46
 8002652:	d1e2      	bne.n	800261a <_get_semihosting_exts+0x46>
 8002654:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002658:	2b42      	cmp	r3, #66	; 0x42
 800265a:	d1de      	bne.n	800261a <_get_semihosting_exts+0x46>
 800265c:	2201      	movs	r2, #1
 800265e:	4639      	mov	r1, r7
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff fe6c 	bl	800233e <_swilseek>
 8002666:	2800      	cmp	r0, #0
 8002668:	dbd7      	blt.n	800261a <_get_semihosting_exts+0x46>
 800266a:	462a      	mov	r2, r5
 800266c:	4631      	mov	r1, r6
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff fe49 	bl	8002306 <_read>
 8002674:	4605      	mov	r5, r0
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff fee0 	bl	800243c <_close>
 800267c:	4628      	mov	r0, r5
 800267e:	f7ff fe2d 	bl	80022dc <checkerror>
 8002682:	4604      	mov	r4, r0
 8002684:	e7ce      	b.n	8002624 <_get_semihosting_exts+0x50>
 8002686:	bf00      	nop
 8002688:	0800289b 	.word	0x0800289b

0800268c <initialise_semihosting_exts>:
 800268c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800268e:	4d0a      	ldr	r5, [pc, #40]	; (80026b8 <initialise_semihosting_exts+0x2c>)
 8002690:	4c0a      	ldr	r4, [pc, #40]	; (80026bc <initialise_semihosting_exts+0x30>)
 8002692:	2100      	movs	r1, #0
 8002694:	2201      	movs	r2, #1
 8002696:	a801      	add	r0, sp, #4
 8002698:	6029      	str	r1, [r5, #0]
 800269a:	6022      	str	r2, [r4, #0]
 800269c:	f7ff ff9a 	bl	80025d4 <_get_semihosting_exts>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	dd07      	ble.n	80026b4 <initialise_semihosting_exts+0x28>
 80026a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80026a8:	f003 0201 	and.w	r2, r3, #1
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	602a      	str	r2, [r5, #0]
 80026b2:	6023      	str	r3, [r4, #0]
 80026b4:	b003      	add	sp, #12
 80026b6:	bd30      	pop	{r4, r5, pc}
 80026b8:	20000070 	.word	0x20000070
 80026bc:	20000074 	.word	0x20000074

080026c0 <_has_ext_stdout_stderr>:
 80026c0:	b510      	push	{r4, lr}
 80026c2:	4c04      	ldr	r4, [pc, #16]	; (80026d4 <_has_ext_stdout_stderr+0x14>)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da01      	bge.n	80026ce <_has_ext_stdout_stderr+0xe>
 80026ca:	f7ff ffdf 	bl	800268c <initialise_semihosting_exts>
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	bf00      	nop
 80026d4:	20000074 	.word	0x20000074

080026d8 <initialise_monitor_handles>:
 80026d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	b085      	sub	sp, #20
 80026de:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002790 <initialise_monitor_handles+0xb8>
 80026e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80026e6:	2303      	movs	r3, #3
 80026e8:	2400      	movs	r4, #0
 80026ea:	9303      	str	r3, [sp, #12]
 80026ec:	af01      	add	r7, sp, #4
 80026ee:	9402      	str	r4, [sp, #8]
 80026f0:	2501      	movs	r5, #1
 80026f2:	4628      	mov	r0, r5
 80026f4:	4639      	mov	r1, r7
 80026f6:	beab      	bkpt	0x00ab
 80026f8:	4605      	mov	r5, r0
 80026fa:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002794 <initialise_monitor_handles+0xbc>
 80026fe:	4623      	mov	r3, r4
 8002700:	4c20      	ldr	r4, [pc, #128]	; (8002784 <initialise_monitor_handles+0xac>)
 8002702:	f8c8 5000 	str.w	r5, [r8]
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800270e:	3301      	adds	r3, #1
 8002710:	2b14      	cmp	r3, #20
 8002712:	d1fa      	bne.n	800270a <initialise_monitor_handles+0x32>
 8002714:	f7ff ffd4 	bl	80026c0 <_has_ext_stdout_stderr>
 8002718:	4d1b      	ldr	r5, [pc, #108]	; (8002788 <initialise_monitor_handles+0xb0>)
 800271a:	b1d0      	cbz	r0, 8002752 <initialise_monitor_handles+0x7a>
 800271c:	f04f 0a03 	mov.w	sl, #3
 8002720:	2304      	movs	r3, #4
 8002722:	f8cd 9004 	str.w	r9, [sp, #4]
 8002726:	2601      	movs	r6, #1
 8002728:	f8cd a00c 	str.w	sl, [sp, #12]
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	4630      	mov	r0, r6
 8002730:	4639      	mov	r1, r7
 8002732:	beab      	bkpt	0x00ab
 8002734:	4683      	mov	fp, r0
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <initialise_monitor_handles+0xb4>)
 8002738:	f8cd 9004 	str.w	r9, [sp, #4]
 800273c:	f8c3 b000 	str.w	fp, [r3]
 8002740:	2308      	movs	r3, #8
 8002742:	f8cd a00c 	str.w	sl, [sp, #12]
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	4630      	mov	r0, r6
 800274a:	4639      	mov	r1, r7
 800274c:	beab      	bkpt	0x00ab
 800274e:	4606      	mov	r6, r0
 8002750:	602e      	str	r6, [r5, #0]
 8002752:	682b      	ldr	r3, [r5, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	bf02      	ittt	eq
 8002758:	4b0c      	ldreq	r3, [pc, #48]	; (800278c <initialise_monitor_handles+0xb4>)
 800275a:	681b      	ldreq	r3, [r3, #0]
 800275c:	602b      	streq	r3, [r5, #0]
 800275e:	2600      	movs	r6, #0
 8002760:	f8d8 3000 	ldr.w	r3, [r8]
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	6066      	str	r6, [r4, #4]
 8002768:	f7ff ffaa 	bl	80026c0 <_has_ext_stdout_stderr>
 800276c:	b130      	cbz	r0, 800277c <initialise_monitor_handles+0xa4>
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <initialise_monitor_handles+0xb4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002776:	682b      	ldr	r3, [r5, #0]
 8002778:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800277c:	b005      	add	sp, #20
 800277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	200000b8 	.word	0x200000b8
 8002788:	200000ac 	.word	0x200000ac
 800278c:	200000b4 	.word	0x200000b4
 8002790:	080028b1 	.word	0x080028b1
 8002794:	200000b0 	.word	0x200000b0

08002798 <_isatty>:
 8002798:	b570      	push	{r4, r5, r6, lr}
 800279a:	f7ff fd77 	bl	800228c <findslot>
 800279e:	2509      	movs	r5, #9
 80027a0:	4604      	mov	r4, r0
 80027a2:	b920      	cbnz	r0, 80027ae <_isatty+0x16>
 80027a4:	f7fe fdb2 	bl	800130c <__errno>
 80027a8:	6005      	str	r5, [r0, #0]
 80027aa:	4620      	mov	r0, r4
 80027ac:	bd70      	pop	{r4, r5, r6, pc}
 80027ae:	4628      	mov	r0, r5
 80027b0:	4621      	mov	r1, r4
 80027b2:	beab      	bkpt	0x00ab
 80027b4:	4604      	mov	r4, r0
 80027b6:	2c01      	cmp	r4, #1
 80027b8:	d0f7      	beq.n	80027aa <_isatty+0x12>
 80027ba:	f7fe fda7 	bl	800130c <__errno>
 80027be:	2400      	movs	r4, #0
 80027c0:	4605      	mov	r5, r0
 80027c2:	2613      	movs	r6, #19
 80027c4:	4630      	mov	r0, r6
 80027c6:	4621      	mov	r1, r4
 80027c8:	beab      	bkpt	0x00ab
 80027ca:	4606      	mov	r6, r0
 80027cc:	602e      	str	r6, [r5, #0]
 80027ce:	e7ec      	b.n	80027aa <_isatty+0x12>

080027d0 <_init>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr

080027dc <_fini>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr
